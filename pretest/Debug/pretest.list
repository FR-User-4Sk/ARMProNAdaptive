
pretest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee8  08003ee8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ee8  08003ee8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ee8  08003ee8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000070  08003f60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003f60  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbce  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ad0  00000000  00000000  0002bc67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  0002d738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  0002e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001870b  00000000  00000000  0002ef80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000923e  00000000  00000000  0004768b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b82a  00000000  00000000  000508c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc0f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b2c  00000000  00000000  000dc170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cfc 	.word	0x08003cfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003cfc 	.word	0x08003cfc

0800014c <__io_putchar>:
/* USER CODE BEGIN 0 */



PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 fcde 	bl	8002b1e <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000230 	.word	0x20000230

08000170 <HAL_GPIO_EXTI_Callback>:


//Button Event
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000180:	d10f      	bne.n	80001a2 <HAL_GPIO_EXTI_Callback+0x32>
		//Button13 (Unused)
		if('n' == pc13flag){
 8000182:	4b10      	ldr	r3, [pc, #64]	; (80001c4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b6e      	cmp	r3, #110	; 0x6e
 8000188:	d10b      	bne.n	80001a2 <HAL_GPIO_EXTI_Callback+0x32>
			pc13flag = 'y';
 800018a:	4b0e      	ldr	r3, [pc, #56]	; (80001c4 <HAL_GPIO_EXTI_Callback+0x54>)
 800018c:	2279      	movs	r2, #121	; 0x79
 800018e:	701a      	strb	r2, [r3, #0]
			printf("-----pc13flag = %c-----\r\n",pc13flag);
 8000190:	4b0c      	ldr	r3, [pc, #48]	; (80001c4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	4619      	mov	r1, r3
 8000196:	480c      	ldr	r0, [pc, #48]	; (80001c8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000198:	f002 fe5e 	bl	8002e58 <iprintf>
			pc13flag = 'n';
 800019c:	4b09      	ldr	r3, [pc, #36]	; (80001c4 <HAL_GPIO_EXTI_Callback+0x54>)
 800019e:	226e      	movs	r2, #110	; 0x6e
 80001a0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(GPIO_Pin == GPIO_PIN_7){ //Button7
 80001a2:	88fb      	ldrh	r3, [r7, #6]
 80001a4:	2b80      	cmp	r3, #128	; 0x80
 80001a6:	d108      	bne.n	80001ba <HAL_GPIO_EXTI_Callback+0x4a>

		}


		*/
		printf("HELLO FUCKING WORLD\r\n");
 80001a8:	4808      	ldr	r0, [pc, #32]	; (80001cc <HAL_GPIO_EXTI_Callback+0x5c>)
 80001aa:	f002 fec9 	bl	8002f40 <puts>


		printf("-----pc7flag = %c-----\r\n",pc7flag);
 80001ae:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <HAL_GPIO_EXTI_Callback+0x60>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4619      	mov	r1, r3
 80001b4:	4807      	ldr	r0, [pc, #28]	; (80001d4 <HAL_GPIO_EXTI_Callback+0x64>)
 80001b6:	f002 fe4f 	bl	8002e58 <iprintf>
	}

}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	200001d4 	.word	0x200001d4
 80001c8:	08003d14 	.word	0x08003d14
 80001cc:	08003d30 	.word	0x08003d30
 80001d0:	20000150 	.word	0x20000150
 80001d4:	08003d48 	.word	0x08003d48

080001d8 <HAL_TIM_PeriodElapsedCallback>:

//Timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance){ //timer2 for led blink
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	4b82      	ldr	r3, [pc, #520]	; (80003f0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d123      	bne.n	8000234 <HAL_TIM_PeriodElapsedCallback+0x5c>

		LED_pa7_cnt++;
 80001ec:	4b81      	ldr	r3, [pc, #516]	; (80003f4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	3301      	adds	r3, #1
 80001f2:	4a80      	ldr	r2, [pc, #512]	; (80003f4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80001f4:	6013      	str	r3, [r2, #0]
		LED_pa6_cnt++;
 80001f6:	4b80      	ldr	r3, [pc, #512]	; (80003f8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	3301      	adds	r3, #1
 80001fc:	4a7e      	ldr	r2, [pc, #504]	; (80003f8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80001fe:	6013      	str	r3, [r2, #0]

		if(LED_pa7_cnt >= LED_pa7_Limit){ //LED Blink
 8000200:	4b7c      	ldr	r3, [pc, #496]	; (80003f4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	4b7d      	ldr	r3, [pc, #500]	; (80003fc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	429a      	cmp	r2, r3
 800020a:	db06      	blt.n	800021a <HAL_TIM_PeriodElapsedCallback+0x42>
			LED_pa7_cnt = 0;
 800020c:	4b79      	ldr	r3, [pc, #484]	; (80003f4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]

			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000212:	2180      	movs	r1, #128	; 0x80
 8000214:	487a      	ldr	r0, [pc, #488]	; (8000400 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000216:	f001 fbfa 	bl	8001a0e <HAL_GPIO_TogglePin>
		}

		if(LED_pa6_cnt >= LED_pa6_Limit){ //LED Blink
 800021a:	4b77      	ldr	r3, [pc, #476]	; (80003f8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b79      	ldr	r3, [pc, #484]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	429a      	cmp	r2, r3
 8000224:	db06      	blt.n	8000234 <HAL_TIM_PeriodElapsedCallback+0x5c>
			LED_pa6_cnt = 0;
 8000226:	4b74      	ldr	r3, [pc, #464]	; (80003f8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]

			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800022c:	2140      	movs	r1, #64	; 0x40
 800022e:	4874      	ldr	r0, [pc, #464]	; (8000400 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000230:	f001 fbed 	bl	8001a0e <HAL_GPIO_TogglePin>
		}
	}//end timer 2

	if(htim->Instance == htim3.Instance){
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b73      	ldr	r3, [pc, #460]	; (8000408 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	f040 81f3 	bne.w	8000628 <HAL_TIM_PeriodElapsedCallback+0x450>
		if(tim2_flag == 'y'){
 8000242:	4b72      	ldr	r3, [pc, #456]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b79      	cmp	r3, #121	; 0x79
 8000248:	d113      	bne.n	8000272 <HAL_TIM_PeriodElapsedCallback+0x9a>
			globalCounter = globalCounter + 1;
 800024a:	4b71      	ldr	r3, [pc, #452]	; (8000410 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	3301      	adds	r3, #1
 8000250:	4a6f      	ldr	r2, [pc, #444]	; (8000410 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000252:	6013      	str	r3, [r2, #0]

			if(globalCounter >= 4){
 8000254:	4b6e      	ldr	r3, [pc, #440]	; (8000410 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b03      	cmp	r3, #3
 800025a:	dd0a      	ble.n	8000272 <HAL_TIM_PeriodElapsedCallback+0x9a>
				tim2_cnt = tim2_cnt + 1;
 800025c:	4b6d      	ldr	r3, [pc, #436]	; (8000414 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	4a6c      	ldr	r2, [pc, #432]	; (8000414 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000264:	6013      	str	r3, [r2, #0]
				tim2_trigger = 'y';
 8000266:	4b6c      	ldr	r3, [pc, #432]	; (8000418 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000268:	2279      	movs	r2, #121	; 0x79
 800026a:	701a      	strb	r2, [r3, #0]

				globalCounter = 0;
 800026c:	4b68      	ldr	r3, [pc, #416]	; (8000410 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
			}
		}

		if(Uart_Rx_flag == 'y'){
 8000272:	4b6a      	ldr	r3, [pc, #424]	; (800041c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b79      	cmp	r3, #121	; 0x79
 8000278:	f040 81d6 	bne.w	8000628 <HAL_TIM_PeriodElapsedCallback+0x450>
			if(Uart_Rx_active == 'n'){
 800027c:	4b68      	ldr	r3, [pc, #416]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b6e      	cmp	r3, #110	; 0x6e
 8000282:	d161      	bne.n	8000348 <HAL_TIM_PeriodElapsedCallback+0x170>
				Uart_Rx_Temp <<= 1;
 8000284:	4b67      	ldr	r3, [pc, #412]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	b2da      	uxtb	r2, r3
 800028c:	4b65      	ldr	r3, [pc, #404]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800028e:	701a      	strb	r2, [r3, #0]
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET){
 8000290:	2101      	movs	r1, #1
 8000292:	4865      	ldr	r0, [pc, #404]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000294:	f001 fb8c 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	2b01      	cmp	r3, #1
 800029c:	d105      	bne.n	80002aa <HAL_TIM_PeriodElapsedCallback+0xd2>
					Uart_Rx_Temp += 1;
 800029e:	4b61      	ldr	r3, [pc, #388]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	3301      	adds	r3, #1
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b5f      	ldr	r3, [pc, #380]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80002a8:	701a      	strb	r2, [r3, #0]
				}
				if((Uart_Rx_Temp & 0x0f) == 0x0c){ //if data start
 80002aa:	4b5e      	ldr	r3, [pc, #376]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	f003 030f 	and.w	r3, r3, #15
 80002b2:	2b0c      	cmp	r3, #12
 80002b4:	f040 81b8 	bne.w	8000628 <HAL_TIM_PeriodElapsedCallback+0x450>
					Uart_Rx_active = 'y'; //make active yes
 80002b8:	4b59      	ldr	r3, [pc, #356]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80002ba:	2279      	movs	r2, #121	; 0x79
 80002bc:	701a      	strb	r2, [r3, #0]
					Uart_Rx_Temp = 0x00; //rid Temp variable
 80002be:	4b59      	ldr	r3, [pc, #356]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
					rxByte_cnt += 1; //Count one Byte
 80002c4:	4b59      	ldr	r3, [pc, #356]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	4a58      	ldr	r2, [pc, #352]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002cc:	6013      	str	r3, [r2, #0]
					rxData[rxByte_cnt].start = 'y'; //start yes
 80002ce:	4b57      	ldr	r3, [pc, #348]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4957      	ldr	r1, [pc, #348]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	440b      	add	r3, r1
 80002dc:	2279      	movs	r2, #121	; 0x79
 80002de:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].data = 0x00; //data 0x00
 80002e0:	4b52      	ldr	r3, [pc, #328]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	4952      	ldr	r1, [pc, #328]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80002e6:	4613      	mov	r3, r2
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	4413      	add	r3, r2
 80002ec:	440b      	add	r3, r1
 80002ee:	3301      	adds	r3, #1
 80002f0:	2200      	movs	r2, #0
 80002f2:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].parity = 'n'; //parity n
 80002f4:	4b4d      	ldr	r3, [pc, #308]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	494d      	ldr	r1, [pc, #308]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80002fa:	4613      	mov	r3, r2
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	4413      	add	r3, r2
 8000300:	440b      	add	r3, r1
 8000302:	3302      	adds	r3, #2
 8000304:	226e      	movs	r2, #110	; 0x6e
 8000306:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].stop = 'x'; //stop x
 8000308:	4b48      	ldr	r3, [pc, #288]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	4948      	ldr	r1, [pc, #288]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800030e:	4613      	mov	r3, r2
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	4413      	add	r3, r2
 8000314:	440b      	add	r3, r1
 8000316:	3303      	adds	r3, #3
 8000318:	2278      	movs	r2, #120	; 0x78
 800031a:	701a      	strb	r2, [r3, #0]
					rxBit_cnt = 0; //bit count 0
 800031c:	4b45      	ldr	r3, [pc, #276]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
					rxSamp_cnt = 0; // Sample count 0
 8000322:	4b45      	ldr	r3, [pc, #276]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
					rxParity_bit = 0; //parity 0
 8000328:	4b44      	ldr	r3, [pc, #272]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
					Uart_Rx_trigger = 'n'; //trigger no
 800032e:	4b44      	ldr	r3, [pc, #272]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000330:	226e      	movs	r2, #110	; 0x6e
 8000332:	701a      	strb	r2, [r3, #0]
					Uart_Rx_data = 'n'; //data no
 8000334:	4b43      	ldr	r3, [pc, #268]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000336:	226e      	movs	r2, #110	; 0x6e
 8000338:	701a      	strb	r2, [r3, #0]
					Uart_Rx_parity = 'n'; //parity none
 800033a:	4b43      	ldr	r3, [pc, #268]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800033c:	226e      	movs	r2, #110	; 0x6e
 800033e:	701a      	strb	r2, [r3, #0]
					Uart_Rx_stop = 'n'; //stop no
 8000340:	4b42      	ldr	r3, [pc, #264]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000342:	226e      	movs	r2, #110	; 0x6e
 8000344:	701a      	strb	r2, [r3, #0]

		}//end of rx flag checker

	}//end of timer 3

}//end of timer callback
 8000346:	e16f      	b.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x450>
				Uart_Rx_trigger = 'n';
 8000348:	4b3d      	ldr	r3, [pc, #244]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800034a:	226e      	movs	r2, #110	; 0x6e
 800034c:	701a      	strb	r2, [r3, #0]
				rxSamp_cnt += 1;
 800034e:	4b3a      	ldr	r3, [pc, #232]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	3301      	adds	r3, #1
 8000354:	4a38      	ldr	r2, [pc, #224]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000356:	6013      	str	r3, [r2, #0]
				if((rxSamp_cnt % 4) == 0){
 8000358:	4b37      	ldr	r3, [pc, #220]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0303 	and.w	r3, r3, #3
 8000360:	2b00      	cmp	r3, #0
 8000362:	f040 8083 	bne.w	800046c <HAL_TIM_PeriodElapsedCallback+0x294>
					Uart_Rx_trigger = 'y'; //and then trigger is "yes"
 8000366:	4b36      	ldr	r3, [pc, #216]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000368:	2279      	movs	r2, #121	; 0x79
 800036a:	701a      	strb	r2, [r3, #0]
					if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 800036c:	2101      	movs	r1, #1
 800036e:	482e      	ldr	r0, [pc, #184]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000370:	f001 fb1e 	bl	80019b0 <HAL_GPIO_ReadPin>
 8000374:	4603      	mov	r3, r0
 8000376:	2b01      	cmp	r3, #1
 8000378:	d103      	bne.n	8000382 <HAL_TIM_PeriodElapsedCallback+0x1aa>
						rxBit_value = 1;
 800037a:	4b35      	ldr	r3, [pc, #212]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800037c:	2201      	movs	r2, #1
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <HAL_TIM_PeriodElapsedCallback+0x1b0>
						rxBit_value = 0;
 8000382:	4b33      	ldr	r3, [pc, #204]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
					rxBit_cnt += 1;
 8000388:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	4a29      	ldr	r2, [pc, #164]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000390:	6013      	str	r3, [r2, #0]
					if((1 <= rxBit_cnt) && (rxBit_cnt <= 8)){
 8000392:	4b28      	ldr	r3, [pc, #160]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	dd07      	ble.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d2>
 800039a:	4b26      	ldr	r3, [pc, #152]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b08      	cmp	r3, #8
 80003a0:	dc03      	bgt.n	80003aa <HAL_TIM_PeriodElapsedCallback+0x1d2>
						Uart_Rx_data = 'y'; //make data "yes"
 80003a2:	4b28      	ldr	r3, [pc, #160]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80003a4:	2279      	movs	r2, #121	; 0x79
 80003a6:	701a      	strb	r2, [r3, #0]
 80003a8:	e060      	b.n	800046c <HAL_TIM_PeriodElapsedCallback+0x294>
					}else if(9 == rxBit_cnt){
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b09      	cmp	r3, #9
 80003b0:	d152      	bne.n	8000458 <HAL_TIM_PeriodElapsedCallback+0x280>
						Uart_Rx_data = 'n'; //data no
 80003b2:	4b24      	ldr	r3, [pc, #144]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80003b4:	226e      	movs	r2, #110	; 0x6e
 80003b6:	701a      	strb	r2, [r3, #0]
						if('n' == Uart_Rx_Parity_Mode){
 80003b8:	4b26      	ldr	r3, [pc, #152]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b6e      	cmp	r3, #110	; 0x6e
 80003be:	d106      	bne.n	80003ce <HAL_TIM_PeriodElapsedCallback+0x1f6>
							Uart_Rx_parity = 'n'; //parity no
 80003c0:	4b21      	ldr	r3, [pc, #132]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80003c2:	226e      	movs	r2, #110	; 0x6e
 80003c4:	701a      	strb	r2, [r3, #0]
							Uart_Rx_stop = 'y'; //stop yes
 80003c6:	4b21      	ldr	r3, [pc, #132]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80003c8:	2279      	movs	r2, #121	; 0x79
 80003ca:	701a      	strb	r2, [r3, #0]
 80003cc:	e04e      	b.n	800046c <HAL_TIM_PeriodElapsedCallback+0x294>
						}else if('e' == Uart_Rx_Parity_Mode){
 80003ce:	4b21      	ldr	r3, [pc, #132]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b65      	cmp	r3, #101	; 0x65
 80003d4:	d103      	bne.n	80003de <HAL_TIM_PeriodElapsedCallback+0x206>
							Uart_Rx_parity = 'y'; //parity yes
 80003d6:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80003d8:	2279      	movs	r2, #121	; 0x79
 80003da:	701a      	strb	r2, [r3, #0]
 80003dc:	e046      	b.n	800046c <HAL_TIM_PeriodElapsedCallback+0x294>
						}else if('o' == Uart_Rx_Parity_Mode){
 80003de:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b6f      	cmp	r3, #111	; 0x6f
 80003e4:	d142      	bne.n	800046c <HAL_TIM_PeriodElapsedCallback+0x294>
							Uart_Rx_parity = 'y'; //parity yes
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80003e8:	2279      	movs	r2, #121	; 0x79
 80003ea:	701a      	strb	r2, [r3, #0]
 80003ec:	e03e      	b.n	800046c <HAL_TIM_PeriodElapsedCallback+0x294>
 80003ee:	bf00      	nop
 80003f0:	200001e4 	.word	0x200001e4
 80003f4:	20000144 	.word	0x20000144
 80003f8:	2000014c 	.word	0x2000014c
 80003fc:	200001d8 	.word	0x200001d8
 8000400:	40010800 	.word	0x40010800
 8000404:	20000140 	.word	0x20000140
 8000408:	2000018c 	.word	0x2000018c
 800040c:	2000022c 	.word	0x2000022c
 8000410:	2000008c 	.word	0x2000008c
 8000414:	2000017c 	.word	0x2000017c
 8000418:	2000013c 	.word	0x2000013c
 800041c:	20000179 	.word	0x20000179
 8000420:	2000017b 	.word	0x2000017b
 8000424:	20000274 	.word	0x20000274
 8000428:	40011000 	.word	0x40011000
 800042c:	200001dc 	.word	0x200001dc
 8000430:	2000009c 	.word	0x2000009c
 8000434:	20000184 	.word	0x20000184
 8000438:	20000188 	.word	0x20000188
 800043c:	20000174 	.word	0x20000174
 8000440:	200001e0 	.word	0x200001e0
 8000444:	20000180 	.word	0x20000180
 8000448:	20000178 	.word	0x20000178
 800044c:	2000013d 	.word	0x2000013d
 8000450:	20000278 	.word	0x20000278
 8000454:	2000017a 	.word	0x2000017a
					}else if(10 == rxBit_cnt){
 8000458:	4b75      	ldr	r3, [pc, #468]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x458>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b0a      	cmp	r3, #10
 800045e:	d105      	bne.n	800046c <HAL_TIM_PeriodElapsedCallback+0x294>
						Uart_Rx_parity = 'n'; //parity no
 8000460:	4b74      	ldr	r3, [pc, #464]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8000462:	226e      	movs	r2, #110	; 0x6e
 8000464:	701a      	strb	r2, [r3, #0]
						Uart_Rx_stop = 'y'; //stop yes!
 8000466:	4b74      	ldr	r3, [pc, #464]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8000468:	2279      	movs	r2, #121	; 0x79
 800046a:	701a      	strb	r2, [r3, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_data)){
 800046c:	4b73      	ldr	r3, [pc, #460]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x464>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b79      	cmp	r3, #121	; 0x79
 8000472:	d136      	bne.n	80004e2 <HAL_TIM_PeriodElapsedCallback+0x30a>
 8000474:	4b72      	ldr	r3, [pc, #456]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b79      	cmp	r3, #121	; 0x79
 800047a:	d132      	bne.n	80004e2 <HAL_TIM_PeriodElapsedCallback+0x30a>
					rxData[rxByte_cnt].data >>= 1; //push bit to right as one
 800047c:	4b71      	ldr	r3, [pc, #452]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4971      	ldr	r1, [pc, #452]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000482:	4613      	mov	r3, r2
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	440b      	add	r3, r1
 800048a:	3301      	adds	r3, #1
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	4a6d      	ldr	r2, [pc, #436]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000490:	6812      	ldr	r2, [r2, #0]
 8000492:	085b      	lsrs	r3, r3, #1
 8000494:	b2d8      	uxtb	r0, r3
 8000496:	496c      	ldr	r1, [pc, #432]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000498:	4613      	mov	r3, r2
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	4413      	add	r3, r2
 800049e:	440b      	add	r3, r1
 80004a0:	3301      	adds	r3, #1
 80004a2:	4602      	mov	r2, r0
 80004a4:	701a      	strb	r2, [r3, #0]
					if(1 == rxBit_value){
 80004a6:	4b69      	ldr	r3, [pc, #420]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x474>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d119      	bne.n	80004e2 <HAL_TIM_PeriodElapsedCallback+0x30a>
						rxData[rxByte_cnt].data += 0x80;
 80004ae:	4b65      	ldr	r3, [pc, #404]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4965      	ldr	r1, [pc, #404]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 80004b4:	4613      	mov	r3, r2
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	4413      	add	r3, r2
 80004ba:	440b      	add	r3, r1
 80004bc:	3301      	adds	r3, #1
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4a60      	ldr	r2, [pc, #384]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80004c2:	6812      	ldr	r2, [r2, #0]
 80004c4:	3b80      	subs	r3, #128	; 0x80
 80004c6:	b2d8      	uxtb	r0, r3
 80004c8:	495f      	ldr	r1, [pc, #380]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 80004ca:	4613      	mov	r3, r2
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4413      	add	r3, r2
 80004d0:	440b      	add	r3, r1
 80004d2:	3301      	adds	r3, #1
 80004d4:	4602      	mov	r2, r0
 80004d6:	701a      	strb	r2, [r3, #0]
						rxParity_bit += 1;
 80004d8:	4b5d      	ldr	r3, [pc, #372]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	4a5c      	ldr	r2, [pc, #368]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80004e0:	6013      	str	r3, [r2, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_parity)){
 80004e2:	4b56      	ldr	r3, [pc, #344]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x464>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b79      	cmp	r3, #121	; 0x79
 80004e8:	d17a      	bne.n	80005e0 <HAL_TIM_PeriodElapsedCallback+0x408>
 80004ea:	4b52      	ldr	r3, [pc, #328]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b79      	cmp	r3, #121	; 0x79
 80004f0:	d176      	bne.n	80005e0 <HAL_TIM_PeriodElapsedCallback+0x408>
					if('e' == Uart_Rx_Parity_Mode){
 80004f2:	4b58      	ldr	r3, [pc, #352]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b65      	cmp	r3, #101	; 0x65
 80004f8:	d137      	bne.n	800056a <HAL_TIM_PeriodElapsedCallback+0x392>
						if(((rxParity_bit % 2) == 0) && (0 == rxBit_value)){
 80004fa:	4b55      	ldr	r3, [pc, #340]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	2b00      	cmp	r3, #0
 8000504:	d10e      	bne.n	8000524 <HAL_TIM_PeriodElapsedCallback+0x34c>
 8000506:	4b51      	ldr	r3, [pc, #324]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d10a      	bne.n	8000524 <HAL_TIM_PeriodElapsedCallback+0x34c>
							rxData[rxByte_cnt].parity = 'e'; //set to 'e'
 800050e:	4b4d      	ldr	r3, [pc, #308]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	494d      	ldr	r1, [pc, #308]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000514:	4613      	mov	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	440b      	add	r3, r1
 800051c:	3302      	adds	r3, #2
 800051e:	2265      	movs	r2, #101	; 0x65
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	e05d      	b.n	80005e0 <HAL_TIM_PeriodElapsedCallback+0x408>
						}else if(((rxParity_bit % 2) == 1) && (1 == rxBit_value)){
 8000524:	4b4a      	ldr	r3, [pc, #296]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	bfb8      	it	lt
 8000530:	425b      	neglt	r3, r3
 8000532:	2b01      	cmp	r3, #1
 8000534:	d10e      	bne.n	8000554 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8000536:	4b45      	ldr	r3, [pc, #276]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d10a      	bne.n	8000554 <HAL_TIM_PeriodElapsedCallback+0x37c>
							rxData[rxByte_cnt].parity = 'e';//set to 'e'
 800053e:	4b41      	ldr	r3, [pc, #260]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4941      	ldr	r1, [pc, #260]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000544:	4613      	mov	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	440b      	add	r3, r1
 800054c:	3302      	adds	r3, #2
 800054e:	2265      	movs	r2, #101	; 0x65
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	e045      	b.n	80005e0 <HAL_TIM_PeriodElapsedCallback+0x408>
							rxData[rxByte_cnt].parity = 'f'; //else 'f'
 8000554:	4b3b      	ldr	r3, [pc, #236]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	493b      	ldr	r1, [pc, #236]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800055a:	4613      	mov	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4413      	add	r3, r2
 8000560:	440b      	add	r3, r1
 8000562:	3302      	adds	r3, #2
 8000564:	2266      	movs	r2, #102	; 0x66
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	e03a      	b.n	80005e0 <HAL_TIM_PeriodElapsedCallback+0x408>
					}else if('o' == Uart_Rx_Parity_Mode){
 800056a:	4b3a      	ldr	r3, [pc, #232]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b6f      	cmp	r3, #111	; 0x6f
 8000570:	d136      	bne.n	80005e0 <HAL_TIM_PeriodElapsedCallback+0x408>
						if(((rxParity_bit % 2) == 0) && (1 == rxBit_value)){
 8000572:	4b37      	ldr	r3, [pc, #220]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d10e      	bne.n	800059c <HAL_TIM_PeriodElapsedCallback+0x3c4>
 800057e:	4b33      	ldr	r3, [pc, #204]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d10a      	bne.n	800059c <HAL_TIM_PeriodElapsedCallback+0x3c4>
							rxData[rxByte_cnt].parity = 'o'; //set to 'o'
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	492f      	ldr	r1, [pc, #188]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800058c:	4613      	mov	r3, r2
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	4413      	add	r3, r2
 8000592:	440b      	add	r3, r1
 8000594:	3302      	adds	r3, #2
 8000596:	226f      	movs	r2, #111	; 0x6f
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e021      	b.n	80005e0 <HAL_TIM_PeriodElapsedCallback+0x408>
						}else if(((rxParity_bit % 2) == 1) && (0 == rxBit_value)){
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	bfb8      	it	lt
 80005a8:	425b      	neglt	r3, r3
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d10e      	bne.n	80005cc <HAL_TIM_PeriodElapsedCallback+0x3f4>
 80005ae:	4b27      	ldr	r3, [pc, #156]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x474>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d10a      	bne.n	80005cc <HAL_TIM_PeriodElapsedCallback+0x3f4>
							rxData[rxByte_cnt].parity = 'o'; //set to 'o'
 80005b6:	4b23      	ldr	r3, [pc, #140]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4923      	ldr	r1, [pc, #140]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 80005bc:	4613      	mov	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	440b      	add	r3, r1
 80005c4:	3302      	adds	r3, #2
 80005c6:	226f      	movs	r2, #111	; 0x6f
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	e009      	b.n	80005e0 <HAL_TIM_PeriodElapsedCallback+0x408>
							rxData[rxByte_cnt].parity = 'f'; //else 'f'
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	491d      	ldr	r1, [pc, #116]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 80005d2:	4613      	mov	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	440b      	add	r3, r1
 80005da:	3302      	adds	r3, #2
 80005dc:	2266      	movs	r2, #102	; 0x66
 80005de:	701a      	strb	r2, [r3, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_stop)){
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x464>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b79      	cmp	r3, #121	; 0x79
 80005e6:	d11f      	bne.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x450>
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b79      	cmp	r3, #121	; 0x79
 80005ee:	d11b      	bne.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x450>
					Uart_Rx_active = 'n';
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x480>)
 80005f2:	226e      	movs	r2, #110	; 0x6e
 80005f4:	701a      	strb	r2, [r3, #0]
					if(1 == rxBit_value){
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x474>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d10a      	bne.n	8000614 <HAL_TIM_PeriodElapsedCallback+0x43c>
						rxData[rxByte_cnt].stop = 'y';
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	4911      	ldr	r1, [pc, #68]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	440b      	add	r3, r1
 800060c:	3303      	adds	r3, #3
 800060e:	2279      	movs	r2, #121	; 0x79
 8000610:	701a      	strb	r2, [r3, #0]
}//end of timer callback
 8000612:	e009      	b.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x450>
						rxData[rxByte_cnt].stop = 'n';
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	490b      	ldr	r1, [pc, #44]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800061a:	4613      	mov	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	440b      	add	r3, r1
 8000622:	3303      	adds	r3, #3
 8000624:	226e      	movs	r2, #110	; 0x6e
 8000626:	701a      	strb	r2, [r3, #0]
}//end of timer callback
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000184 	.word	0x20000184
 8000634:	20000178 	.word	0x20000178
 8000638:	2000013d 	.word	0x2000013d
 800063c:	200001e0 	.word	0x200001e0
 8000640:	20000180 	.word	0x20000180
 8000644:	200001dc 	.word	0x200001dc
 8000648:	2000009c 	.word	0x2000009c
 800064c:	20000278 	.word	0x20000278
 8000650:	20000174 	.word	0x20000174
 8000654:	2000017a 	.word	0x2000017a
 8000658:	2000017b 	.word	0x2000017b

0800065c <initFunction>:

//Init script for initial setting
void initFunction(){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef tim2_it_start; //variable for check timer interupt status

  tim2_it_start = HAL_TIM_Base_Start_IT(&htim2); //read interupt status
 8000662:	4837      	ldr	r0, [pc, #220]	; (8000740 <initFunction+0xe4>)
 8000664:	f001 fe70 	bl	8002348 <HAL_TIM_Base_Start_IT>
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]

  if(tim2_it_start == HAL_OK){
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d103      	bne.n	800067a <initFunction+0x1e>
	  printf("Timer2 OK\r\n");
 8000672:	4834      	ldr	r0, [pc, #208]	; (8000744 <initFunction+0xe8>)
 8000674:	f002 fc64 	bl	8002f40 <puts>
 8000678:	e002      	b.n	8000680 <initFunction+0x24>
  }else{
	  printf("Timer2 ERROR!\r\n");
 800067a:	4833      	ldr	r0, [pc, #204]	; (8000748 <initFunction+0xec>)
 800067c:	f002 fc60 	bl	8002f40 <puts>


  //init setting


  pc13flag = 'n'; //unused
 8000680:	4b32      	ldr	r3, [pc, #200]	; (800074c <initFunction+0xf0>)
 8000682:	226e      	movs	r2, #110	; 0x6e
 8000684:	701a      	strb	r2, [r3, #0]
  pc7flag = 'n';
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <initFunction+0xf4>)
 8000688:	226e      	movs	r2, #110	; 0x6e
 800068a:	701a      	strb	r2, [r3, #0]

  LED_pa6_cnt = 0;
 800068c:	4b31      	ldr	r3, [pc, #196]	; (8000754 <initFunction+0xf8>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
  LED_pa6_Limit = SLOW6;
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <initFunction+0xfc>)
 8000694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000698:	601a      	str	r2, [r3, #0]
  LED_pa7_cnt = 0;
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <initFunction+0x100>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
  LED_pa7_Limit = SLOW7;
 80006a0:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <initFunction+0x104>)
 80006a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006a6:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2140      	movs	r1, #64	; 0x40
 80006ac:	482d      	ldr	r0, [pc, #180]	; (8000764 <initFunction+0x108>)
 80006ae:	f001 f996 	bl	80019de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	482b      	ldr	r0, [pc, #172]	; (8000764 <initFunction+0x108>)
 80006b8:	f001 f991 	bl	80019de <HAL_GPIO_WritePin>

  //US100 Sensor Code

  HAL_StatusTypeDef tim3_it_start;

  tim3_it_start = HAL_TIM_Base_Start_IT(&htim3);
 80006bc:	482a      	ldr	r0, [pc, #168]	; (8000768 <initFunction+0x10c>)
 80006be:	f001 fe43 	bl	8002348 <HAL_TIM_Base_Start_IT>
 80006c2:	4603      	mov	r3, r0
 80006c4:	71bb      	strb	r3, [r7, #6]

  if(tim3_it_start == HAL_OK){
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d103      	bne.n	80006d4 <initFunction+0x78>
	  printf("Timer3 OK\r\n");
 80006cc:	4827      	ldr	r0, [pc, #156]	; (800076c <initFunction+0x110>)
 80006ce:	f002 fc37 	bl	8002f40 <puts>
 80006d2:	e002      	b.n	80006da <initFunction+0x7e>
  }else{
	  printf("Timer3 ERROR!\r\n");
 80006d4:	4826      	ldr	r0, [pc, #152]	; (8000770 <initFunction+0x114>)
 80006d6:	f002 fc33 	bl	8002f40 <puts>





  Uart_Rx_Parity_Mode = 'n'; // 'n':none, 'e':even, 'o':odd
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <initFunction+0x118>)
 80006dc:	226e      	movs	r2, #110	; 0x6e
 80006de:	701a      	strb	r2, [r3, #0]
  rxByte_cnt = 0;
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <initFunction+0x11c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
  rxBit_cnt = 0;
 80006e6:	4b25      	ldr	r3, [pc, #148]	; (800077c <initFunction+0x120>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
  rxSamp_cnt = 0;
 80006ec:	4b24      	ldr	r3, [pc, #144]	; (8000780 <initFunction+0x124>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
  Uart_Rx_flag = 'n';
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <initFunction+0x128>)
 80006f4:	226e      	movs	r2, #110	; 0x6e
 80006f6:	701a      	strb	r2, [r3, #0]
  Uart_Rx_active = 'n';
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <initFunction+0x12c>)
 80006fa:	226e      	movs	r2, #110	; 0x6e
 80006fc:	701a      	strb	r2, [r3, #0]
  Uart_Rx_Temp = 0x00;
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <initFunction+0x130>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]

  Uart_Tx_Parity_Mode = 'n'; // 'n':none, 'e':even, 'o':odd
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <initFunction+0x134>)
 8000706:	226e      	movs	r2, #110	; 0x6e
 8000708:	701a      	strb	r2, [r3, #0]
  tim2_cnt = 0;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <initFunction+0x138>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
  tim2_flag = 'n';
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <initFunction+0x13c>)
 8000712:	226e      	movs	r2, #110	; 0x6e
 8000714:	701a      	strb	r2, [r3, #0]
  tim2_trigger = 'n';
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <initFunction+0x140>)
 8000718:	226e      	movs	r2, #110	; 0x6e
 800071a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2101      	movs	r1, #1
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <initFunction+0x108>)
 8000722:	f001 f95c 	bl	80019de <HAL_GPIO_WritePin>


  Uart_Rx_flag = 'y';
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <initFunction+0x128>)
 8000728:	2279      	movs	r2, #121	; 0x79
 800072a:	701a      	strb	r2, [r3, #0]
  Uart_Rx_active = 'n';
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <initFunction+0x12c>)
 800072e:	226e      	movs	r2, #110	; 0x6e
 8000730:	701a      	strb	r2, [r3, #0]





  chUartTxData[0] = 'a';
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <initFunction+0x144>)
 8000734:	2261      	movs	r2, #97	; 0x61
 8000736:	701a      	strb	r2, [r3, #0]
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200001e4 	.word	0x200001e4
 8000744:	08003d64 	.word	0x08003d64
 8000748:	08003d70 	.word	0x08003d70
 800074c:	200001d4 	.word	0x200001d4
 8000750:	20000150 	.word	0x20000150
 8000754:	2000014c 	.word	0x2000014c
 8000758:	20000140 	.word	0x20000140
 800075c:	20000144 	.word	0x20000144
 8000760:	200001d8 	.word	0x200001d8
 8000764:	40010800 	.word	0x40010800
 8000768:	2000018c 	.word	0x2000018c
 800076c:	08003d80 	.word	0x08003d80
 8000770:	08003d8c 	.word	0x08003d8c
 8000774:	2000017a 	.word	0x2000017a
 8000778:	200001dc 	.word	0x200001dc
 800077c:	20000184 	.word	0x20000184
 8000780:	20000188 	.word	0x20000188
 8000784:	20000179 	.word	0x20000179
 8000788:	2000017b 	.word	0x2000017b
 800078c:	20000274 	.word	0x20000274
 8000790:	2000014a 	.word	0x2000014a
 8000794:	2000017c 	.word	0x2000017c
 8000798:	2000022c 	.word	0x2000022c
 800079c:	2000013c 	.word	0x2000013c
 80007a0:	20000154 	.word	0x20000154

080007a4 <scanParity>:
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	HAL_Delay(300);
}


void scanParity(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	pa8pin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80007a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ac:	481a      	ldr	r0, [pc, #104]	; (8000818 <scanParity+0x74>)
 80007ae:	f001 f8ff 	bl	80019b0 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <scanParity+0x78>)
 80007b8:	701a      	strb	r2, [r3, #0]
	pb8pin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4818      	ldr	r0, [pc, #96]	; (8000820 <scanParity+0x7c>)
 80007c0:	f001 f8f6 	bl	80019b0 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <scanParity+0x80>)
 80007ca:	701a      	strb	r2, [r3, #0]

	if((GPIO_PIN_SET == pa8pin) && (GPIO_PIN_RESET == pb8pin)){
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <scanParity+0x78>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d10a      	bne.n	80007ea <scanParity+0x46>
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <scanParity+0x80>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d106      	bne.n	80007ea <scanParity+0x46>
	  Uart_Tx_Parity_Mode = 'e';
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <scanParity+0x84>)
 80007de:	2265      	movs	r2, #101	; 0x65
 80007e0:	701a      	strb	r2, [r3, #0]
	  Uart_Rx_Parity_Mode = 'e';
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <scanParity+0x88>)
 80007e4:	2265      	movs	r2, #101	; 0x65
 80007e6:	701a      	strb	r2, [r3, #0]
 80007e8:	e014      	b.n	8000814 <scanParity+0x70>
	}else if((GPIO_PIN_RESET == pa8pin) && (GPIO_PIN_SET == pb8pin)){
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <scanParity+0x78>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10a      	bne.n	8000808 <scanParity+0x64>
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <scanParity+0x80>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d106      	bne.n	8000808 <scanParity+0x64>
	  Uart_Tx_Parity_Mode = 'o';
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <scanParity+0x84>)
 80007fc:	226f      	movs	r2, #111	; 0x6f
 80007fe:	701a      	strb	r2, [r3, #0]
	  Uart_Rx_Parity_Mode = 'o';
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <scanParity+0x88>)
 8000802:	226f      	movs	r2, #111	; 0x6f
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e005      	b.n	8000814 <scanParity+0x70>
	}else{
	  Uart_Tx_Parity_Mode = 'n';
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <scanParity+0x84>)
 800080a:	226e      	movs	r2, #110	; 0x6e
 800080c:	701a      	strb	r2, [r3, #0]
	  Uart_Rx_Parity_Mode = 'n';
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <scanParity+0x88>)
 8000810:	226e      	movs	r2, #110	; 0x6e
 8000812:	701a      	strb	r2, [r3, #0]
	}
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40010800 	.word	0x40010800
 800081c:	200001d5 	.word	0x200001d5
 8000820:	40010c00 	.word	0x40010c00
 8000824:	20000148 	.word	0x20000148
 8000828:	2000014a 	.word	0x2000014a
 800082c:	2000017a 	.word	0x2000017a

08000830 <sendGradualChar>:



void sendGradualChar(){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	pc13pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000838:	4812      	ldr	r0, [pc, #72]	; (8000884 <sendGradualChar+0x54>)
 800083a:	f001 f8b9 	bl	80019b0 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <sendGradualChar+0x58>)
 8000844:	701a      	strb	r2, [r3, #0]
	if(GPIO_PIN_RESET == pc13pin){
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <sendGradualChar+0x58>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d118      	bne.n	8000880 <sendGradualChar+0x50>

		//if you want to send data through PA0, unannotate below code

	  //Uart_Tx_Byte(chUartTxData[0], Uart_Tx_Parity_Mode);
	  printf("-a15-sendByte-Uart_Tx_Byte=%c[0x%02x]---parity=%c---\r\n",chUartTxData[0],chUartTxData[0],Uart_Tx_Parity_Mode);
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <sendGradualChar+0x5c>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	4619      	mov	r1, r3
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <sendGradualChar+0x5c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <sendGradualChar+0x60>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	480d      	ldr	r0, [pc, #52]	; (8000894 <sendGradualChar+0x64>)
 8000860:	f002 fafa 	bl	8002e58 <iprintf>
	  if('z' == chUartTxData[0]){
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <sendGradualChar+0x5c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b7a      	cmp	r3, #122	; 0x7a
 800086a:	d103      	bne.n	8000874 <sendGradualChar+0x44>
		  chUartTxData[0] = 'a';
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <sendGradualChar+0x5c>)
 800086e:	2261      	movs	r2, #97	; 0x61
 8000870:	701a      	strb	r2, [r3, #0]
	  }else{
		  chUartTxData[0] += 1;
	  }
	}
}
 8000872:	e005      	b.n	8000880 <sendGradualChar+0x50>
		  chUartTxData[0] += 1;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <sendGradualChar+0x5c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <sendGradualChar+0x5c>)
 800087e:	701a      	strb	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40011000 	.word	0x40011000
 8000888:	20000149 	.word	0x20000149
 800088c:	20000154 	.word	0x20000154
 8000890:	2000014a 	.word	0x2000014a
 8000894:	08003d9c 	.word	0x08003d9c

08000898 <doUS100>:


void doUS100(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	//HAL_Delay(200);

	Uart_Tx_Byte(0x55, 'n');
 800089e:	216e      	movs	r1, #110	; 0x6e
 80008a0:	2055      	movs	r0, #85	; 0x55
 80008a2:	f000 f861 	bl	8000968 <Uart_Tx_Byte>

	printf("check distance\r\n");
 80008a6:	4827      	ldr	r0, [pc, #156]	; (8000944 <doUS100+0xac>)
 80008a8:	f002 fb4a 	bl	8002f40 <puts>

	HAL_Delay(200);
 80008ac:	20c8      	movs	r0, #200	; 0xc8
 80008ae:	f000 fdf5 	bl	800149c <HAL_Delay>

	if(('n' == Uart_Rx_active) && (1 <= rxByte_cnt)){
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <doUS100+0xb0>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b6e      	cmp	r3, #110	; 0x6e
 80008b8:	d123      	bne.n	8000902 <doUS100+0x6a>
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <doUS100+0xb4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	dd1f      	ble.n	8000902 <doUS100+0x6a>
		int resultDistance = (rxData[1].data << 8) + rxData[2].data;
 80008c2:	4b23      	ldr	r3, [pc, #140]	; (8000950 <doUS100+0xb8>)
 80008c4:	799b      	ldrb	r3, [r3, #6]
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <doUS100+0xb8>)
 80008ca:	7ad2      	ldrb	r2, [r2, #11]
 80008cc:	4413      	add	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]

		printf("distance : %d mm\r\n", resultDistance);
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	4820      	ldr	r0, [pc, #128]	; (8000954 <doUS100+0xbc>)
 80008d4:	f002 fac0 	bl	8002e58 <iprintf>

		if(resultDistance > 200){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2bc8      	cmp	r3, #200	; 0xc8
 80008dc:	dd08      	ble.n	80008f0 <doUS100+0x58>
			LED_pa6_Limit = SLOW6;
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <doUS100+0xc0>)
 80008e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008e4:	601a      	str	r2, [r3, #0]
			LED_pa7_Limit = SLOW7;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <doUS100+0xc4>)
 80008e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	e005      	b.n	80008fc <doUS100+0x64>
		}else{
			LED_pa6_Limit = FAST6;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <doUS100+0xc0>)
 80008f2:	2264      	movs	r2, #100	; 0x64
 80008f4:	601a      	str	r2, [r3, #0]
			LED_pa7_Limit = FAST7;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <doUS100+0xc4>)
 80008f8:	22c8      	movs	r2, #200	; 0xc8
 80008fa:	601a      	str	r2, [r3, #0]
		}

		rxByte_cnt = 0;
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <doUS100+0xb4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
	}

	Uart_Tx_Byte(0x50, 'n');
 8000902:	216e      	movs	r1, #110	; 0x6e
 8000904:	2050      	movs	r0, #80	; 0x50
 8000906:	f000 f82f 	bl	8000968 <Uart_Tx_Byte>

	printf("check temp\r\n");
 800090a:	4815      	ldr	r0, [pc, #84]	; (8000960 <doUS100+0xc8>)
 800090c:	f002 fb18 	bl	8002f40 <puts>

	HAL_Delay(200);
 8000910:	20c8      	movs	r0, #200	; 0xc8
 8000912:	f000 fdc3 	bl	800149c <HAL_Delay>

	if(('n' == Uart_Rx_active) && (1 <= rxByte_cnt)){
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <doUS100+0xb0>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b6e      	cmp	r3, #110	; 0x6e
 800091c:	d10d      	bne.n	800093a <doUS100+0xa2>
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <doUS100+0xb4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	dd09      	ble.n	800093a <doUS100+0xa2>
		printf("temp : %d\r\n", rxData[1].data - 45);
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <doUS100+0xb8>)
 8000928:	799b      	ldrb	r3, [r3, #6]
 800092a:	3b2d      	subs	r3, #45	; 0x2d
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <doUS100+0xcc>)
 8000930:	f002 fa92 	bl	8002e58 <iprintf>

		rxByte_cnt = 0;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <doUS100+0xb4>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
	}

}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	08003dd4 	.word	0x08003dd4
 8000948:	2000017b 	.word	0x2000017b
 800094c:	200001dc 	.word	0x200001dc
 8000950:	2000009c 	.word	0x2000009c
 8000954:	08003de4 	.word	0x08003de4
 8000958:	20000140 	.word	0x20000140
 800095c:	200001d8 	.word	0x200001d8
 8000960:	08003df8 	.word	0x08003df8
 8000964:	08003e04 	.word	0x08003e04

08000968 <Uart_Tx_Byte>:



//original TX_BYTE code
void Uart_Tx_Byte(char TxData, char Parity)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	460a      	mov	r2, r1
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	char chExit = 'n';
 8000978:	236e      	movs	r3, #110	; 0x6e
 800097a:	73fb      	strb	r3, [r7, #15]
	char chComp = 0x01;
 800097c:	2301      	movs	r3, #1
 800097e:	73bb      	strb	r3, [r7, #14]
	int ParityBit_cnt = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]

	tim2_cnt = 0;
 8000984:	4ba5      	ldr	r3, [pc, #660]	; (8000c1c <Uart_Tx_Byte+0x2b4>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
	tim2_flag = 'y';
 800098a:	4ba5      	ldr	r3, [pc, #660]	; (8000c20 <Uart_Tx_Byte+0x2b8>)
 800098c:	2279      	movs	r2, #121	; 0x79
 800098e:	701a      	strb	r2, [r3, #0]
	tim2_trigger = 'n';
 8000990:	4ba4      	ldr	r3, [pc, #656]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000992:	226e      	movs	r2, #110	; 0x6e
 8000994:	701a      	strb	r2, [r3, #0]

	while(1){
		if(('y' == tim2_trigger) && (tim2_cnt == 1)){ // idle
 8000996:	4ba3      	ldr	r3, [pc, #652]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b79      	cmp	r3, #121	; 0x79
 800099c:	d10c      	bne.n	80009b8 <Uart_Tx_Byte+0x50>
 800099e:	4b9f      	ldr	r3, [pc, #636]	; (8000c1c <Uart_Tx_Byte+0x2b4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d108      	bne.n	80009b8 <Uart_Tx_Byte+0x50>
			tim2_trigger = 'n';
 80009a6:	4b9f      	ldr	r3, [pc, #636]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 80009a8:	226e      	movs	r2, #110	; 0x6e
 80009aa:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2101      	movs	r1, #1
 80009b0:	489d      	ldr	r0, [pc, #628]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 80009b2:	f001 f814 	bl	80019de <HAL_GPIO_WritePin>
 80009b6:	e18b      	b.n	8000cd0 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 2)){ // start
 80009b8:	4b9a      	ldr	r3, [pc, #616]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b79      	cmp	r3, #121	; 0x79
 80009be:	d10c      	bne.n	80009da <Uart_Tx_Byte+0x72>
 80009c0:	4b96      	ldr	r3, [pc, #600]	; (8000c1c <Uart_Tx_Byte+0x2b4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d108      	bne.n	80009da <Uart_Tx_Byte+0x72>
			tim2_trigger = 'n';
 80009c8:	4b96      	ldr	r3, [pc, #600]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 80009ca:	226e      	movs	r2, #110	; 0x6e
 80009cc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	4895      	ldr	r0, [pc, #596]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 80009d4:	f001 f803 	bl	80019de <HAL_GPIO_WritePin>
 80009d8:	e17a      	b.n	8000cd0 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 3)){ // bit 0
 80009da:	4b92      	ldr	r3, [pc, #584]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b79      	cmp	r3, #121	; 0x79
 80009e0:	d11f      	bne.n	8000a22 <Uart_Tx_Byte+0xba>
 80009e2:	4b8e      	ldr	r3, [pc, #568]	; (8000c1c <Uart_Tx_Byte+0x2b4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d11b      	bne.n	8000a22 <Uart_Tx_Byte+0xba>
			tim2_trigger = 'n';
 80009ea:	4b8e      	ldr	r3, [pc, #568]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 80009ec:	226e      	movs	r2, #110	; 0x6e
 80009ee:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	4013      	ands	r3, r2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	7bba      	ldrb	r2, [r7, #14]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d108      	bne.n	8000a10 <Uart_Tx_Byte+0xa8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2101      	movs	r1, #1
 8000a02:	4889      	ldr	r0, [pc, #548]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000a04:	f000 ffeb 	bl	80019de <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	e004      	b.n	8000a1a <Uart_Tx_Byte+0xb2>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	4884      	ldr	r0, [pc, #528]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000a16:	f000 ffe2 	bl	80019de <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	73bb      	strb	r3, [r7, #14]
 8000a20:	e156      	b.n	8000cd0 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 4)){ // bit 1
 8000a22:	4b80      	ldr	r3, [pc, #512]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b79      	cmp	r3, #121	; 0x79
 8000a28:	d11f      	bne.n	8000a6a <Uart_Tx_Byte+0x102>
 8000a2a:	4b7c      	ldr	r3, [pc, #496]	; (8000c1c <Uart_Tx_Byte+0x2b4>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d11b      	bne.n	8000a6a <Uart_Tx_Byte+0x102>
			tim2_trigger = 'n';
 8000a32:	4b7c      	ldr	r3, [pc, #496]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000a34:	226e      	movs	r2, #110	; 0x6e
 8000a36:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000a38:	79fa      	ldrb	r2, [r7, #7]
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	7bba      	ldrb	r2, [r7, #14]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d108      	bne.n	8000a58 <Uart_Tx_Byte+0xf0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2101      	movs	r1, #1
 8000a4a:	4877      	ldr	r0, [pc, #476]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000a4c:	f000 ffc7 	bl	80019de <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	3301      	adds	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	e004      	b.n	8000a62 <Uart_Tx_Byte+0xfa>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4872      	ldr	r0, [pc, #456]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000a5e:	f000 ffbe 	bl	80019de <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000a62:	7bbb      	ldrb	r3, [r7, #14]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	73bb      	strb	r3, [r7, #14]
 8000a68:	e132      	b.n	8000cd0 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 5)){ // bit 2
 8000a6a:	4b6e      	ldr	r3, [pc, #440]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b79      	cmp	r3, #121	; 0x79
 8000a70:	d11f      	bne.n	8000ab2 <Uart_Tx_Byte+0x14a>
 8000a72:	4b6a      	ldr	r3, [pc, #424]	; (8000c1c <Uart_Tx_Byte+0x2b4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b05      	cmp	r3, #5
 8000a78:	d11b      	bne.n	8000ab2 <Uart_Tx_Byte+0x14a>
			tim2_trigger = 'n';
 8000a7a:	4b6a      	ldr	r3, [pc, #424]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000a7c:	226e      	movs	r2, #110	; 0x6e
 8000a7e:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000a80:	79fa      	ldrb	r2, [r7, #7]
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	4013      	ands	r3, r2
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	7bba      	ldrb	r2, [r7, #14]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d108      	bne.n	8000aa0 <Uart_Tx_Byte+0x138>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2101      	movs	r1, #1
 8000a92:	4865      	ldr	r0, [pc, #404]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000a94:	f000 ffa3 	bl	80019de <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	e004      	b.n	8000aaa <Uart_Tx_Byte+0x142>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4860      	ldr	r0, [pc, #384]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000aa6:	f000 ff9a 	bl	80019de <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	73bb      	strb	r3, [r7, #14]
 8000ab0:	e10e      	b.n	8000cd0 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 6)){ // bit 3
 8000ab2:	4b5c      	ldr	r3, [pc, #368]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b79      	cmp	r3, #121	; 0x79
 8000ab8:	d11f      	bne.n	8000afa <Uart_Tx_Byte+0x192>
 8000aba:	4b58      	ldr	r3, [pc, #352]	; (8000c1c <Uart_Tx_Byte+0x2b4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d11b      	bne.n	8000afa <Uart_Tx_Byte+0x192>
			tim2_trigger = 'n';
 8000ac2:	4b58      	ldr	r3, [pc, #352]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000ac4:	226e      	movs	r2, #110	; 0x6e
 8000ac6:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000ac8:	79fa      	ldrb	r2, [r7, #7]
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	4013      	ands	r3, r2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	7bba      	ldrb	r2, [r7, #14]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d108      	bne.n	8000ae8 <Uart_Tx_Byte+0x180>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4853      	ldr	r0, [pc, #332]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000adc:	f000 ff7f 	bl	80019de <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	e004      	b.n	8000af2 <Uart_Tx_Byte+0x18a>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2101      	movs	r1, #1
 8000aec:	484e      	ldr	r0, [pc, #312]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000aee:	f000 ff76 	bl	80019de <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	73bb      	strb	r3, [r7, #14]
 8000af8:	e0ea      	b.n	8000cd0 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 7)){ // bit 4
 8000afa:	4b4a      	ldr	r3, [pc, #296]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b79      	cmp	r3, #121	; 0x79
 8000b00:	d11f      	bne.n	8000b42 <Uart_Tx_Byte+0x1da>
 8000b02:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <Uart_Tx_Byte+0x2b4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b07      	cmp	r3, #7
 8000b08:	d11b      	bne.n	8000b42 <Uart_Tx_Byte+0x1da>
			tim2_trigger = 'n';
 8000b0a:	4b46      	ldr	r3, [pc, #280]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000b0c:	226e      	movs	r2, #110	; 0x6e
 8000b0e:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000b10:	79fa      	ldrb	r2, [r7, #7]
 8000b12:	7bbb      	ldrb	r3, [r7, #14]
 8000b14:	4013      	ands	r3, r2
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	7bba      	ldrb	r2, [r7, #14]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d108      	bne.n	8000b30 <Uart_Tx_Byte+0x1c8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2101      	movs	r1, #1
 8000b22:	4841      	ldr	r0, [pc, #260]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000b24:	f000 ff5b 	bl	80019de <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	e004      	b.n	8000b3a <Uart_Tx_Byte+0x1d2>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2101      	movs	r1, #1
 8000b34:	483c      	ldr	r0, [pc, #240]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000b36:	f000 ff52 	bl	80019de <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000b3a:	7bbb      	ldrb	r3, [r7, #14]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	73bb      	strb	r3, [r7, #14]
 8000b40:	e0c6      	b.n	8000cd0 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 8)){ // bit 5
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b79      	cmp	r3, #121	; 0x79
 8000b48:	d11f      	bne.n	8000b8a <Uart_Tx_Byte+0x222>
 8000b4a:	4b34      	ldr	r3, [pc, #208]	; (8000c1c <Uart_Tx_Byte+0x2b4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	d11b      	bne.n	8000b8a <Uart_Tx_Byte+0x222>
			tim2_trigger = 'n';
 8000b52:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000b54:	226e      	movs	r2, #110	; 0x6e
 8000b56:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000b58:	79fa      	ldrb	r2, [r7, #7]
 8000b5a:	7bbb      	ldrb	r3, [r7, #14]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	7bba      	ldrb	r2, [r7, #14]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d108      	bne.n	8000b78 <Uart_Tx_Byte+0x210>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2101      	movs	r1, #1
 8000b6a:	482f      	ldr	r0, [pc, #188]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000b6c:	f000 ff37 	bl	80019de <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	3301      	adds	r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	e004      	b.n	8000b82 <Uart_Tx_Byte+0x21a>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	482a      	ldr	r0, [pc, #168]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000b7e:	f000 ff2e 	bl	80019de <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	73bb      	strb	r3, [r7, #14]
 8000b88:	e0a2      	b.n	8000cd0 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 9)){ // bit 6
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b79      	cmp	r3, #121	; 0x79
 8000b90:	d11f      	bne.n	8000bd2 <Uart_Tx_Byte+0x26a>
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <Uart_Tx_Byte+0x2b4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b09      	cmp	r3, #9
 8000b98:	d11b      	bne.n	8000bd2 <Uart_Tx_Byte+0x26a>
			tim2_trigger = 'n';
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000b9c:	226e      	movs	r2, #110	; 0x6e
 8000b9e:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000ba0:	79fa      	ldrb	r2, [r7, #7]
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	7bba      	ldrb	r2, [r7, #14]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d108      	bne.n	8000bc0 <Uart_Tx_Byte+0x258>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	481d      	ldr	r0, [pc, #116]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000bb4:	f000 ff13 	bl	80019de <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	e004      	b.n	8000bca <Uart_Tx_Byte+0x262>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4818      	ldr	r0, [pc, #96]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000bc6:	f000 ff0a 	bl	80019de <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000bca:	7bbb      	ldrb	r3, [r7, #14]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	73bb      	strb	r3, [r7, #14]
 8000bd0:	e07e      	b.n	8000cd0 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 10)){ // bit 7
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b79      	cmp	r3, #121	; 0x79
 8000bd8:	d128      	bne.n	8000c2c <Uart_Tx_Byte+0x2c4>
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <Uart_Tx_Byte+0x2b4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b0a      	cmp	r3, #10
 8000be0:	d124      	bne.n	8000c2c <Uart_Tx_Byte+0x2c4>
			tim2_trigger = 'n';
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <Uart_Tx_Byte+0x2bc>)
 8000be4:	226e      	movs	r2, #110	; 0x6e
 8000be6:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000be8:	79fa      	ldrb	r2, [r7, #7]
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	4013      	ands	r3, r2
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	7bba      	ldrb	r2, [r7, #14]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d108      	bne.n	8000c08 <Uart_Tx_Byte+0x2a0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000bfc:	f000 feef 	bl	80019de <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	3301      	adds	r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	e004      	b.n	8000c12 <Uart_Tx_Byte+0x2aa>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <Uart_Tx_Byte+0x2c0>)
 8000c0e:	f000 fee6 	bl	80019de <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000c12:	7bbb      	ldrb	r3, [r7, #14]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	73bb      	strb	r3, [r7, #14]
 8000c18:	e05a      	b.n	8000cd0 <Uart_Tx_Byte+0x368>
 8000c1a:	bf00      	nop
 8000c1c:	2000017c 	.word	0x2000017c
 8000c20:	2000022c 	.word	0x2000022c
 8000c24:	2000013c 	.word	0x2000013c
 8000c28:	40010800 	.word	0x40010800
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 11)){ // [parity : none/even/odd] or [stop]
 8000c2c:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <Uart_Tx_Byte+0x390>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b79      	cmp	r3, #121	; 0x79
 8000c32:	d13c      	bne.n	8000cae <Uart_Tx_Byte+0x346>
 8000c34:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <Uart_Tx_Byte+0x394>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b0b      	cmp	r3, #11
 8000c3a:	d138      	bne.n	8000cae <Uart_Tx_Byte+0x346>
			tim2_trigger = 'n';
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <Uart_Tx_Byte+0x390>)
 8000c3e:	226e      	movs	r2, #110	; 0x6e
 8000c40:	701a      	strb	r2, [r3, #0]

			if(Parity == 'n'){
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	2b6e      	cmp	r3, #110	; 0x6e
 8000c46:	d107      	bne.n	8000c58 <Uart_Tx_Byte+0x2f0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	482c      	ldr	r0, [pc, #176]	; (8000d00 <Uart_Tx_Byte+0x398>)
 8000c4e:	f000 fec6 	bl	80019de <HAL_GPIO_WritePin>
				chExit = 'y';
 8000c52:	2379      	movs	r3, #121	; 0x79
 8000c54:	73fb      	strb	r3, [r7, #15]
			if(Parity == 'n'){
 8000c56:	e03a      	b.n	8000cce <Uart_Tx_Byte+0x366>
			}else if(Parity == 'e'){
 8000c58:	79bb      	ldrb	r3, [r7, #6]
 8000c5a:	2b65      	cmp	r3, #101	; 0x65
 8000c5c:	d110      	bne.n	8000c80 <Uart_Tx_Byte+0x318>
				if((ParityBit_cnt % 2) == 0){
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d105      	bne.n	8000c74 <Uart_Tx_Byte+0x30c>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4824      	ldr	r0, [pc, #144]	; (8000d00 <Uart_Tx_Byte+0x398>)
 8000c6e:	f000 feb6 	bl	80019de <HAL_GPIO_WritePin>
			if(Parity == 'n'){
 8000c72:	e02c      	b.n	8000cce <Uart_Tx_Byte+0x366>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2101      	movs	r1, #1
 8000c78:	4821      	ldr	r0, [pc, #132]	; (8000d00 <Uart_Tx_Byte+0x398>)
 8000c7a:	f000 feb0 	bl	80019de <HAL_GPIO_WritePin>
			if(Parity == 'n'){
 8000c7e:	e026      	b.n	8000cce <Uart_Tx_Byte+0x366>
				}

			}else if(Parity == 'o'){
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	2b6f      	cmp	r3, #111	; 0x6f
 8000c84:	d123      	bne.n	8000cce <Uart_Tx_Byte+0x366>
				if((ParityBit_cnt % 2) == 1){
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	bfb8      	it	lt
 8000c90:	425b      	neglt	r3, r3
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d105      	bne.n	8000ca2 <Uart_Tx_Byte+0x33a>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4819      	ldr	r0, [pc, #100]	; (8000d00 <Uart_Tx_Byte+0x398>)
 8000c9c:	f000 fe9f 	bl	80019de <HAL_GPIO_WritePin>
			if(Parity == 'n'){
 8000ca0:	e015      	b.n	8000cce <Uart_Tx_Byte+0x366>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4816      	ldr	r0, [pc, #88]	; (8000d00 <Uart_Tx_Byte+0x398>)
 8000ca8:	f000 fe99 	bl	80019de <HAL_GPIO_WritePin>
			if(Parity == 'n'){
 8000cac:	e00f      	b.n	8000cce <Uart_Tx_Byte+0x366>
				}
			}

		}else if(('y' == tim2_trigger) && (tim2_cnt == 12)){ // stop
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <Uart_Tx_Byte+0x390>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b79      	cmp	r3, #121	; 0x79
 8000cb4:	d10c      	bne.n	8000cd0 <Uart_Tx_Byte+0x368>
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <Uart_Tx_Byte+0x394>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b0c      	cmp	r3, #12
 8000cbc:	d108      	bne.n	8000cd0 <Uart_Tx_Byte+0x368>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	480f      	ldr	r0, [pc, #60]	; (8000d00 <Uart_Tx_Byte+0x398>)
 8000cc4:	f000 fe8b 	bl	80019de <HAL_GPIO_WritePin>
			chExit = 'y';
 8000cc8:	2379      	movs	r3, #121	; 0x79
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e000      	b.n	8000cd0 <Uart_Tx_Byte+0x368>
			if(Parity == 'n'){
 8000cce:	bf00      	nop

		}
		if(('y' == tim2_trigger) && ('y' == chExit)){
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <Uart_Tx_Byte+0x390>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b79      	cmp	r3, #121	; 0x79
 8000cd6:	f47f ae5e 	bne.w	8000996 <Uart_Tx_Byte+0x2e>
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b79      	cmp	r3, #121	; 0x79
 8000cde:	f47f ae5a 	bne.w	8000996 <Uart_Tx_Byte+0x2e>
			tim2_trigger = 'n';
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <Uart_Tx_Byte+0x390>)
 8000ce4:	226e      	movs	r2, #110	; 0x6e
 8000ce6:	701a      	strb	r2, [r3, #0]
			tim2_flag = 'n';
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <Uart_Tx_Byte+0x39c>)
 8000cea:	226e      	movs	r2, #110	; 0x6e
 8000cec:	701a      	strb	r2, [r3, #0]
			break;
 8000cee:	bf00      	nop
		}
	}
}//end of tx byte
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2000013c 	.word	0x2000013c
 8000cfc:	2000017c 	.word	0x2000017c
 8000d00:	40010800 	.word	0x40010800
 8000d04:	2000022c 	.word	0x2000022c

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 fb64 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f816 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 f918 	bl	8000f48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d18:	f000 f8ec 	bl	8000ef4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d1c:	f000 f852 	bl	8000dc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d20:	f000 f89c 	bl	8000e5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  printf("Program executed\r\n");
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <main+0x34>)
 8000d26:	f002 f90b 	bl	8002f40 <puts>

  initFunction(); //total initial code
 8000d2a:	f7ff fc97 	bl	800065c <initFunction>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  scanParity();
 8000d2e:	f7ff fd39 	bl	80007a4 <scanParity>
	  sendGradualChar();
 8000d32:	f7ff fd7d 	bl	8000830 <sendGradualChar>

	  doUS100();
 8000d36:	f7ff fdaf 	bl	8000898 <doUS100>
	  scanParity();
 8000d3a:	e7f8      	b.n	8000d2e <main+0x26>
 8000d3c:	08003e10 	.word	0x08003e10

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b090      	sub	sp, #64	; 0x40
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0318 	add.w	r3, r7, #24
 8000d4a:	2228      	movs	r2, #40	; 0x28
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 f87a 	bl	8002e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d72:	2300      	movs	r3, #0
 8000d74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d76:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fe75 	bl	8001a70 <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d8c:	f000 f95e 	bl	800104c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d90:	230f      	movs	r3, #15
 8000d92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d94:	2302      	movs	r3, #2
 8000d96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2102      	movs	r1, #2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 f8e0 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000db6:	f000 f949 	bl	800104c <Error_Handler>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3740      	adds	r7, #64	; 0x40
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_TIM2_Init+0x94>)
 8000de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_TIM2_Init+0x94>)
 8000dea:	223f      	movs	r2, #63	; 0x3f
 8000dec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_TIM2_Init+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_TIM2_Init+0x94>)
 8000df6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_TIM2_Init+0x94>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_TIM2_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e08:	4813      	ldr	r0, [pc, #76]	; (8000e58 <MX_TIM2_Init+0x94>)
 8000e0a:	f001 fa4d 	bl	80022a8 <HAL_TIM_Base_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e14:	f000 f91a 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_TIM2_Init+0x94>)
 8000e26:	f001 fbe9 	bl	80025fc <HAL_TIM_ConfigClockSource>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e30:	f000 f90c 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_TIM2_Init+0x94>)
 8000e42:	f001 fdaf 	bl	80029a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e4c:	f000 f8fe 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001e4 	.word	0x200001e4

08000e5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <MX_TIM3_Init+0x90>)
 8000e7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <MX_TIM3_Init+0x94>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_TIM3_Init+0x90>)
 8000e80:	223f      	movs	r2, #63	; 0x3f
 8000e82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <MX_TIM3_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 26-1;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_TIM3_Init+0x90>)
 8000e8c:	2219      	movs	r2, #25
 8000e8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_TIM3_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_TIM3_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <MX_TIM3_Init+0x90>)
 8000e9e:	f001 fa03 	bl	80022a8 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000ea8:	f000 f8d0 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <MX_TIM3_Init+0x90>)
 8000eba:	f001 fb9f 	bl	80025fc <HAL_TIM_ConfigClockSource>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000ec4:	f000 f8c2 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_TIM3_Init+0x90>)
 8000ed6:	f001 fd65 	bl	80029a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000ee0:	f000 f8b4 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000018c 	.word	0x2000018c
 8000ef0:	40000400 	.word	0x40000400

08000ef4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_USART2_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f2c:	f001 fdaa 	bl	8002a84 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f889 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000230 	.word	0x20000230
 8000f44:	40004400 	.word	0x40004400

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a36      	ldr	r2, [pc, #216]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f62:	f043 0310 	orr.w	r3, r3, #16
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b34      	ldr	r3, [pc, #208]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0310 	and.w	r3, r3, #16
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f74:	4b31      	ldr	r3, [pc, #196]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a30      	ldr	r2, [pc, #192]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f7a:	f043 0320 	orr.w	r3, r3, #32
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b2e      	ldr	r3, [pc, #184]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0320 	and.w	r3, r3, #32
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a2a      	ldr	r2, [pc, #168]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <MX_GPIO_Init+0xf4>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a24      	ldr	r2, [pc, #144]	; (800103c <MX_GPIO_Init+0xf4>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <MX_GPIO_Init+0xf4>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	21e1      	movs	r1, #225	; 0xe1
 8000fc0:	481f      	ldr	r0, [pc, #124]	; (8001040 <MX_GPIO_Init+0xf8>)
 8000fc2:	f000 fd0c 	bl	80019de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC7 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_7;
 8000fc6:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8000fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <MX_GPIO_Init+0xfc>)
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_GPIO_Init+0x100>)
 8000fdc:	f000 fb8e 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4815      	ldr	r0, [pc, #84]	; (8001048 <MX_GPIO_Init+0x100>)
 8000ff4:	f000 fb82 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000ff8:	23e1      	movs	r3, #225	; 0xe1
 8000ffa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2302      	movs	r3, #2
 8001006:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4619      	mov	r1, r3
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_GPIO_Init+0xf8>)
 8001010:	f000 fb74 	bl	80016fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	2017      	movs	r0, #23
 800101a:	f000 fb38 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800101e:	2017      	movs	r0, #23
 8001020:	f000 fb51 	bl	80016c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2028      	movs	r0, #40	; 0x28
 800102a:	f000 fb30 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800102e:	2028      	movs	r0, #40	; 0x28
 8001030:	f000 fb49 	bl	80016c6 <HAL_NVIC_EnableIRQ>

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	40010800 	.word	0x40010800
 8001044:	10110000 	.word	0x10110000
 8001048:	40011000 	.word	0x40011000

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_MspInit+0x5c>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <HAL_MspInit+0x5c>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_MspInit+0x5c>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_MspInit+0x5c>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_MspInit+0x5c>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_MspInit+0x5c>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_MspInit+0x60>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_MspInit+0x60>)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010000 	.word	0x40010000

080010bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010cc:	d114      	bne.n	80010f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_TIM_Base_MspInit+0x78>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a18      	ldr	r2, [pc, #96]	; (8001134 <HAL_TIM_Base_MspInit+0x78>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_TIM_Base_MspInit+0x78>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	201c      	movs	r0, #28
 80010ec:	f000 facf 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f0:	201c      	movs	r0, #28
 80010f2:	f000 fae8 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010f6:	e018      	b.n	800112a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_TIM_Base_MspInit+0x7c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d113      	bne.n	800112a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_TIM_Base_MspInit+0x78>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <HAL_TIM_Base_MspInit+0x78>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_TIM_Base_MspInit+0x78>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	201d      	movs	r0, #29
 8001120:	f000 fab5 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001124:	201d      	movs	r0, #29
 8001126:	f000 face 	bl	80016c6 <HAL_NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	40000400 	.word	0x40000400

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <HAL_UART_MspInit+0x70>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d123      	bne.n	80011a4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_UART_MspInit+0x74>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <HAL_UART_MspInit+0x74>)
 8001162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001166:	61d3      	str	r3, [r2, #28]
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_UART_MspInit+0x74>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_UART_MspInit+0x74>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <HAL_UART_MspInit+0x74>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_UART_MspInit+0x74>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800118c:	230c      	movs	r3, #12
 800118e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_UART_MspInit+0x78>)
 80011a0:	f000 faac 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40004400 	.word	0x40004400
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010800 	.word	0x40010800

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <HardFault_Handler+0x4>

080011ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <MemManage_Handler+0x4>

080011d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <BusFault_Handler+0x4>

080011d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <UsageFault_Handler+0x4>

080011dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 f92e 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001210:	2080      	movs	r0, #128	; 0x80
 8001212:	f000 fc15 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <TIM2_IRQHandler+0x10>)
 8001222:	f001 f8e3 	bl	80023ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001e4 	.word	0x200001e4

08001230 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <TIM3_IRQHandler+0x10>)
 8001236:	f001 f8d9 	bl	80023ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000018c 	.word	0x2000018c

08001244 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001248:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800124c:	f000 fbf8 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e00a      	b.n	800127c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001266:	f3af 8000 	nop.w
 800126a:	4601      	mov	r1, r0
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	b2ca      	uxtb	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf0      	blt.n	8001266 <_read+0x12>
	}

return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e009      	b.n	80012b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7fe ff4f 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf1      	blt.n	80012a0 <_write+0x12>
	}
	return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_close>:

int _close(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ec:	605a      	str	r2, [r3, #4]
	return 0;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <_isatty>:

int _isatty(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	return 1;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
	return 0;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
	...

08001328 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <_sbrk+0x50>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x16>
		heap_end = &end;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <_sbrk+0x50>)
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <_sbrk+0x54>)
 800133c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <_sbrk+0x50>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <_sbrk+0x50>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	466a      	mov	r2, sp
 800134e:	4293      	cmp	r3, r2
 8001350:	d907      	bls.n	8001362 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001352:	f001 fd4f 	bl	8002df4 <__errno>
 8001356:	4602      	mov	r2, r0
 8001358:	230c      	movs	r3, #12
 800135a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	e006      	b.n	8001370 <_sbrk+0x48>
	}

	heap_end += incr;
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <_sbrk+0x50>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a03      	ldr	r2, [pc, #12]	; (8001378 <_sbrk+0x50>)
 800136c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000090 	.word	0x20000090
 800137c:	20000288 	.word	0x20000288

08001380 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138e:	490d      	ldr	r1, [pc, #52]	; (80013c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a4:	4c0a      	ldr	r4, [pc, #40]	; (80013d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013b2:	f7ff ffe5 	bl	8001380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b6:	f001 fd23 	bl	8002e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ba:	f7ff fca5 	bl	8000d08 <main>
  bx lr
 80013be:	4770      	bx	lr
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013c8:	08003ef0 	.word	0x08003ef0
  ldr r2, =_sbss
 80013cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013d0:	20000284 	.word	0x20000284

080013d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_2_IRQHandler>
	...

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_Init+0x28>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_Init+0x28>)
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f945 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f808 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f7ff fe30 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40022000 	.word	0x40022000

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f95d 	bl	80016e2 <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 f925 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000000 	.word	0x20000000
 800145c:	20000008 	.word	0x20000008
 8001460:	20000004 	.word	0x20000004

08001464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x1c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_IncTick+0x20>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_IncTick+0x20>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000008 	.word	0x20000008
 8001484:	2000027c 	.word	0x2000027c

08001488 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <HAL_GetTick+0x10>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	2000027c 	.word	0x2000027c

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff fff0 	bl	8001488 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_Delay+0x40>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffe0 	bl	8001488 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000008 	.word	0x20000008

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4906      	ldr	r1, [pc, #24]	; (8001578 <__NVIC_EnableIRQ+0x34>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff90 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff2d 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff42 	bl	8001528 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff90 	bl	80015d0 <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5f 	bl	800157c <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff35 	bl	8001544 <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b08b      	sub	sp, #44	; 0x2c
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	e127      	b.n	8001960 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001710:	2201      	movs	r2, #1
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	429a      	cmp	r2, r3
 800172a:	f040 8116 	bne.w	800195a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b12      	cmp	r3, #18
 8001734:	d034      	beq.n	80017a0 <HAL_GPIO_Init+0xa4>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d80d      	bhi.n	8001756 <HAL_GPIO_Init+0x5a>
 800173a:	2b02      	cmp	r3, #2
 800173c:	d02b      	beq.n	8001796 <HAL_GPIO_Init+0x9a>
 800173e:	2b02      	cmp	r3, #2
 8001740:	d804      	bhi.n	800174c <HAL_GPIO_Init+0x50>
 8001742:	2b00      	cmp	r3, #0
 8001744:	d031      	beq.n	80017aa <HAL_GPIO_Init+0xae>
 8001746:	2b01      	cmp	r3, #1
 8001748:	d01c      	beq.n	8001784 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174a:	e048      	b.n	80017de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800174c:	2b03      	cmp	r3, #3
 800174e:	d043      	beq.n	80017d8 <HAL_GPIO_Init+0xdc>
 8001750:	2b11      	cmp	r3, #17
 8001752:	d01b      	beq.n	800178c <HAL_GPIO_Init+0x90>
          break;
 8001754:	e043      	b.n	80017de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001756:	4a89      	ldr	r2, [pc, #548]	; (800197c <HAL_GPIO_Init+0x280>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d026      	beq.n	80017aa <HAL_GPIO_Init+0xae>
 800175c:	4a87      	ldr	r2, [pc, #540]	; (800197c <HAL_GPIO_Init+0x280>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d806      	bhi.n	8001770 <HAL_GPIO_Init+0x74>
 8001762:	4a87      	ldr	r2, [pc, #540]	; (8001980 <HAL_GPIO_Init+0x284>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d020      	beq.n	80017aa <HAL_GPIO_Init+0xae>
 8001768:	4a86      	ldr	r2, [pc, #536]	; (8001984 <HAL_GPIO_Init+0x288>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01d      	beq.n	80017aa <HAL_GPIO_Init+0xae>
          break;
 800176e:	e036      	b.n	80017de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001770:	4a85      	ldr	r2, [pc, #532]	; (8001988 <HAL_GPIO_Init+0x28c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0xae>
 8001776:	4a85      	ldr	r2, [pc, #532]	; (800198c <HAL_GPIO_Init+0x290>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d016      	beq.n	80017aa <HAL_GPIO_Init+0xae>
 800177c:	4a84      	ldr	r2, [pc, #528]	; (8001990 <HAL_GPIO_Init+0x294>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0xae>
          break;
 8001782:	e02c      	b.n	80017de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e028      	b.n	80017de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	3304      	adds	r3, #4
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e023      	b.n	80017de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	3308      	adds	r3, #8
 800179c:	623b      	str	r3, [r7, #32]
          break;
 800179e:	e01e      	b.n	80017de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	330c      	adds	r3, #12
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e019      	b.n	80017de <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017b2:	2304      	movs	r3, #4
 80017b4:	623b      	str	r3, [r7, #32]
          break;
 80017b6:	e012      	b.n	80017de <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c0:	2308      	movs	r3, #8
 80017c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	611a      	str	r2, [r3, #16]
          break;
 80017ca:	e008      	b.n	80017de <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017cc:	2308      	movs	r3, #8
 80017ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	615a      	str	r2, [r3, #20]
          break;
 80017d6:	e002      	b.n	80017de <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
          break;
 80017dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2bff      	cmp	r3, #255	; 0xff
 80017e2:	d801      	bhi.n	80017e8 <HAL_GPIO_Init+0xec>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	e001      	b.n	80017ec <HAL_GPIO_Init+0xf0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3304      	adds	r3, #4
 80017ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2bff      	cmp	r3, #255	; 0xff
 80017f2:	d802      	bhi.n	80017fa <HAL_GPIO_Init+0xfe>
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x104>
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	3b08      	subs	r3, #8
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	210f      	movs	r1, #15
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	401a      	ands	r2, r3
 8001812:	6a39      	ldr	r1, [r7, #32]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	431a      	orrs	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8096 	beq.w	800195a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800182e:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_GPIO_Init+0x298>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_GPIO_Init+0x298>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6193      	str	r3, [r2, #24]
 800183a:	4b56      	ldr	r3, [pc, #344]	; (8001994 <HAL_GPIO_Init+0x298>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001846:	4a54      	ldr	r2, [pc, #336]	; (8001998 <HAL_GPIO_Init+0x29c>)
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4013      	ands	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4b      	ldr	r2, [pc, #300]	; (800199c <HAL_GPIO_Init+0x2a0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0x19e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4a      	ldr	r2, [pc, #296]	; (80019a0 <HAL_GPIO_Init+0x2a4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00d      	beq.n	8001896 <HAL_GPIO_Init+0x19a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a49      	ldr	r2, [pc, #292]	; (80019a4 <HAL_GPIO_Init+0x2a8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d007      	beq.n	8001892 <HAL_GPIO_Init+0x196>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2ac>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_Init+0x192>
 800188a:	2303      	movs	r3, #3
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x1a0>
 800188e:	2304      	movs	r3, #4
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x1a0>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x1a0>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x1a0>
 800189a:	2300      	movs	r3, #0
 800189c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ac:	493a      	ldr	r1, [pc, #232]	; (8001998 <HAL_GPIO_Init+0x29c>)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018c6:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4938      	ldr	r1, [pc, #224]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
 80018d2:	e006      	b.n	80018e2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018d4:	4b35      	ldr	r3, [pc, #212]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	43db      	mvns	r3, r3
 80018dc:	4933      	ldr	r1, [pc, #204]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018de:	4013      	ands	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	492e      	ldr	r1, [pc, #184]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
 80018fa:	e006      	b.n	800190a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	43db      	mvns	r3, r3
 8001904:	4929      	ldr	r1, [pc, #164]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001906:	4013      	ands	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	4924      	ldr	r1, [pc, #144]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
 8001922:	e006      	b.n	8001932 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	43db      	mvns	r3, r3
 800192c:	491f      	ldr	r1, [pc, #124]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 800192e:	4013      	ands	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	491a      	ldr	r1, [pc, #104]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	60cb      	str	r3, [r1, #12]
 800194a:	e006      	b.n	800195a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	43db      	mvns	r3, r3
 8001954:	4915      	ldr	r1, [pc, #84]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001956:	4013      	ands	r3, r2
 8001958:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	3301      	adds	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	fa22 f303 	lsr.w	r3, r2, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	f47f aed0 	bne.w	8001710 <HAL_GPIO_Init+0x14>
  }
}
 8001970:	bf00      	nop
 8001972:	372c      	adds	r7, #44	; 0x2c
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	10210000 	.word	0x10210000
 8001980:	10110000 	.word	0x10110000
 8001984:	10120000 	.word	0x10120000
 8001988:	10310000 	.word	0x10310000
 800198c:	10320000 	.word	0x10320000
 8001990:	10220000 	.word	0x10220000
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000
 800199c:	40010800 	.word	0x40010800
 80019a0:	40010c00 	.word	0x40010c00
 80019a4:	40011000 	.word	0x40011000
 80019a8:	40011400 	.word	0x40011400
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e001      	b.n	80019d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	807b      	strh	r3, [r7, #2]
 80019ea:	4613      	mov	r3, r2
 80019ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ee:	787b      	ldrb	r3, [r7, #1]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f4:	887a      	ldrh	r2, [r7, #2]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019fa:	e003      	b.n	8001a04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	041a      	lsls	r2, r3, #16
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	611a      	str	r2, [r3, #16]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a20:	887a      	ldrh	r2, [r7, #2]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	041a      	lsls	r2, r3, #16
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	400b      	ands	r3, r1
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	611a      	str	r2, [r3, #16]
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fb86 	bl	8000170 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e26c      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8087 	beq.w	8001b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a90:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d00c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a9c:	4b8f      	ldr	r3, [pc, #572]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d112      	bne.n	8001ace <HAL_RCC_OscConfig+0x5e>
 8001aa8:	4b8c      	ldr	r3, [pc, #560]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d10b      	bne.n	8001ace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab6:	4b89      	ldr	r3, [pc, #548]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d06c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x12c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d168      	bne.n	8001b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e246      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x76>
 8001ad8:	4b80      	ldr	r3, [pc, #512]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a7f      	ldr	r2, [pc, #508]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	e02e      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x98>
 8001aee:	4b7b      	ldr	r3, [pc, #492]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7a      	ldr	r2, [pc, #488]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b78      	ldr	r3, [pc, #480]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a77      	ldr	r2, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e01d      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0xbc>
 8001b12:	4b72      	ldr	r3, [pc, #456]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a71      	ldr	r2, [pc, #452]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a6e      	ldr	r2, [pc, #440]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e00b      	b.n	8001b44 <HAL_RCC_OscConfig+0xd4>
 8001b2c:	4b6b      	ldr	r3, [pc, #428]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6a      	ldr	r2, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b68      	ldr	r3, [pc, #416]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a67      	ldr	r2, [pc, #412]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d013      	beq.n	8001b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fc9c 	bl	8001488 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fc98 	bl	8001488 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1fa      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0xe4>
 8001b72:	e014      	b.n	8001b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fc88 	bl	8001488 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fc84 	bl	8001488 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e1e6      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x10c>
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d063      	beq.n	8001c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001baa:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bb6:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d11c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x18c>
 8001bc2:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d116      	bne.n	8001bfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_RCC_OscConfig+0x176>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e1ba      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be6:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4939      	ldr	r1, [pc, #228]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	e03a      	b.n	8001c72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c04:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <HAL_RCC_OscConfig+0x270>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fc3d 	bl	8001488 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c12:	f7ff fc39 	bl	8001488 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e19b      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4927      	ldr	r1, [pc, #156]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
 8001c44:	e015      	b.n	8001c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <HAL_RCC_OscConfig+0x270>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fc1c 	bl	8001488 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff fc18 	bl	8001488 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e17a      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d03a      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d019      	beq.n	8001cba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fbfc 	bl	8001488 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c94:	f7ff fbf8 	bl	8001488 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e15a      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f000 fada 	bl	800226c <RCC_Delay>
 8001cb8:	e01c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fbe2 	bl	8001488 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc6:	e00f      	b.n	8001ce8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fbde 	bl	8001488 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d908      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e140      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	42420000 	.word	0x42420000
 8001ce4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4b9e      	ldr	r3, [pc, #632]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e9      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a6 	beq.w	8001e4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b97      	ldr	r3, [pc, #604]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10d      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b94      	ldr	r3, [pc, #592]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a93      	ldr	r2, [pc, #588]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	61d3      	str	r3, [r2, #28]
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2e:	4b8e      	ldr	r3, [pc, #568]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d118      	bne.n	8001d6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3a:	4b8b      	ldr	r3, [pc, #556]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a8a      	ldr	r2, [pc, #552]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d46:	f7ff fb9f 	bl	8001488 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4e:	f7ff fb9b 	bl	8001488 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b64      	cmp	r3, #100	; 0x64
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0fd      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	4b81      	ldr	r3, [pc, #516]	; (8001f68 <HAL_RCC_OscConfig+0x4f8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x312>
 8001d74:	4b7b      	ldr	r3, [pc, #492]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4a7a      	ldr	r2, [pc, #488]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6213      	str	r3, [r2, #32]
 8001d80:	e02d      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x334>
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a75      	ldr	r2, [pc, #468]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	4b73      	ldr	r3, [pc, #460]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a72      	ldr	r2, [pc, #456]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	f023 0304 	bic.w	r3, r3, #4
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	e01c      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d10c      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x356>
 8001dac:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a6c      	ldr	r2, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	4b6a      	ldr	r3, [pc, #424]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a69      	ldr	r2, [pc, #420]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	e00b      	b.n	8001dde <HAL_RCC_OscConfig+0x36e>
 8001dc6:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a66      	ldr	r2, [pc, #408]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	6213      	str	r3, [r2, #32]
 8001dd2:	4b64      	ldr	r3, [pc, #400]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a63      	ldr	r2, [pc, #396]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f023 0304 	bic.w	r3, r3, #4
 8001ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d015      	beq.n	8001e12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fb4f 	bl	8001488 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff fb4b 	bl	8001488 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0ab      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ee      	beq.n	8001dee <HAL_RCC_OscConfig+0x37e>
 8001e10:	e014      	b.n	8001e3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fb39 	bl	8001488 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff fb35 	bl	8001488 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e095      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e30:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ee      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d105      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a47      	ldr	r2, [pc, #284]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8081 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e58:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d061      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d146      	bne.n	8001efa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6c:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_RCC_OscConfig+0x4fc>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e72:	f7ff fb09 	bl	8001488 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7a:	f7ff fb05 	bl	8001488 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e067      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8c:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ea2:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	492d      	ldr	r1, [pc, #180]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a19      	ldr	r1, [r3, #32]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	4927      	ldr	r1, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x4fc>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff fad9 	bl	8001488 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff fad5 	bl	8001488 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e037      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x46a>
 8001ef8:	e02f      	b.n	8001f5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_RCC_OscConfig+0x4fc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fac2 	bl	8001488 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff fabe 	bl	8001488 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e020      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x498>
 8001f26:	e018      	b.n	8001f5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e013      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	42420060 	.word	0x42420060

08001f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0d0      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b67      	ldr	r3, [pc, #412]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4965      	ldr	r1, [pc, #404]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b8      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	494d      	ldr	r1, [pc, #308]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d040      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e07f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e073      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06b      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4936      	ldr	r1, [pc, #216]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7ff fa12 	bl	8001488 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7ff fa0e 	bl	8001488 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e053      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d210      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4922      	ldr	r1, [pc, #136]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e032      	b.n	8002126 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4916      	ldr	r1, [pc, #88]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fe:	f000 f821 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8002102:	4601      	mov	r1, r0
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	fa21 f303 	lsr.w	r3, r1, r3
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1cc>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1d0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff f970 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40022000 	.word	0x40022000
 8002134:	40021000 	.word	0x40021000
 8002138:	08003e38 	.word	0x08003e38
 800213c:	20000000 	.word	0x20000000
 8002140:	20000004 	.word	0x20000004

08002144 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002144:	b490      	push	{r4, r7}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800214a:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800214c:	1d3c      	adds	r4, r7, #4
 800214e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216e:	4b23      	ldr	r3, [pc, #140]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d002      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x40>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x46>
 8002182:	e02d      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002186:	623b      	str	r3, [r7, #32]
      break;
 8002188:	e02d      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002196:	4413      	add	r3, r2
 8002198:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800219c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0c5b      	lsrs	r3, r3, #17
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021b6:	4413      	add	r3, r2
 80021b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	4a0f      	ldr	r2, [pc, #60]	; (8002200 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021c2:	fb02 f203 	mul.w	r2, r2, r3
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
 80021ce:	e004      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	623b      	str	r3, [r7, #32]
      break;
 80021de:	e002      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021e2:	623b      	str	r3, [r7, #32]
      break;
 80021e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e6:	6a3b      	ldr	r3, [r7, #32]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc90      	pop	{r4, r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	08003e24 	.word	0x08003e24
 80021f8:	08003e34 	.word	0x08003e34
 80021fc:	40021000 	.word	0x40021000
 8002200:	007a1200 	.word	0x007a1200
 8002204:	003d0900 	.word	0x003d0900

08002208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b02      	ldr	r3, [pc, #8]	; (8002218 <HAL_RCC_GetHCLKFreq+0x10>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000000 	.word	0x20000000

0800221c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002220:	f7ff fff2 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002224:	4601      	mov	r1, r0
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4a03      	ldr	r2, [pc, #12]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	08003e48 	.word	0x08003e48

08002244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002248:	f7ff ffde 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 800224c:	4601      	mov	r1, r0
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	0adb      	lsrs	r3, r3, #11
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4a03      	ldr	r2, [pc, #12]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	08003e48 	.word	0x08003e48

0800226c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <RCC_Delay+0x34>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <RCC_Delay+0x38>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0a5b      	lsrs	r3, r3, #9
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002288:	bf00      	nop
  }
  while (Delay --);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	60fa      	str	r2, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f9      	bne.n	8002288 <RCC_Delay+0x1c>
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000000 	.word	0x20000000
 80022a4:	10624dd3 	.word	0x10624dd3

080022a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e041      	b.n	800233e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe fef4 	bl	80010bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f000 fa64 	bl	80027b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d001      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e03a      	b.n	80023d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <HAL_TIM_Base_Start_IT+0x98>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00e      	beq.n	80023a0 <HAL_TIM_Base_Start_IT+0x58>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238a:	d009      	beq.n	80023a0 <HAL_TIM_Base_Start_IT+0x58>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d004      	beq.n	80023a0 <HAL_TIM_Base_Start_IT+0x58>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d111      	bne.n	80023c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d010      	beq.n	80023d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c2:	e007      	b.n	80023d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40000400 	.word	0x40000400
 80023e8:	40000800 	.word	0x40000800

080023ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d122      	bne.n	8002448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d11b      	bne.n	8002448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0202 	mvn.w	r2, #2
 8002418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f9a4 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8002434:	e005      	b.n	8002442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f997 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f9a6 	bl	800278e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d122      	bne.n	800249c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d11b      	bne.n	800249c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0204 	mvn.w	r2, #4
 800246c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f97a 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f96d 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f97c 	bl	800278e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d122      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d11b      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0208 	mvn.w	r2, #8
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2204      	movs	r2, #4
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f950 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f943 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f952 	bl	800278e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b10      	cmp	r3, #16
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0210 	mvn.w	r2, #16
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2208      	movs	r2, #8
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f926 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f919 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f928 	bl	800278e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d10e      	bne.n	8002570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d107      	bne.n	8002570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0201 	mvn.w	r2, #1
 8002568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fd fe34 	bl	80001d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	2b80      	cmp	r3, #128	; 0x80
 800257c:	d10e      	bne.n	800259c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d107      	bne.n	800259c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa6b 	bl	8002a72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d10e      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b4:	2b40      	cmp	r3, #64	; 0x40
 80025b6:	d107      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f8ec 	bl	80027a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d10e      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d107      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0220 	mvn.w	r2, #32
 80025ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fa36 	bl	8002a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_TIM_ConfigClockSource+0x18>
 8002610:	2302      	movs	r3, #2
 8002612:	e0a6      	b.n	8002762 <HAL_TIM_ConfigClockSource+0x166>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800263a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	d067      	beq.n	800271c <HAL_TIM_ConfigClockSource+0x120>
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d80b      	bhi.n	8002668 <HAL_TIM_ConfigClockSource+0x6c>
 8002650:	2b10      	cmp	r3, #16
 8002652:	d073      	beq.n	800273c <HAL_TIM_ConfigClockSource+0x140>
 8002654:	2b10      	cmp	r3, #16
 8002656:	d802      	bhi.n	800265e <HAL_TIM_ConfigClockSource+0x62>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d06f      	beq.n	800273c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800265c:	e078      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800265e:	2b20      	cmp	r3, #32
 8002660:	d06c      	beq.n	800273c <HAL_TIM_ConfigClockSource+0x140>
 8002662:	2b30      	cmp	r3, #48	; 0x30
 8002664:	d06a      	beq.n	800273c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002666:	e073      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002668:	2b70      	cmp	r3, #112	; 0x70
 800266a:	d00d      	beq.n	8002688 <HAL_TIM_ConfigClockSource+0x8c>
 800266c:	2b70      	cmp	r3, #112	; 0x70
 800266e:	d804      	bhi.n	800267a <HAL_TIM_ConfigClockSource+0x7e>
 8002670:	2b50      	cmp	r3, #80	; 0x50
 8002672:	d033      	beq.n	80026dc <HAL_TIM_ConfigClockSource+0xe0>
 8002674:	2b60      	cmp	r3, #96	; 0x60
 8002676:	d041      	beq.n	80026fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002678:	e06a      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800267a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267e:	d066      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x152>
 8002680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002684:	d017      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002686:	e063      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6899      	ldr	r1, [r3, #8]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f000 f965 	bl	8002966 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	609a      	str	r2, [r3, #8]
      break;
 80026b4:	e04c      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6899      	ldr	r1, [r3, #8]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f000 f94e 	bl	8002966 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026d8:	609a      	str	r2, [r3, #8]
      break;
 80026da:	e039      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	461a      	mov	r2, r3
 80026ea:	f000 f8c5 	bl	8002878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2150      	movs	r1, #80	; 0x50
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f91c 	bl	8002932 <TIM_ITRx_SetConfig>
      break;
 80026fa:	e029      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	461a      	mov	r2, r3
 800270a:	f000 f8e3 	bl	80028d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2160      	movs	r1, #96	; 0x60
 8002714:	4618      	mov	r0, r3
 8002716:	f000 f90c 	bl	8002932 <TIM_ITRx_SetConfig>
      break;
 800271a:	e019      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	461a      	mov	r2, r3
 800272a:	f000 f8a5 	bl	8002878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2140      	movs	r1, #64	; 0x40
 8002734:	4618      	mov	r0, r3
 8002736:	f000 f8fc 	bl	8002932 <TIM_ITRx_SetConfig>
      break;
 800273a:	e009      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f000 f8f3 	bl	8002932 <TIM_ITRx_SetConfig>
        break;
 800274c:	e000      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800274e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
	...

080027b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a29      	ldr	r2, [pc, #164]	; (800286c <TIM_Base_SetConfig+0xb8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00b      	beq.n	80027e4 <TIM_Base_SetConfig+0x30>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d2:	d007      	beq.n	80027e4 <TIM_Base_SetConfig+0x30>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a26      	ldr	r2, [pc, #152]	; (8002870 <TIM_Base_SetConfig+0xbc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d003      	beq.n	80027e4 <TIM_Base_SetConfig+0x30>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a25      	ldr	r2, [pc, #148]	; (8002874 <TIM_Base_SetConfig+0xc0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d108      	bne.n	80027f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1c      	ldr	r2, [pc, #112]	; (800286c <TIM_Base_SetConfig+0xb8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00b      	beq.n	8002816 <TIM_Base_SetConfig+0x62>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002804:	d007      	beq.n	8002816 <TIM_Base_SetConfig+0x62>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <TIM_Base_SetConfig+0xbc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d003      	beq.n	8002816 <TIM_Base_SetConfig+0x62>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a18      	ldr	r2, [pc, #96]	; (8002874 <TIM_Base_SetConfig+0xc0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d108      	bne.n	8002828 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a07      	ldr	r2, [pc, #28]	; (800286c <TIM_Base_SetConfig+0xb8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d103      	bne.n	800285c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	615a      	str	r2, [r3, #20]
}
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40000400 	.word	0x40000400
 8002874:	40000800 	.word	0x40000800

08002878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f023 0201 	bic.w	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f023 030a 	bic.w	r3, r3, #10
 80028b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	621a      	str	r2, [r3, #32]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f023 0210 	bic.w	r2, r3, #16
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	031b      	lsls	r3, r3, #12
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002910:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	621a      	str	r2, [r3, #32]
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002932:	b480      	push	{r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	f043 0307 	orr.w	r3, r3, #7
 8002954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	609a      	str	r2, [r3, #8]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002966:	b480      	push	{r7}
 8002968:	b087      	sub	sp, #28
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002980:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	021a      	lsls	r2, r3, #8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	431a      	orrs	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4313      	orrs	r3, r2
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	609a      	str	r2, [r3, #8]
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e046      	b.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00e      	beq.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a08:	d009      	beq.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10c      	bne.n	8002a38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000800 	.word	0x40000800

08002a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e03f      	b.n	8002b16 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe fb46 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2224      	movs	r2, #36	; 0x24
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f905 	bl	8002cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b08a      	sub	sp, #40	; 0x28
 8002b22:	af02      	add	r7, sp, #8
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d17c      	bne.n	8002c38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <HAL_UART_Transmit+0x2c>
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e075      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_UART_Transmit+0x3e>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e06e      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2221      	movs	r2, #33	; 0x21
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b72:	f7fe fc89 	bl	8001488 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	88fa      	ldrh	r2, [r7, #6]
 8002b7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8c:	d108      	bne.n	8002ba0 <HAL_UART_Transmit+0x82>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e003      	b.n	8002ba8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bb0:	e02a      	b.n	8002c08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2180      	movs	r1, #128	; 0x80
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f840 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e036      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10b      	bne.n	8002bea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	3302      	adds	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e007      	b.n	8002bfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1cf      	bne.n	8002bb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2140      	movs	r1, #64	; 0x40
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f810 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e006      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c52:	e02c      	b.n	8002cae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d028      	beq.n	8002cae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c62:	f7fe fc11 	bl	8001488 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d21d      	bcs.n	8002cae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c80:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e00f      	b.n	8002cce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d0c3      	beq.n	8002c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d12:	f023 030c 	bic.w	r3, r3, #12
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <UART_SetConfig+0x114>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d103      	bne.n	8002d48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d40:	f7ff fa80 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	e002      	b.n	8002d4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d48:	f7ff fa68 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002d4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	009a      	lsls	r2, r3, #2
 8002d58:	441a      	add	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	4a22      	ldr	r2, [pc, #136]	; (8002df0 <UART_SetConfig+0x118>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	0119      	lsls	r1, r3, #4
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009a      	lsls	r2, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <UART_SetConfig+0x118>)
 8002d86:	fba3 0302 	umull	r0, r3, r3, r2
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2064      	movs	r0, #100	; 0x64
 8002d8e:	fb00 f303 	mul.w	r3, r0, r3
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	3332      	adds	r3, #50	; 0x32
 8002d98:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <UART_SetConfig+0x118>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da4:	4419      	add	r1, r3
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	009a      	lsls	r2, r3, #2
 8002db0:	441a      	add	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <UART_SetConfig+0x118>)
 8002dbe:	fba3 0302 	umull	r0, r3, r3, r2
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2064      	movs	r0, #100	; 0x64
 8002dc6:	fb00 f303 	mul.w	r3, r0, r3
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	3332      	adds	r3, #50	; 0x32
 8002dd0:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <UART_SetConfig+0x118>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	f003 020f 	and.w	r2, r3, #15
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	440a      	add	r2, r1
 8002de2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40013800 	.word	0x40013800
 8002df0:	51eb851f 	.word	0x51eb851f

08002df4 <__errno>:
 8002df4:	4b01      	ldr	r3, [pc, #4]	; (8002dfc <__errno+0x8>)
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	2000000c 	.word	0x2000000c

08002e00 <__libc_init_array>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	2500      	movs	r5, #0
 8002e04:	4e0c      	ldr	r6, [pc, #48]	; (8002e38 <__libc_init_array+0x38>)
 8002e06:	4c0d      	ldr	r4, [pc, #52]	; (8002e3c <__libc_init_array+0x3c>)
 8002e08:	1ba4      	subs	r4, r4, r6
 8002e0a:	10a4      	asrs	r4, r4, #2
 8002e0c:	42a5      	cmp	r5, r4
 8002e0e:	d109      	bne.n	8002e24 <__libc_init_array+0x24>
 8002e10:	f000 ff74 	bl	8003cfc <_init>
 8002e14:	2500      	movs	r5, #0
 8002e16:	4e0a      	ldr	r6, [pc, #40]	; (8002e40 <__libc_init_array+0x40>)
 8002e18:	4c0a      	ldr	r4, [pc, #40]	; (8002e44 <__libc_init_array+0x44>)
 8002e1a:	1ba4      	subs	r4, r4, r6
 8002e1c:	10a4      	asrs	r4, r4, #2
 8002e1e:	42a5      	cmp	r5, r4
 8002e20:	d105      	bne.n	8002e2e <__libc_init_array+0x2e>
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
 8002e24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e28:	4798      	blx	r3
 8002e2a:	3501      	adds	r5, #1
 8002e2c:	e7ee      	b.n	8002e0c <__libc_init_array+0xc>
 8002e2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e32:	4798      	blx	r3
 8002e34:	3501      	adds	r5, #1
 8002e36:	e7f2      	b.n	8002e1e <__libc_init_array+0x1e>
 8002e38:	08003ee8 	.word	0x08003ee8
 8002e3c:	08003ee8 	.word	0x08003ee8
 8002e40:	08003ee8 	.word	0x08003ee8
 8002e44:	08003eec 	.word	0x08003eec

08002e48 <memset>:
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4402      	add	r2, r0
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d100      	bne.n	8002e52 <memset+0xa>
 8002e50:	4770      	bx	lr
 8002e52:	f803 1b01 	strb.w	r1, [r3], #1
 8002e56:	e7f9      	b.n	8002e4c <memset+0x4>

08002e58 <iprintf>:
 8002e58:	b40f      	push	{r0, r1, r2, r3}
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <iprintf+0x2c>)
 8002e5c:	b513      	push	{r0, r1, r4, lr}
 8002e5e:	681c      	ldr	r4, [r3, #0]
 8002e60:	b124      	cbz	r4, 8002e6c <iprintf+0x14>
 8002e62:	69a3      	ldr	r3, [r4, #24]
 8002e64:	b913      	cbnz	r3, 8002e6c <iprintf+0x14>
 8002e66:	4620      	mov	r0, r4
 8002e68:	f000 fa22 	bl	80032b0 <__sinit>
 8002e6c:	ab05      	add	r3, sp, #20
 8002e6e:	9a04      	ldr	r2, [sp, #16]
 8002e70:	68a1      	ldr	r1, [r4, #8]
 8002e72:	4620      	mov	r0, r4
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	f000 fbd7 	bl	8003628 <_vfiprintf_r>
 8002e7a:	b002      	add	sp, #8
 8002e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e80:	b004      	add	sp, #16
 8002e82:	4770      	bx	lr
 8002e84:	2000000c 	.word	0x2000000c

08002e88 <_puts_r>:
 8002e88:	b570      	push	{r4, r5, r6, lr}
 8002e8a:	460e      	mov	r6, r1
 8002e8c:	4605      	mov	r5, r0
 8002e8e:	b118      	cbz	r0, 8002e98 <_puts_r+0x10>
 8002e90:	6983      	ldr	r3, [r0, #24]
 8002e92:	b90b      	cbnz	r3, 8002e98 <_puts_r+0x10>
 8002e94:	f000 fa0c 	bl	80032b0 <__sinit>
 8002e98:	69ab      	ldr	r3, [r5, #24]
 8002e9a:	68ac      	ldr	r4, [r5, #8]
 8002e9c:	b913      	cbnz	r3, 8002ea4 <_puts_r+0x1c>
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f000 fa06 	bl	80032b0 <__sinit>
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <_puts_r+0xac>)
 8002ea6:	429c      	cmp	r4, r3
 8002ea8:	d117      	bne.n	8002eda <_puts_r+0x52>
 8002eaa:	686c      	ldr	r4, [r5, #4]
 8002eac:	89a3      	ldrh	r3, [r4, #12]
 8002eae:	071b      	lsls	r3, r3, #28
 8002eb0:	d51d      	bpl.n	8002eee <_puts_r+0x66>
 8002eb2:	6923      	ldr	r3, [r4, #16]
 8002eb4:	b1db      	cbz	r3, 8002eee <_puts_r+0x66>
 8002eb6:	3e01      	subs	r6, #1
 8002eb8:	68a3      	ldr	r3, [r4, #8]
 8002eba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	60a3      	str	r3, [r4, #8]
 8002ec2:	b9e9      	cbnz	r1, 8002f00 <_puts_r+0x78>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	da2e      	bge.n	8002f26 <_puts_r+0x9e>
 8002ec8:	4622      	mov	r2, r4
 8002eca:	210a      	movs	r1, #10
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f000 f83f 	bl	8002f50 <__swbuf_r>
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d011      	beq.n	8002efa <_puts_r+0x72>
 8002ed6:	200a      	movs	r0, #10
 8002ed8:	e011      	b.n	8002efe <_puts_r+0x76>
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <_puts_r+0xb0>)
 8002edc:	429c      	cmp	r4, r3
 8002ede:	d101      	bne.n	8002ee4 <_puts_r+0x5c>
 8002ee0:	68ac      	ldr	r4, [r5, #8]
 8002ee2:	e7e3      	b.n	8002eac <_puts_r+0x24>
 8002ee4:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <_puts_r+0xb4>)
 8002ee6:	429c      	cmp	r4, r3
 8002ee8:	bf08      	it	eq
 8002eea:	68ec      	ldreq	r4, [r5, #12]
 8002eec:	e7de      	b.n	8002eac <_puts_r+0x24>
 8002eee:	4621      	mov	r1, r4
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	f000 f87f 	bl	8002ff4 <__swsetup_r>
 8002ef6:	2800      	cmp	r0, #0
 8002ef8:	d0dd      	beq.n	8002eb6 <_puts_r+0x2e>
 8002efa:	f04f 30ff 	mov.w	r0, #4294967295
 8002efe:	bd70      	pop	{r4, r5, r6, pc}
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	da04      	bge.n	8002f0e <_puts_r+0x86>
 8002f04:	69a2      	ldr	r2, [r4, #24]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	dc06      	bgt.n	8002f18 <_puts_r+0x90>
 8002f0a:	290a      	cmp	r1, #10
 8002f0c:	d004      	beq.n	8002f18 <_puts_r+0x90>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	6022      	str	r2, [r4, #0]
 8002f14:	7019      	strb	r1, [r3, #0]
 8002f16:	e7cf      	b.n	8002eb8 <_puts_r+0x30>
 8002f18:	4622      	mov	r2, r4
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f000 f818 	bl	8002f50 <__swbuf_r>
 8002f20:	3001      	adds	r0, #1
 8002f22:	d1c9      	bne.n	8002eb8 <_puts_r+0x30>
 8002f24:	e7e9      	b.n	8002efa <_puts_r+0x72>
 8002f26:	200a      	movs	r0, #10
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	6022      	str	r2, [r4, #0]
 8002f2e:	7018      	strb	r0, [r3, #0]
 8002f30:	e7e5      	b.n	8002efe <_puts_r+0x76>
 8002f32:	bf00      	nop
 8002f34:	08003e74 	.word	0x08003e74
 8002f38:	08003e94 	.word	0x08003e94
 8002f3c:	08003e54 	.word	0x08003e54

08002f40 <puts>:
 8002f40:	4b02      	ldr	r3, [pc, #8]	; (8002f4c <puts+0xc>)
 8002f42:	4601      	mov	r1, r0
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	f7ff bf9f 	b.w	8002e88 <_puts_r>
 8002f4a:	bf00      	nop
 8002f4c:	2000000c 	.word	0x2000000c

08002f50 <__swbuf_r>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	460e      	mov	r6, r1
 8002f54:	4614      	mov	r4, r2
 8002f56:	4605      	mov	r5, r0
 8002f58:	b118      	cbz	r0, 8002f62 <__swbuf_r+0x12>
 8002f5a:	6983      	ldr	r3, [r0, #24]
 8002f5c:	b90b      	cbnz	r3, 8002f62 <__swbuf_r+0x12>
 8002f5e:	f000 f9a7 	bl	80032b0 <__sinit>
 8002f62:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <__swbuf_r+0x98>)
 8002f64:	429c      	cmp	r4, r3
 8002f66:	d12a      	bne.n	8002fbe <__swbuf_r+0x6e>
 8002f68:	686c      	ldr	r4, [r5, #4]
 8002f6a:	69a3      	ldr	r3, [r4, #24]
 8002f6c:	60a3      	str	r3, [r4, #8]
 8002f6e:	89a3      	ldrh	r3, [r4, #12]
 8002f70:	071a      	lsls	r2, r3, #28
 8002f72:	d52e      	bpl.n	8002fd2 <__swbuf_r+0x82>
 8002f74:	6923      	ldr	r3, [r4, #16]
 8002f76:	b363      	cbz	r3, 8002fd2 <__swbuf_r+0x82>
 8002f78:	6923      	ldr	r3, [r4, #16]
 8002f7a:	6820      	ldr	r0, [r4, #0]
 8002f7c:	b2f6      	uxtb	r6, r6
 8002f7e:	1ac0      	subs	r0, r0, r3
 8002f80:	6963      	ldr	r3, [r4, #20]
 8002f82:	4637      	mov	r7, r6
 8002f84:	4283      	cmp	r3, r0
 8002f86:	dc04      	bgt.n	8002f92 <__swbuf_r+0x42>
 8002f88:	4621      	mov	r1, r4
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f000 f926 	bl	80031dc <_fflush_r>
 8002f90:	bb28      	cbnz	r0, 8002fde <__swbuf_r+0x8e>
 8002f92:	68a3      	ldr	r3, [r4, #8]
 8002f94:	3001      	adds	r0, #1
 8002f96:	3b01      	subs	r3, #1
 8002f98:	60a3      	str	r3, [r4, #8]
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	6022      	str	r2, [r4, #0]
 8002fa0:	701e      	strb	r6, [r3, #0]
 8002fa2:	6963      	ldr	r3, [r4, #20]
 8002fa4:	4283      	cmp	r3, r0
 8002fa6:	d004      	beq.n	8002fb2 <__swbuf_r+0x62>
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	07db      	lsls	r3, r3, #31
 8002fac:	d519      	bpl.n	8002fe2 <__swbuf_r+0x92>
 8002fae:	2e0a      	cmp	r6, #10
 8002fb0:	d117      	bne.n	8002fe2 <__swbuf_r+0x92>
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f000 f911 	bl	80031dc <_fflush_r>
 8002fba:	b190      	cbz	r0, 8002fe2 <__swbuf_r+0x92>
 8002fbc:	e00f      	b.n	8002fde <__swbuf_r+0x8e>
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <__swbuf_r+0x9c>)
 8002fc0:	429c      	cmp	r4, r3
 8002fc2:	d101      	bne.n	8002fc8 <__swbuf_r+0x78>
 8002fc4:	68ac      	ldr	r4, [r5, #8]
 8002fc6:	e7d0      	b.n	8002f6a <__swbuf_r+0x1a>
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <__swbuf_r+0xa0>)
 8002fca:	429c      	cmp	r4, r3
 8002fcc:	bf08      	it	eq
 8002fce:	68ec      	ldreq	r4, [r5, #12]
 8002fd0:	e7cb      	b.n	8002f6a <__swbuf_r+0x1a>
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	f000 f80d 	bl	8002ff4 <__swsetup_r>
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d0cc      	beq.n	8002f78 <__swbuf_r+0x28>
 8002fde:	f04f 37ff 	mov.w	r7, #4294967295
 8002fe2:	4638      	mov	r0, r7
 8002fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	08003e74 	.word	0x08003e74
 8002fec:	08003e94 	.word	0x08003e94
 8002ff0:	08003e54 	.word	0x08003e54

08002ff4 <__swsetup_r>:
 8002ff4:	4b32      	ldr	r3, [pc, #200]	; (80030c0 <__swsetup_r+0xcc>)
 8002ff6:	b570      	push	{r4, r5, r6, lr}
 8002ff8:	681d      	ldr	r5, [r3, #0]
 8002ffa:	4606      	mov	r6, r0
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	b125      	cbz	r5, 800300a <__swsetup_r+0x16>
 8003000:	69ab      	ldr	r3, [r5, #24]
 8003002:	b913      	cbnz	r3, 800300a <__swsetup_r+0x16>
 8003004:	4628      	mov	r0, r5
 8003006:	f000 f953 	bl	80032b0 <__sinit>
 800300a:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <__swsetup_r+0xd0>)
 800300c:	429c      	cmp	r4, r3
 800300e:	d10f      	bne.n	8003030 <__swsetup_r+0x3c>
 8003010:	686c      	ldr	r4, [r5, #4]
 8003012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003016:	b29a      	uxth	r2, r3
 8003018:	0715      	lsls	r5, r2, #28
 800301a:	d42c      	bmi.n	8003076 <__swsetup_r+0x82>
 800301c:	06d0      	lsls	r0, r2, #27
 800301e:	d411      	bmi.n	8003044 <__swsetup_r+0x50>
 8003020:	2209      	movs	r2, #9
 8003022:	6032      	str	r2, [r6, #0]
 8003024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003028:	81a3      	strh	r3, [r4, #12]
 800302a:	f04f 30ff 	mov.w	r0, #4294967295
 800302e:	e03e      	b.n	80030ae <__swsetup_r+0xba>
 8003030:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <__swsetup_r+0xd4>)
 8003032:	429c      	cmp	r4, r3
 8003034:	d101      	bne.n	800303a <__swsetup_r+0x46>
 8003036:	68ac      	ldr	r4, [r5, #8]
 8003038:	e7eb      	b.n	8003012 <__swsetup_r+0x1e>
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <__swsetup_r+0xd8>)
 800303c:	429c      	cmp	r4, r3
 800303e:	bf08      	it	eq
 8003040:	68ec      	ldreq	r4, [r5, #12]
 8003042:	e7e6      	b.n	8003012 <__swsetup_r+0x1e>
 8003044:	0751      	lsls	r1, r2, #29
 8003046:	d512      	bpl.n	800306e <__swsetup_r+0x7a>
 8003048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800304a:	b141      	cbz	r1, 800305e <__swsetup_r+0x6a>
 800304c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003050:	4299      	cmp	r1, r3
 8003052:	d002      	beq.n	800305a <__swsetup_r+0x66>
 8003054:	4630      	mov	r0, r6
 8003056:	f000 fa19 	bl	800348c <_free_r>
 800305a:	2300      	movs	r3, #0
 800305c:	6363      	str	r3, [r4, #52]	; 0x34
 800305e:	89a3      	ldrh	r3, [r4, #12]
 8003060:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003064:	81a3      	strh	r3, [r4, #12]
 8003066:	2300      	movs	r3, #0
 8003068:	6063      	str	r3, [r4, #4]
 800306a:	6923      	ldr	r3, [r4, #16]
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	89a3      	ldrh	r3, [r4, #12]
 8003070:	f043 0308 	orr.w	r3, r3, #8
 8003074:	81a3      	strh	r3, [r4, #12]
 8003076:	6923      	ldr	r3, [r4, #16]
 8003078:	b94b      	cbnz	r3, 800308e <__swsetup_r+0x9a>
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d003      	beq.n	800308e <__swsetup_r+0x9a>
 8003086:	4621      	mov	r1, r4
 8003088:	4630      	mov	r0, r6
 800308a:	f000 f9bf 	bl	800340c <__smakebuf_r>
 800308e:	89a2      	ldrh	r2, [r4, #12]
 8003090:	f012 0301 	ands.w	r3, r2, #1
 8003094:	d00c      	beq.n	80030b0 <__swsetup_r+0xbc>
 8003096:	2300      	movs	r3, #0
 8003098:	60a3      	str	r3, [r4, #8]
 800309a:	6963      	ldr	r3, [r4, #20]
 800309c:	425b      	negs	r3, r3
 800309e:	61a3      	str	r3, [r4, #24]
 80030a0:	6923      	ldr	r3, [r4, #16]
 80030a2:	b953      	cbnz	r3, 80030ba <__swsetup_r+0xc6>
 80030a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80030ac:	d1ba      	bne.n	8003024 <__swsetup_r+0x30>
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	0792      	lsls	r2, r2, #30
 80030b2:	bf58      	it	pl
 80030b4:	6963      	ldrpl	r3, [r4, #20]
 80030b6:	60a3      	str	r3, [r4, #8]
 80030b8:	e7f2      	b.n	80030a0 <__swsetup_r+0xac>
 80030ba:	2000      	movs	r0, #0
 80030bc:	e7f7      	b.n	80030ae <__swsetup_r+0xba>
 80030be:	bf00      	nop
 80030c0:	2000000c 	.word	0x2000000c
 80030c4:	08003e74 	.word	0x08003e74
 80030c8:	08003e94 	.word	0x08003e94
 80030cc:	08003e54 	.word	0x08003e54

080030d0 <__sflush_r>:
 80030d0:	898a      	ldrh	r2, [r1, #12]
 80030d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d6:	4605      	mov	r5, r0
 80030d8:	0710      	lsls	r0, r2, #28
 80030da:	460c      	mov	r4, r1
 80030dc:	d458      	bmi.n	8003190 <__sflush_r+0xc0>
 80030de:	684b      	ldr	r3, [r1, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	dc05      	bgt.n	80030f0 <__sflush_r+0x20>
 80030e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	dc02      	bgt.n	80030f0 <__sflush_r+0x20>
 80030ea:	2000      	movs	r0, #0
 80030ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030f2:	2e00      	cmp	r6, #0
 80030f4:	d0f9      	beq.n	80030ea <__sflush_r+0x1a>
 80030f6:	2300      	movs	r3, #0
 80030f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030fc:	682f      	ldr	r7, [r5, #0]
 80030fe:	6a21      	ldr	r1, [r4, #32]
 8003100:	602b      	str	r3, [r5, #0]
 8003102:	d032      	beq.n	800316a <__sflush_r+0x9a>
 8003104:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	075a      	lsls	r2, r3, #29
 800310a:	d505      	bpl.n	8003118 <__sflush_r+0x48>
 800310c:	6863      	ldr	r3, [r4, #4]
 800310e:	1ac0      	subs	r0, r0, r3
 8003110:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003112:	b10b      	cbz	r3, 8003118 <__sflush_r+0x48>
 8003114:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003116:	1ac0      	subs	r0, r0, r3
 8003118:	2300      	movs	r3, #0
 800311a:	4602      	mov	r2, r0
 800311c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800311e:	6a21      	ldr	r1, [r4, #32]
 8003120:	4628      	mov	r0, r5
 8003122:	47b0      	blx	r6
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	89a3      	ldrh	r3, [r4, #12]
 8003128:	d106      	bne.n	8003138 <__sflush_r+0x68>
 800312a:	6829      	ldr	r1, [r5, #0]
 800312c:	291d      	cmp	r1, #29
 800312e:	d848      	bhi.n	80031c2 <__sflush_r+0xf2>
 8003130:	4a29      	ldr	r2, [pc, #164]	; (80031d8 <__sflush_r+0x108>)
 8003132:	40ca      	lsrs	r2, r1
 8003134:	07d6      	lsls	r6, r2, #31
 8003136:	d544      	bpl.n	80031c2 <__sflush_r+0xf2>
 8003138:	2200      	movs	r2, #0
 800313a:	6062      	str	r2, [r4, #4]
 800313c:	6922      	ldr	r2, [r4, #16]
 800313e:	04d9      	lsls	r1, r3, #19
 8003140:	6022      	str	r2, [r4, #0]
 8003142:	d504      	bpl.n	800314e <__sflush_r+0x7e>
 8003144:	1c42      	adds	r2, r0, #1
 8003146:	d101      	bne.n	800314c <__sflush_r+0x7c>
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	b903      	cbnz	r3, 800314e <__sflush_r+0x7e>
 800314c:	6560      	str	r0, [r4, #84]	; 0x54
 800314e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003150:	602f      	str	r7, [r5, #0]
 8003152:	2900      	cmp	r1, #0
 8003154:	d0c9      	beq.n	80030ea <__sflush_r+0x1a>
 8003156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800315a:	4299      	cmp	r1, r3
 800315c:	d002      	beq.n	8003164 <__sflush_r+0x94>
 800315e:	4628      	mov	r0, r5
 8003160:	f000 f994 	bl	800348c <_free_r>
 8003164:	2000      	movs	r0, #0
 8003166:	6360      	str	r0, [r4, #52]	; 0x34
 8003168:	e7c0      	b.n	80030ec <__sflush_r+0x1c>
 800316a:	2301      	movs	r3, #1
 800316c:	4628      	mov	r0, r5
 800316e:	47b0      	blx	r6
 8003170:	1c41      	adds	r1, r0, #1
 8003172:	d1c8      	bne.n	8003106 <__sflush_r+0x36>
 8003174:	682b      	ldr	r3, [r5, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0c5      	beq.n	8003106 <__sflush_r+0x36>
 800317a:	2b1d      	cmp	r3, #29
 800317c:	d001      	beq.n	8003182 <__sflush_r+0xb2>
 800317e:	2b16      	cmp	r3, #22
 8003180:	d101      	bne.n	8003186 <__sflush_r+0xb6>
 8003182:	602f      	str	r7, [r5, #0]
 8003184:	e7b1      	b.n	80030ea <__sflush_r+0x1a>
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318c:	81a3      	strh	r3, [r4, #12]
 800318e:	e7ad      	b.n	80030ec <__sflush_r+0x1c>
 8003190:	690f      	ldr	r7, [r1, #16]
 8003192:	2f00      	cmp	r7, #0
 8003194:	d0a9      	beq.n	80030ea <__sflush_r+0x1a>
 8003196:	0793      	lsls	r3, r2, #30
 8003198:	bf18      	it	ne
 800319a:	2300      	movne	r3, #0
 800319c:	680e      	ldr	r6, [r1, #0]
 800319e:	bf08      	it	eq
 80031a0:	694b      	ldreq	r3, [r1, #20]
 80031a2:	eba6 0807 	sub.w	r8, r6, r7
 80031a6:	600f      	str	r7, [r1, #0]
 80031a8:	608b      	str	r3, [r1, #8]
 80031aa:	f1b8 0f00 	cmp.w	r8, #0
 80031ae:	dd9c      	ble.n	80030ea <__sflush_r+0x1a>
 80031b0:	4643      	mov	r3, r8
 80031b2:	463a      	mov	r2, r7
 80031b4:	6a21      	ldr	r1, [r4, #32]
 80031b6:	4628      	mov	r0, r5
 80031b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031ba:	47b0      	blx	r6
 80031bc:	2800      	cmp	r0, #0
 80031be:	dc06      	bgt.n	80031ce <__sflush_r+0xfe>
 80031c0:	89a3      	ldrh	r3, [r4, #12]
 80031c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c6:	81a3      	strh	r3, [r4, #12]
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
 80031cc:	e78e      	b.n	80030ec <__sflush_r+0x1c>
 80031ce:	4407      	add	r7, r0
 80031d0:	eba8 0800 	sub.w	r8, r8, r0
 80031d4:	e7e9      	b.n	80031aa <__sflush_r+0xda>
 80031d6:	bf00      	nop
 80031d8:	20400001 	.word	0x20400001

080031dc <_fflush_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	690b      	ldr	r3, [r1, #16]
 80031e0:	4605      	mov	r5, r0
 80031e2:	460c      	mov	r4, r1
 80031e4:	b1db      	cbz	r3, 800321e <_fflush_r+0x42>
 80031e6:	b118      	cbz	r0, 80031f0 <_fflush_r+0x14>
 80031e8:	6983      	ldr	r3, [r0, #24]
 80031ea:	b90b      	cbnz	r3, 80031f0 <_fflush_r+0x14>
 80031ec:	f000 f860 	bl	80032b0 <__sinit>
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <_fflush_r+0x48>)
 80031f2:	429c      	cmp	r4, r3
 80031f4:	d109      	bne.n	800320a <_fflush_r+0x2e>
 80031f6:	686c      	ldr	r4, [r5, #4]
 80031f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031fc:	b17b      	cbz	r3, 800321e <_fflush_r+0x42>
 80031fe:	4621      	mov	r1, r4
 8003200:	4628      	mov	r0, r5
 8003202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003206:	f7ff bf63 	b.w	80030d0 <__sflush_r>
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <_fflush_r+0x4c>)
 800320c:	429c      	cmp	r4, r3
 800320e:	d101      	bne.n	8003214 <_fflush_r+0x38>
 8003210:	68ac      	ldr	r4, [r5, #8]
 8003212:	e7f1      	b.n	80031f8 <_fflush_r+0x1c>
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <_fflush_r+0x50>)
 8003216:	429c      	cmp	r4, r3
 8003218:	bf08      	it	eq
 800321a:	68ec      	ldreq	r4, [r5, #12]
 800321c:	e7ec      	b.n	80031f8 <_fflush_r+0x1c>
 800321e:	2000      	movs	r0, #0
 8003220:	bd38      	pop	{r3, r4, r5, pc}
 8003222:	bf00      	nop
 8003224:	08003e74 	.word	0x08003e74
 8003228:	08003e94 	.word	0x08003e94
 800322c:	08003e54 	.word	0x08003e54

08003230 <std>:
 8003230:	2300      	movs	r3, #0
 8003232:	b510      	push	{r4, lr}
 8003234:	4604      	mov	r4, r0
 8003236:	e9c0 3300 	strd	r3, r3, [r0]
 800323a:	6083      	str	r3, [r0, #8]
 800323c:	8181      	strh	r1, [r0, #12]
 800323e:	6643      	str	r3, [r0, #100]	; 0x64
 8003240:	81c2      	strh	r2, [r0, #14]
 8003242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003246:	6183      	str	r3, [r0, #24]
 8003248:	4619      	mov	r1, r3
 800324a:	2208      	movs	r2, #8
 800324c:	305c      	adds	r0, #92	; 0x5c
 800324e:	f7ff fdfb 	bl	8002e48 <memset>
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <std+0x38>)
 8003254:	6224      	str	r4, [r4, #32]
 8003256:	6263      	str	r3, [r4, #36]	; 0x24
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <std+0x3c>)
 800325a:	62a3      	str	r3, [r4, #40]	; 0x28
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <std+0x40>)
 800325e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <std+0x44>)
 8003262:	6323      	str	r3, [r4, #48]	; 0x30
 8003264:	bd10      	pop	{r4, pc}
 8003266:	bf00      	nop
 8003268:	08003b85 	.word	0x08003b85
 800326c:	08003ba7 	.word	0x08003ba7
 8003270:	08003bdf 	.word	0x08003bdf
 8003274:	08003c03 	.word	0x08003c03

08003278 <_cleanup_r>:
 8003278:	4901      	ldr	r1, [pc, #4]	; (8003280 <_cleanup_r+0x8>)
 800327a:	f000 b885 	b.w	8003388 <_fwalk_reent>
 800327e:	bf00      	nop
 8003280:	080031dd 	.word	0x080031dd

08003284 <__sfmoreglue>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	2568      	movs	r5, #104	; 0x68
 8003288:	1e4a      	subs	r2, r1, #1
 800328a:	4355      	muls	r5, r2
 800328c:	460e      	mov	r6, r1
 800328e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003292:	f000 f947 	bl	8003524 <_malloc_r>
 8003296:	4604      	mov	r4, r0
 8003298:	b140      	cbz	r0, 80032ac <__sfmoreglue+0x28>
 800329a:	2100      	movs	r1, #0
 800329c:	e9c0 1600 	strd	r1, r6, [r0]
 80032a0:	300c      	adds	r0, #12
 80032a2:	60a0      	str	r0, [r4, #8]
 80032a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032a8:	f7ff fdce 	bl	8002e48 <memset>
 80032ac:	4620      	mov	r0, r4
 80032ae:	bd70      	pop	{r4, r5, r6, pc}

080032b0 <__sinit>:
 80032b0:	6983      	ldr	r3, [r0, #24]
 80032b2:	b510      	push	{r4, lr}
 80032b4:	4604      	mov	r4, r0
 80032b6:	bb33      	cbnz	r3, 8003306 <__sinit+0x56>
 80032b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80032bc:	6503      	str	r3, [r0, #80]	; 0x50
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <__sinit+0x58>)
 80032c0:	4a12      	ldr	r2, [pc, #72]	; (800330c <__sinit+0x5c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6282      	str	r2, [r0, #40]	; 0x28
 80032c6:	4298      	cmp	r0, r3
 80032c8:	bf04      	itt	eq
 80032ca:	2301      	moveq	r3, #1
 80032cc:	6183      	streq	r3, [r0, #24]
 80032ce:	f000 f81f 	bl	8003310 <__sfp>
 80032d2:	6060      	str	r0, [r4, #4]
 80032d4:	4620      	mov	r0, r4
 80032d6:	f000 f81b 	bl	8003310 <__sfp>
 80032da:	60a0      	str	r0, [r4, #8]
 80032dc:	4620      	mov	r0, r4
 80032de:	f000 f817 	bl	8003310 <__sfp>
 80032e2:	2200      	movs	r2, #0
 80032e4:	60e0      	str	r0, [r4, #12]
 80032e6:	2104      	movs	r1, #4
 80032e8:	6860      	ldr	r0, [r4, #4]
 80032ea:	f7ff ffa1 	bl	8003230 <std>
 80032ee:	2201      	movs	r2, #1
 80032f0:	2109      	movs	r1, #9
 80032f2:	68a0      	ldr	r0, [r4, #8]
 80032f4:	f7ff ff9c 	bl	8003230 <std>
 80032f8:	2202      	movs	r2, #2
 80032fa:	2112      	movs	r1, #18
 80032fc:	68e0      	ldr	r0, [r4, #12]
 80032fe:	f7ff ff97 	bl	8003230 <std>
 8003302:	2301      	movs	r3, #1
 8003304:	61a3      	str	r3, [r4, #24]
 8003306:	bd10      	pop	{r4, pc}
 8003308:	08003e50 	.word	0x08003e50
 800330c:	08003279 	.word	0x08003279

08003310 <__sfp>:
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <__sfp+0x70>)
 8003314:	4607      	mov	r7, r0
 8003316:	681e      	ldr	r6, [r3, #0]
 8003318:	69b3      	ldr	r3, [r6, #24]
 800331a:	b913      	cbnz	r3, 8003322 <__sfp+0x12>
 800331c:	4630      	mov	r0, r6
 800331e:	f7ff ffc7 	bl	80032b0 <__sinit>
 8003322:	3648      	adds	r6, #72	; 0x48
 8003324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003328:	3b01      	subs	r3, #1
 800332a:	d503      	bpl.n	8003334 <__sfp+0x24>
 800332c:	6833      	ldr	r3, [r6, #0]
 800332e:	b133      	cbz	r3, 800333e <__sfp+0x2e>
 8003330:	6836      	ldr	r6, [r6, #0]
 8003332:	e7f7      	b.n	8003324 <__sfp+0x14>
 8003334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003338:	b16d      	cbz	r5, 8003356 <__sfp+0x46>
 800333a:	3468      	adds	r4, #104	; 0x68
 800333c:	e7f4      	b.n	8003328 <__sfp+0x18>
 800333e:	2104      	movs	r1, #4
 8003340:	4638      	mov	r0, r7
 8003342:	f7ff ff9f 	bl	8003284 <__sfmoreglue>
 8003346:	6030      	str	r0, [r6, #0]
 8003348:	2800      	cmp	r0, #0
 800334a:	d1f1      	bne.n	8003330 <__sfp+0x20>
 800334c:	230c      	movs	r3, #12
 800334e:	4604      	mov	r4, r0
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	4620      	mov	r0, r4
 8003354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <__sfp+0x74>)
 8003358:	6665      	str	r5, [r4, #100]	; 0x64
 800335a:	e9c4 5500 	strd	r5, r5, [r4]
 800335e:	60a5      	str	r5, [r4, #8]
 8003360:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003364:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003368:	2208      	movs	r2, #8
 800336a:	4629      	mov	r1, r5
 800336c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003370:	f7ff fd6a 	bl	8002e48 <memset>
 8003374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800337c:	e7e9      	b.n	8003352 <__sfp+0x42>
 800337e:	bf00      	nop
 8003380:	08003e50 	.word	0x08003e50
 8003384:	ffff0001 	.word	0xffff0001

08003388 <_fwalk_reent>:
 8003388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800338c:	4680      	mov	r8, r0
 800338e:	4689      	mov	r9, r1
 8003390:	2600      	movs	r6, #0
 8003392:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003396:	b914      	cbnz	r4, 800339e <_fwalk_reent+0x16>
 8003398:	4630      	mov	r0, r6
 800339a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800339e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80033a2:	3f01      	subs	r7, #1
 80033a4:	d501      	bpl.n	80033aa <_fwalk_reent+0x22>
 80033a6:	6824      	ldr	r4, [r4, #0]
 80033a8:	e7f5      	b.n	8003396 <_fwalk_reent+0xe>
 80033aa:	89ab      	ldrh	r3, [r5, #12]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d907      	bls.n	80033c0 <_fwalk_reent+0x38>
 80033b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033b4:	3301      	adds	r3, #1
 80033b6:	d003      	beq.n	80033c0 <_fwalk_reent+0x38>
 80033b8:	4629      	mov	r1, r5
 80033ba:	4640      	mov	r0, r8
 80033bc:	47c8      	blx	r9
 80033be:	4306      	orrs	r6, r0
 80033c0:	3568      	adds	r5, #104	; 0x68
 80033c2:	e7ee      	b.n	80033a2 <_fwalk_reent+0x1a>

080033c4 <__swhatbuf_r>:
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	460e      	mov	r6, r1
 80033c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033cc:	b096      	sub	sp, #88	; 0x58
 80033ce:	2900      	cmp	r1, #0
 80033d0:	4614      	mov	r4, r2
 80033d2:	461d      	mov	r5, r3
 80033d4:	da07      	bge.n	80033e6 <__swhatbuf_r+0x22>
 80033d6:	2300      	movs	r3, #0
 80033d8:	602b      	str	r3, [r5, #0]
 80033da:	89b3      	ldrh	r3, [r6, #12]
 80033dc:	061a      	lsls	r2, r3, #24
 80033de:	d410      	bmi.n	8003402 <__swhatbuf_r+0x3e>
 80033e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e4:	e00e      	b.n	8003404 <__swhatbuf_r+0x40>
 80033e6:	466a      	mov	r2, sp
 80033e8:	f000 fc32 	bl	8003c50 <_fstat_r>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	dbf2      	blt.n	80033d6 <__swhatbuf_r+0x12>
 80033f0:	9a01      	ldr	r2, [sp, #4]
 80033f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033fa:	425a      	negs	r2, r3
 80033fc:	415a      	adcs	r2, r3
 80033fe:	602a      	str	r2, [r5, #0]
 8003400:	e7ee      	b.n	80033e0 <__swhatbuf_r+0x1c>
 8003402:	2340      	movs	r3, #64	; 0x40
 8003404:	2000      	movs	r0, #0
 8003406:	6023      	str	r3, [r4, #0]
 8003408:	b016      	add	sp, #88	; 0x58
 800340a:	bd70      	pop	{r4, r5, r6, pc}

0800340c <__smakebuf_r>:
 800340c:	898b      	ldrh	r3, [r1, #12]
 800340e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003410:	079d      	lsls	r5, r3, #30
 8003412:	4606      	mov	r6, r0
 8003414:	460c      	mov	r4, r1
 8003416:	d507      	bpl.n	8003428 <__smakebuf_r+0x1c>
 8003418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	6123      	str	r3, [r4, #16]
 8003420:	2301      	movs	r3, #1
 8003422:	6163      	str	r3, [r4, #20]
 8003424:	b002      	add	sp, #8
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	ab01      	add	r3, sp, #4
 800342a:	466a      	mov	r2, sp
 800342c:	f7ff ffca 	bl	80033c4 <__swhatbuf_r>
 8003430:	9900      	ldr	r1, [sp, #0]
 8003432:	4605      	mov	r5, r0
 8003434:	4630      	mov	r0, r6
 8003436:	f000 f875 	bl	8003524 <_malloc_r>
 800343a:	b948      	cbnz	r0, 8003450 <__smakebuf_r+0x44>
 800343c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003440:	059a      	lsls	r2, r3, #22
 8003442:	d4ef      	bmi.n	8003424 <__smakebuf_r+0x18>
 8003444:	f023 0303 	bic.w	r3, r3, #3
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	81a3      	strh	r3, [r4, #12]
 800344e:	e7e3      	b.n	8003418 <__smakebuf_r+0xc>
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <__smakebuf_r+0x7c>)
 8003452:	62b3      	str	r3, [r6, #40]	; 0x28
 8003454:	89a3      	ldrh	r3, [r4, #12]
 8003456:	6020      	str	r0, [r4, #0]
 8003458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	9b00      	ldr	r3, [sp, #0]
 8003460:	6120      	str	r0, [r4, #16]
 8003462:	6163      	str	r3, [r4, #20]
 8003464:	9b01      	ldr	r3, [sp, #4]
 8003466:	b15b      	cbz	r3, 8003480 <__smakebuf_r+0x74>
 8003468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800346c:	4630      	mov	r0, r6
 800346e:	f000 fc01 	bl	8003c74 <_isatty_r>
 8003472:	b128      	cbz	r0, 8003480 <__smakebuf_r+0x74>
 8003474:	89a3      	ldrh	r3, [r4, #12]
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	81a3      	strh	r3, [r4, #12]
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	431d      	orrs	r5, r3
 8003484:	81a5      	strh	r5, [r4, #12]
 8003486:	e7cd      	b.n	8003424 <__smakebuf_r+0x18>
 8003488:	08003279 	.word	0x08003279

0800348c <_free_r>:
 800348c:	b538      	push	{r3, r4, r5, lr}
 800348e:	4605      	mov	r5, r0
 8003490:	2900      	cmp	r1, #0
 8003492:	d043      	beq.n	800351c <_free_r+0x90>
 8003494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003498:	1f0c      	subs	r4, r1, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	bfb8      	it	lt
 800349e:	18e4      	addlt	r4, r4, r3
 80034a0:	f000 fc18 	bl	8003cd4 <__malloc_lock>
 80034a4:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <_free_r+0x94>)
 80034a6:	6813      	ldr	r3, [r2, #0]
 80034a8:	4610      	mov	r0, r2
 80034aa:	b933      	cbnz	r3, 80034ba <_free_r+0x2e>
 80034ac:	6063      	str	r3, [r4, #4]
 80034ae:	6014      	str	r4, [r2, #0]
 80034b0:	4628      	mov	r0, r5
 80034b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034b6:	f000 bc0e 	b.w	8003cd6 <__malloc_unlock>
 80034ba:	42a3      	cmp	r3, r4
 80034bc:	d90b      	bls.n	80034d6 <_free_r+0x4a>
 80034be:	6821      	ldr	r1, [r4, #0]
 80034c0:	1862      	adds	r2, r4, r1
 80034c2:	4293      	cmp	r3, r2
 80034c4:	bf01      	itttt	eq
 80034c6:	681a      	ldreq	r2, [r3, #0]
 80034c8:	685b      	ldreq	r3, [r3, #4]
 80034ca:	1852      	addeq	r2, r2, r1
 80034cc:	6022      	streq	r2, [r4, #0]
 80034ce:	6063      	str	r3, [r4, #4]
 80034d0:	6004      	str	r4, [r0, #0]
 80034d2:	e7ed      	b.n	80034b0 <_free_r+0x24>
 80034d4:	4613      	mov	r3, r2
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	b10a      	cbz	r2, 80034de <_free_r+0x52>
 80034da:	42a2      	cmp	r2, r4
 80034dc:	d9fa      	bls.n	80034d4 <_free_r+0x48>
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	1858      	adds	r0, r3, r1
 80034e2:	42a0      	cmp	r0, r4
 80034e4:	d10b      	bne.n	80034fe <_free_r+0x72>
 80034e6:	6820      	ldr	r0, [r4, #0]
 80034e8:	4401      	add	r1, r0
 80034ea:	1858      	adds	r0, r3, r1
 80034ec:	4282      	cmp	r2, r0
 80034ee:	6019      	str	r1, [r3, #0]
 80034f0:	d1de      	bne.n	80034b0 <_free_r+0x24>
 80034f2:	6810      	ldr	r0, [r2, #0]
 80034f4:	6852      	ldr	r2, [r2, #4]
 80034f6:	4401      	add	r1, r0
 80034f8:	6019      	str	r1, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	e7d8      	b.n	80034b0 <_free_r+0x24>
 80034fe:	d902      	bls.n	8003506 <_free_r+0x7a>
 8003500:	230c      	movs	r3, #12
 8003502:	602b      	str	r3, [r5, #0]
 8003504:	e7d4      	b.n	80034b0 <_free_r+0x24>
 8003506:	6820      	ldr	r0, [r4, #0]
 8003508:	1821      	adds	r1, r4, r0
 800350a:	428a      	cmp	r2, r1
 800350c:	bf01      	itttt	eq
 800350e:	6811      	ldreq	r1, [r2, #0]
 8003510:	6852      	ldreq	r2, [r2, #4]
 8003512:	1809      	addeq	r1, r1, r0
 8003514:	6021      	streq	r1, [r4, #0]
 8003516:	6062      	str	r2, [r4, #4]
 8003518:	605c      	str	r4, [r3, #4]
 800351a:	e7c9      	b.n	80034b0 <_free_r+0x24>
 800351c:	bd38      	pop	{r3, r4, r5, pc}
 800351e:	bf00      	nop
 8003520:	20000094 	.word	0x20000094

08003524 <_malloc_r>:
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	1ccd      	adds	r5, r1, #3
 8003528:	f025 0503 	bic.w	r5, r5, #3
 800352c:	3508      	adds	r5, #8
 800352e:	2d0c      	cmp	r5, #12
 8003530:	bf38      	it	cc
 8003532:	250c      	movcc	r5, #12
 8003534:	2d00      	cmp	r5, #0
 8003536:	4606      	mov	r6, r0
 8003538:	db01      	blt.n	800353e <_malloc_r+0x1a>
 800353a:	42a9      	cmp	r1, r5
 800353c:	d903      	bls.n	8003546 <_malloc_r+0x22>
 800353e:	230c      	movs	r3, #12
 8003540:	6033      	str	r3, [r6, #0]
 8003542:	2000      	movs	r0, #0
 8003544:	bd70      	pop	{r4, r5, r6, pc}
 8003546:	f000 fbc5 	bl	8003cd4 <__malloc_lock>
 800354a:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <_malloc_r+0xac>)
 800354c:	6814      	ldr	r4, [r2, #0]
 800354e:	4621      	mov	r1, r4
 8003550:	b991      	cbnz	r1, 8003578 <_malloc_r+0x54>
 8003552:	4c20      	ldr	r4, [pc, #128]	; (80035d4 <_malloc_r+0xb0>)
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	b91b      	cbnz	r3, 8003560 <_malloc_r+0x3c>
 8003558:	4630      	mov	r0, r6
 800355a:	f000 fb03 	bl	8003b64 <_sbrk_r>
 800355e:	6020      	str	r0, [r4, #0]
 8003560:	4629      	mov	r1, r5
 8003562:	4630      	mov	r0, r6
 8003564:	f000 fafe 	bl	8003b64 <_sbrk_r>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d124      	bne.n	80035b6 <_malloc_r+0x92>
 800356c:	230c      	movs	r3, #12
 800356e:	4630      	mov	r0, r6
 8003570:	6033      	str	r3, [r6, #0]
 8003572:	f000 fbb0 	bl	8003cd6 <__malloc_unlock>
 8003576:	e7e4      	b.n	8003542 <_malloc_r+0x1e>
 8003578:	680b      	ldr	r3, [r1, #0]
 800357a:	1b5b      	subs	r3, r3, r5
 800357c:	d418      	bmi.n	80035b0 <_malloc_r+0x8c>
 800357e:	2b0b      	cmp	r3, #11
 8003580:	d90f      	bls.n	80035a2 <_malloc_r+0x7e>
 8003582:	600b      	str	r3, [r1, #0]
 8003584:	18cc      	adds	r4, r1, r3
 8003586:	50cd      	str	r5, [r1, r3]
 8003588:	4630      	mov	r0, r6
 800358a:	f000 fba4 	bl	8003cd6 <__malloc_unlock>
 800358e:	f104 000b 	add.w	r0, r4, #11
 8003592:	1d23      	adds	r3, r4, #4
 8003594:	f020 0007 	bic.w	r0, r0, #7
 8003598:	1ac3      	subs	r3, r0, r3
 800359a:	d0d3      	beq.n	8003544 <_malloc_r+0x20>
 800359c:	425a      	negs	r2, r3
 800359e:	50e2      	str	r2, [r4, r3]
 80035a0:	e7d0      	b.n	8003544 <_malloc_r+0x20>
 80035a2:	684b      	ldr	r3, [r1, #4]
 80035a4:	428c      	cmp	r4, r1
 80035a6:	bf16      	itet	ne
 80035a8:	6063      	strne	r3, [r4, #4]
 80035aa:	6013      	streq	r3, [r2, #0]
 80035ac:	460c      	movne	r4, r1
 80035ae:	e7eb      	b.n	8003588 <_malloc_r+0x64>
 80035b0:	460c      	mov	r4, r1
 80035b2:	6849      	ldr	r1, [r1, #4]
 80035b4:	e7cc      	b.n	8003550 <_malloc_r+0x2c>
 80035b6:	1cc4      	adds	r4, r0, #3
 80035b8:	f024 0403 	bic.w	r4, r4, #3
 80035bc:	42a0      	cmp	r0, r4
 80035be:	d005      	beq.n	80035cc <_malloc_r+0xa8>
 80035c0:	1a21      	subs	r1, r4, r0
 80035c2:	4630      	mov	r0, r6
 80035c4:	f000 face 	bl	8003b64 <_sbrk_r>
 80035c8:	3001      	adds	r0, #1
 80035ca:	d0cf      	beq.n	800356c <_malloc_r+0x48>
 80035cc:	6025      	str	r5, [r4, #0]
 80035ce:	e7db      	b.n	8003588 <_malloc_r+0x64>
 80035d0:	20000094 	.word	0x20000094
 80035d4:	20000098 	.word	0x20000098

080035d8 <__sfputc_r>:
 80035d8:	6893      	ldr	r3, [r2, #8]
 80035da:	b410      	push	{r4}
 80035dc:	3b01      	subs	r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	6093      	str	r3, [r2, #8]
 80035e2:	da07      	bge.n	80035f4 <__sfputc_r+0x1c>
 80035e4:	6994      	ldr	r4, [r2, #24]
 80035e6:	42a3      	cmp	r3, r4
 80035e8:	db01      	blt.n	80035ee <__sfputc_r+0x16>
 80035ea:	290a      	cmp	r1, #10
 80035ec:	d102      	bne.n	80035f4 <__sfputc_r+0x1c>
 80035ee:	bc10      	pop	{r4}
 80035f0:	f7ff bcae 	b.w	8002f50 <__swbuf_r>
 80035f4:	6813      	ldr	r3, [r2, #0]
 80035f6:	1c58      	adds	r0, r3, #1
 80035f8:	6010      	str	r0, [r2, #0]
 80035fa:	7019      	strb	r1, [r3, #0]
 80035fc:	4608      	mov	r0, r1
 80035fe:	bc10      	pop	{r4}
 8003600:	4770      	bx	lr

08003602 <__sfputs_r>:
 8003602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003604:	4606      	mov	r6, r0
 8003606:	460f      	mov	r7, r1
 8003608:	4614      	mov	r4, r2
 800360a:	18d5      	adds	r5, r2, r3
 800360c:	42ac      	cmp	r4, r5
 800360e:	d101      	bne.n	8003614 <__sfputs_r+0x12>
 8003610:	2000      	movs	r0, #0
 8003612:	e007      	b.n	8003624 <__sfputs_r+0x22>
 8003614:	463a      	mov	r2, r7
 8003616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800361a:	4630      	mov	r0, r6
 800361c:	f7ff ffdc 	bl	80035d8 <__sfputc_r>
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	d1f3      	bne.n	800360c <__sfputs_r+0xa>
 8003624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003628 <_vfiprintf_r>:
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	460c      	mov	r4, r1
 800362e:	b09d      	sub	sp, #116	; 0x74
 8003630:	4617      	mov	r7, r2
 8003632:	461d      	mov	r5, r3
 8003634:	4606      	mov	r6, r0
 8003636:	b118      	cbz	r0, 8003640 <_vfiprintf_r+0x18>
 8003638:	6983      	ldr	r3, [r0, #24]
 800363a:	b90b      	cbnz	r3, 8003640 <_vfiprintf_r+0x18>
 800363c:	f7ff fe38 	bl	80032b0 <__sinit>
 8003640:	4b7c      	ldr	r3, [pc, #496]	; (8003834 <_vfiprintf_r+0x20c>)
 8003642:	429c      	cmp	r4, r3
 8003644:	d158      	bne.n	80036f8 <_vfiprintf_r+0xd0>
 8003646:	6874      	ldr	r4, [r6, #4]
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	0718      	lsls	r0, r3, #28
 800364c:	d55e      	bpl.n	800370c <_vfiprintf_r+0xe4>
 800364e:	6923      	ldr	r3, [r4, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d05b      	beq.n	800370c <_vfiprintf_r+0xe4>
 8003654:	2300      	movs	r3, #0
 8003656:	9309      	str	r3, [sp, #36]	; 0x24
 8003658:	2320      	movs	r3, #32
 800365a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800365e:	2330      	movs	r3, #48	; 0x30
 8003660:	f04f 0b01 	mov.w	fp, #1
 8003664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003668:	9503      	str	r5, [sp, #12]
 800366a:	46b8      	mov	r8, r7
 800366c:	4645      	mov	r5, r8
 800366e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003672:	b10b      	cbz	r3, 8003678 <_vfiprintf_r+0x50>
 8003674:	2b25      	cmp	r3, #37	; 0x25
 8003676:	d154      	bne.n	8003722 <_vfiprintf_r+0xfa>
 8003678:	ebb8 0a07 	subs.w	sl, r8, r7
 800367c:	d00b      	beq.n	8003696 <_vfiprintf_r+0x6e>
 800367e:	4653      	mov	r3, sl
 8003680:	463a      	mov	r2, r7
 8003682:	4621      	mov	r1, r4
 8003684:	4630      	mov	r0, r6
 8003686:	f7ff ffbc 	bl	8003602 <__sfputs_r>
 800368a:	3001      	adds	r0, #1
 800368c:	f000 80c2 	beq.w	8003814 <_vfiprintf_r+0x1ec>
 8003690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003692:	4453      	add	r3, sl
 8003694:	9309      	str	r3, [sp, #36]	; 0x24
 8003696:	f898 3000 	ldrb.w	r3, [r8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80ba 	beq.w	8003814 <_vfiprintf_r+0x1ec>
 80036a0:	2300      	movs	r3, #0
 80036a2:	f04f 32ff 	mov.w	r2, #4294967295
 80036a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036aa:	9304      	str	r3, [sp, #16]
 80036ac:	9307      	str	r3, [sp, #28]
 80036ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036b2:	931a      	str	r3, [sp, #104]	; 0x68
 80036b4:	46a8      	mov	r8, r5
 80036b6:	2205      	movs	r2, #5
 80036b8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80036bc:	485e      	ldr	r0, [pc, #376]	; (8003838 <_vfiprintf_r+0x210>)
 80036be:	f000 fafb 	bl	8003cb8 <memchr>
 80036c2:	9b04      	ldr	r3, [sp, #16]
 80036c4:	bb78      	cbnz	r0, 8003726 <_vfiprintf_r+0xfe>
 80036c6:	06d9      	lsls	r1, r3, #27
 80036c8:	bf44      	itt	mi
 80036ca:	2220      	movmi	r2, #32
 80036cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036d0:	071a      	lsls	r2, r3, #28
 80036d2:	bf44      	itt	mi
 80036d4:	222b      	movmi	r2, #43	; 0x2b
 80036d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036da:	782a      	ldrb	r2, [r5, #0]
 80036dc:	2a2a      	cmp	r2, #42	; 0x2a
 80036de:	d02a      	beq.n	8003736 <_vfiprintf_r+0x10e>
 80036e0:	46a8      	mov	r8, r5
 80036e2:	2000      	movs	r0, #0
 80036e4:	250a      	movs	r5, #10
 80036e6:	9a07      	ldr	r2, [sp, #28]
 80036e8:	4641      	mov	r1, r8
 80036ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036ee:	3b30      	subs	r3, #48	; 0x30
 80036f0:	2b09      	cmp	r3, #9
 80036f2:	d969      	bls.n	80037c8 <_vfiprintf_r+0x1a0>
 80036f4:	b360      	cbz	r0, 8003750 <_vfiprintf_r+0x128>
 80036f6:	e024      	b.n	8003742 <_vfiprintf_r+0x11a>
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <_vfiprintf_r+0x214>)
 80036fa:	429c      	cmp	r4, r3
 80036fc:	d101      	bne.n	8003702 <_vfiprintf_r+0xda>
 80036fe:	68b4      	ldr	r4, [r6, #8]
 8003700:	e7a2      	b.n	8003648 <_vfiprintf_r+0x20>
 8003702:	4b4f      	ldr	r3, [pc, #316]	; (8003840 <_vfiprintf_r+0x218>)
 8003704:	429c      	cmp	r4, r3
 8003706:	bf08      	it	eq
 8003708:	68f4      	ldreq	r4, [r6, #12]
 800370a:	e79d      	b.n	8003648 <_vfiprintf_r+0x20>
 800370c:	4621      	mov	r1, r4
 800370e:	4630      	mov	r0, r6
 8003710:	f7ff fc70 	bl	8002ff4 <__swsetup_r>
 8003714:	2800      	cmp	r0, #0
 8003716:	d09d      	beq.n	8003654 <_vfiprintf_r+0x2c>
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	b01d      	add	sp, #116	; 0x74
 800371e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003722:	46a8      	mov	r8, r5
 8003724:	e7a2      	b.n	800366c <_vfiprintf_r+0x44>
 8003726:	4a44      	ldr	r2, [pc, #272]	; (8003838 <_vfiprintf_r+0x210>)
 8003728:	4645      	mov	r5, r8
 800372a:	1a80      	subs	r0, r0, r2
 800372c:	fa0b f000 	lsl.w	r0, fp, r0
 8003730:	4318      	orrs	r0, r3
 8003732:	9004      	str	r0, [sp, #16]
 8003734:	e7be      	b.n	80036b4 <_vfiprintf_r+0x8c>
 8003736:	9a03      	ldr	r2, [sp, #12]
 8003738:	1d11      	adds	r1, r2, #4
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	9103      	str	r1, [sp, #12]
 800373e:	2a00      	cmp	r2, #0
 8003740:	db01      	blt.n	8003746 <_vfiprintf_r+0x11e>
 8003742:	9207      	str	r2, [sp, #28]
 8003744:	e004      	b.n	8003750 <_vfiprintf_r+0x128>
 8003746:	4252      	negs	r2, r2
 8003748:	f043 0302 	orr.w	r3, r3, #2
 800374c:	9207      	str	r2, [sp, #28]
 800374e:	9304      	str	r3, [sp, #16]
 8003750:	f898 3000 	ldrb.w	r3, [r8]
 8003754:	2b2e      	cmp	r3, #46	; 0x2e
 8003756:	d10e      	bne.n	8003776 <_vfiprintf_r+0x14e>
 8003758:	f898 3001 	ldrb.w	r3, [r8, #1]
 800375c:	2b2a      	cmp	r3, #42	; 0x2a
 800375e:	d138      	bne.n	80037d2 <_vfiprintf_r+0x1aa>
 8003760:	9b03      	ldr	r3, [sp, #12]
 8003762:	f108 0802 	add.w	r8, r8, #2
 8003766:	1d1a      	adds	r2, r3, #4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	9203      	str	r2, [sp, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	bfb8      	it	lt
 8003770:	f04f 33ff 	movlt.w	r3, #4294967295
 8003774:	9305      	str	r3, [sp, #20]
 8003776:	4d33      	ldr	r5, [pc, #204]	; (8003844 <_vfiprintf_r+0x21c>)
 8003778:	2203      	movs	r2, #3
 800377a:	f898 1000 	ldrb.w	r1, [r8]
 800377e:	4628      	mov	r0, r5
 8003780:	f000 fa9a 	bl	8003cb8 <memchr>
 8003784:	b140      	cbz	r0, 8003798 <_vfiprintf_r+0x170>
 8003786:	2340      	movs	r3, #64	; 0x40
 8003788:	1b40      	subs	r0, r0, r5
 800378a:	fa03 f000 	lsl.w	r0, r3, r0
 800378e:	9b04      	ldr	r3, [sp, #16]
 8003790:	f108 0801 	add.w	r8, r8, #1
 8003794:	4303      	orrs	r3, r0
 8003796:	9304      	str	r3, [sp, #16]
 8003798:	f898 1000 	ldrb.w	r1, [r8]
 800379c:	2206      	movs	r2, #6
 800379e:	482a      	ldr	r0, [pc, #168]	; (8003848 <_vfiprintf_r+0x220>)
 80037a0:	f108 0701 	add.w	r7, r8, #1
 80037a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037a8:	f000 fa86 	bl	8003cb8 <memchr>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d037      	beq.n	8003820 <_vfiprintf_r+0x1f8>
 80037b0:	4b26      	ldr	r3, [pc, #152]	; (800384c <_vfiprintf_r+0x224>)
 80037b2:	bb1b      	cbnz	r3, 80037fc <_vfiprintf_r+0x1d4>
 80037b4:	9b03      	ldr	r3, [sp, #12]
 80037b6:	3307      	adds	r3, #7
 80037b8:	f023 0307 	bic.w	r3, r3, #7
 80037bc:	3308      	adds	r3, #8
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c2:	444b      	add	r3, r9
 80037c4:	9309      	str	r3, [sp, #36]	; 0x24
 80037c6:	e750      	b.n	800366a <_vfiprintf_r+0x42>
 80037c8:	fb05 3202 	mla	r2, r5, r2, r3
 80037cc:	2001      	movs	r0, #1
 80037ce:	4688      	mov	r8, r1
 80037d0:	e78a      	b.n	80036e8 <_vfiprintf_r+0xc0>
 80037d2:	2300      	movs	r3, #0
 80037d4:	250a      	movs	r5, #10
 80037d6:	4619      	mov	r1, r3
 80037d8:	f108 0801 	add.w	r8, r8, #1
 80037dc:	9305      	str	r3, [sp, #20]
 80037de:	4640      	mov	r0, r8
 80037e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037e4:	3a30      	subs	r2, #48	; 0x30
 80037e6:	2a09      	cmp	r2, #9
 80037e8:	d903      	bls.n	80037f2 <_vfiprintf_r+0x1ca>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0c3      	beq.n	8003776 <_vfiprintf_r+0x14e>
 80037ee:	9105      	str	r1, [sp, #20]
 80037f0:	e7c1      	b.n	8003776 <_vfiprintf_r+0x14e>
 80037f2:	fb05 2101 	mla	r1, r5, r1, r2
 80037f6:	2301      	movs	r3, #1
 80037f8:	4680      	mov	r8, r0
 80037fa:	e7f0      	b.n	80037de <_vfiprintf_r+0x1b6>
 80037fc:	ab03      	add	r3, sp, #12
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	4622      	mov	r2, r4
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <_vfiprintf_r+0x228>)
 8003804:	a904      	add	r1, sp, #16
 8003806:	4630      	mov	r0, r6
 8003808:	f3af 8000 	nop.w
 800380c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003810:	4681      	mov	r9, r0
 8003812:	d1d5      	bne.n	80037c0 <_vfiprintf_r+0x198>
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	065b      	lsls	r3, r3, #25
 8003818:	f53f af7e 	bmi.w	8003718 <_vfiprintf_r+0xf0>
 800381c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800381e:	e77d      	b.n	800371c <_vfiprintf_r+0xf4>
 8003820:	ab03      	add	r3, sp, #12
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	4622      	mov	r2, r4
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <_vfiprintf_r+0x228>)
 8003828:	a904      	add	r1, sp, #16
 800382a:	4630      	mov	r0, r6
 800382c:	f000 f888 	bl	8003940 <_printf_i>
 8003830:	e7ec      	b.n	800380c <_vfiprintf_r+0x1e4>
 8003832:	bf00      	nop
 8003834:	08003e74 	.word	0x08003e74
 8003838:	08003eb4 	.word	0x08003eb4
 800383c:	08003e94 	.word	0x08003e94
 8003840:	08003e54 	.word	0x08003e54
 8003844:	08003eba 	.word	0x08003eba
 8003848:	08003ebe 	.word	0x08003ebe
 800384c:	00000000 	.word	0x00000000
 8003850:	08003603 	.word	0x08003603

08003854 <_printf_common>:
 8003854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003858:	4691      	mov	r9, r2
 800385a:	461f      	mov	r7, r3
 800385c:	688a      	ldr	r2, [r1, #8]
 800385e:	690b      	ldr	r3, [r1, #16]
 8003860:	4606      	mov	r6, r0
 8003862:	4293      	cmp	r3, r2
 8003864:	bfb8      	it	lt
 8003866:	4613      	movlt	r3, r2
 8003868:	f8c9 3000 	str.w	r3, [r9]
 800386c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003870:	460c      	mov	r4, r1
 8003872:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003876:	b112      	cbz	r2, 800387e <_printf_common+0x2a>
 8003878:	3301      	adds	r3, #1
 800387a:	f8c9 3000 	str.w	r3, [r9]
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	0699      	lsls	r1, r3, #26
 8003882:	bf42      	ittt	mi
 8003884:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003888:	3302      	addmi	r3, #2
 800388a:	f8c9 3000 	strmi.w	r3, [r9]
 800388e:	6825      	ldr	r5, [r4, #0]
 8003890:	f015 0506 	ands.w	r5, r5, #6
 8003894:	d107      	bne.n	80038a6 <_printf_common+0x52>
 8003896:	f104 0a19 	add.w	sl, r4, #25
 800389a:	68e3      	ldr	r3, [r4, #12]
 800389c:	f8d9 2000 	ldr.w	r2, [r9]
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	42ab      	cmp	r3, r5
 80038a4:	dc29      	bgt.n	80038fa <_printf_common+0xa6>
 80038a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80038aa:	6822      	ldr	r2, [r4, #0]
 80038ac:	3300      	adds	r3, #0
 80038ae:	bf18      	it	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	0692      	lsls	r2, r2, #26
 80038b4:	d42e      	bmi.n	8003914 <_printf_common+0xc0>
 80038b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038ba:	4639      	mov	r1, r7
 80038bc:	4630      	mov	r0, r6
 80038be:	47c0      	blx	r8
 80038c0:	3001      	adds	r0, #1
 80038c2:	d021      	beq.n	8003908 <_printf_common+0xb4>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	68e5      	ldr	r5, [r4, #12]
 80038c8:	f003 0306 	and.w	r3, r3, #6
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	bf18      	it	ne
 80038d0:	2500      	movne	r5, #0
 80038d2:	f8d9 2000 	ldr.w	r2, [r9]
 80038d6:	f04f 0900 	mov.w	r9, #0
 80038da:	bf08      	it	eq
 80038dc:	1aad      	subeq	r5, r5, r2
 80038de:	68a3      	ldr	r3, [r4, #8]
 80038e0:	6922      	ldr	r2, [r4, #16]
 80038e2:	bf08      	it	eq
 80038e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e8:	4293      	cmp	r3, r2
 80038ea:	bfc4      	itt	gt
 80038ec:	1a9b      	subgt	r3, r3, r2
 80038ee:	18ed      	addgt	r5, r5, r3
 80038f0:	341a      	adds	r4, #26
 80038f2:	454d      	cmp	r5, r9
 80038f4:	d11a      	bne.n	800392c <_printf_common+0xd8>
 80038f6:	2000      	movs	r0, #0
 80038f8:	e008      	b.n	800390c <_printf_common+0xb8>
 80038fa:	2301      	movs	r3, #1
 80038fc:	4652      	mov	r2, sl
 80038fe:	4639      	mov	r1, r7
 8003900:	4630      	mov	r0, r6
 8003902:	47c0      	blx	r8
 8003904:	3001      	adds	r0, #1
 8003906:	d103      	bne.n	8003910 <_printf_common+0xbc>
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
 800390c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003910:	3501      	adds	r5, #1
 8003912:	e7c2      	b.n	800389a <_printf_common+0x46>
 8003914:	2030      	movs	r0, #48	; 0x30
 8003916:	18e1      	adds	r1, r4, r3
 8003918:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003922:	4422      	add	r2, r4
 8003924:	3302      	adds	r3, #2
 8003926:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800392a:	e7c4      	b.n	80038b6 <_printf_common+0x62>
 800392c:	2301      	movs	r3, #1
 800392e:	4622      	mov	r2, r4
 8003930:	4639      	mov	r1, r7
 8003932:	4630      	mov	r0, r6
 8003934:	47c0      	blx	r8
 8003936:	3001      	adds	r0, #1
 8003938:	d0e6      	beq.n	8003908 <_printf_common+0xb4>
 800393a:	f109 0901 	add.w	r9, r9, #1
 800393e:	e7d8      	b.n	80038f2 <_printf_common+0x9e>

08003940 <_printf_i>:
 8003940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003944:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003948:	460c      	mov	r4, r1
 800394a:	7e09      	ldrb	r1, [r1, #24]
 800394c:	b085      	sub	sp, #20
 800394e:	296e      	cmp	r1, #110	; 0x6e
 8003950:	4617      	mov	r7, r2
 8003952:	4606      	mov	r6, r0
 8003954:	4698      	mov	r8, r3
 8003956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003958:	f000 80b3 	beq.w	8003ac2 <_printf_i+0x182>
 800395c:	d822      	bhi.n	80039a4 <_printf_i+0x64>
 800395e:	2963      	cmp	r1, #99	; 0x63
 8003960:	d036      	beq.n	80039d0 <_printf_i+0x90>
 8003962:	d80a      	bhi.n	800397a <_printf_i+0x3a>
 8003964:	2900      	cmp	r1, #0
 8003966:	f000 80b9 	beq.w	8003adc <_printf_i+0x19c>
 800396a:	2958      	cmp	r1, #88	; 0x58
 800396c:	f000 8083 	beq.w	8003a76 <_printf_i+0x136>
 8003970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003974:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003978:	e032      	b.n	80039e0 <_printf_i+0xa0>
 800397a:	2964      	cmp	r1, #100	; 0x64
 800397c:	d001      	beq.n	8003982 <_printf_i+0x42>
 800397e:	2969      	cmp	r1, #105	; 0x69
 8003980:	d1f6      	bne.n	8003970 <_printf_i+0x30>
 8003982:	6820      	ldr	r0, [r4, #0]
 8003984:	6813      	ldr	r3, [r2, #0]
 8003986:	0605      	lsls	r5, r0, #24
 8003988:	f103 0104 	add.w	r1, r3, #4
 800398c:	d52a      	bpl.n	80039e4 <_printf_i+0xa4>
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6011      	str	r1, [r2, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	da03      	bge.n	800399e <_printf_i+0x5e>
 8003996:	222d      	movs	r2, #45	; 0x2d
 8003998:	425b      	negs	r3, r3
 800399a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800399e:	486f      	ldr	r0, [pc, #444]	; (8003b5c <_printf_i+0x21c>)
 80039a0:	220a      	movs	r2, #10
 80039a2:	e039      	b.n	8003a18 <_printf_i+0xd8>
 80039a4:	2973      	cmp	r1, #115	; 0x73
 80039a6:	f000 809d 	beq.w	8003ae4 <_printf_i+0x1a4>
 80039aa:	d808      	bhi.n	80039be <_printf_i+0x7e>
 80039ac:	296f      	cmp	r1, #111	; 0x6f
 80039ae:	d020      	beq.n	80039f2 <_printf_i+0xb2>
 80039b0:	2970      	cmp	r1, #112	; 0x70
 80039b2:	d1dd      	bne.n	8003970 <_printf_i+0x30>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	f043 0320 	orr.w	r3, r3, #32
 80039ba:	6023      	str	r3, [r4, #0]
 80039bc:	e003      	b.n	80039c6 <_printf_i+0x86>
 80039be:	2975      	cmp	r1, #117	; 0x75
 80039c0:	d017      	beq.n	80039f2 <_printf_i+0xb2>
 80039c2:	2978      	cmp	r1, #120	; 0x78
 80039c4:	d1d4      	bne.n	8003970 <_printf_i+0x30>
 80039c6:	2378      	movs	r3, #120	; 0x78
 80039c8:	4865      	ldr	r0, [pc, #404]	; (8003b60 <_printf_i+0x220>)
 80039ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039ce:	e055      	b.n	8003a7c <_printf_i+0x13c>
 80039d0:	6813      	ldr	r3, [r2, #0]
 80039d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d6:	1d19      	adds	r1, r3, #4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6011      	str	r1, [r2, #0]
 80039dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039e0:	2301      	movs	r3, #1
 80039e2:	e08c      	b.n	8003afe <_printf_i+0x1be>
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039ea:	6011      	str	r1, [r2, #0]
 80039ec:	bf18      	it	ne
 80039ee:	b21b      	sxthne	r3, r3
 80039f0:	e7cf      	b.n	8003992 <_printf_i+0x52>
 80039f2:	6813      	ldr	r3, [r2, #0]
 80039f4:	6825      	ldr	r5, [r4, #0]
 80039f6:	1d18      	adds	r0, r3, #4
 80039f8:	6010      	str	r0, [r2, #0]
 80039fa:	0628      	lsls	r0, r5, #24
 80039fc:	d501      	bpl.n	8003a02 <_printf_i+0xc2>
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	e002      	b.n	8003a08 <_printf_i+0xc8>
 8003a02:	0668      	lsls	r0, r5, #25
 8003a04:	d5fb      	bpl.n	80039fe <_printf_i+0xbe>
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	296f      	cmp	r1, #111	; 0x6f
 8003a0a:	bf14      	ite	ne
 8003a0c:	220a      	movne	r2, #10
 8003a0e:	2208      	moveq	r2, #8
 8003a10:	4852      	ldr	r0, [pc, #328]	; (8003b5c <_printf_i+0x21c>)
 8003a12:	2100      	movs	r1, #0
 8003a14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a18:	6865      	ldr	r5, [r4, #4]
 8003a1a:	2d00      	cmp	r5, #0
 8003a1c:	60a5      	str	r5, [r4, #8]
 8003a1e:	f2c0 8095 	blt.w	8003b4c <_printf_i+0x20c>
 8003a22:	6821      	ldr	r1, [r4, #0]
 8003a24:	f021 0104 	bic.w	r1, r1, #4
 8003a28:	6021      	str	r1, [r4, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d13d      	bne.n	8003aaa <_printf_i+0x16a>
 8003a2e:	2d00      	cmp	r5, #0
 8003a30:	f040 808e 	bne.w	8003b50 <_printf_i+0x210>
 8003a34:	4665      	mov	r5, ip
 8003a36:	2a08      	cmp	r2, #8
 8003a38:	d10b      	bne.n	8003a52 <_printf_i+0x112>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	07db      	lsls	r3, r3, #31
 8003a3e:	d508      	bpl.n	8003a52 <_printf_i+0x112>
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	6862      	ldr	r2, [r4, #4]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	bfde      	ittt	le
 8003a48:	2330      	movle	r3, #48	; 0x30
 8003a4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a52:	ebac 0305 	sub.w	r3, ip, r5
 8003a56:	6123      	str	r3, [r4, #16]
 8003a58:	f8cd 8000 	str.w	r8, [sp]
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	aa03      	add	r2, sp, #12
 8003a60:	4621      	mov	r1, r4
 8003a62:	4630      	mov	r0, r6
 8003a64:	f7ff fef6 	bl	8003854 <_printf_common>
 8003a68:	3001      	adds	r0, #1
 8003a6a:	d14d      	bne.n	8003b08 <_printf_i+0x1c8>
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	b005      	add	sp, #20
 8003a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a76:	4839      	ldr	r0, [pc, #228]	; (8003b5c <_printf_i+0x21c>)
 8003a78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003a7c:	6813      	ldr	r3, [r2, #0]
 8003a7e:	6821      	ldr	r1, [r4, #0]
 8003a80:	1d1d      	adds	r5, r3, #4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6015      	str	r5, [r2, #0]
 8003a86:	060a      	lsls	r2, r1, #24
 8003a88:	d50b      	bpl.n	8003aa2 <_printf_i+0x162>
 8003a8a:	07ca      	lsls	r2, r1, #31
 8003a8c:	bf44      	itt	mi
 8003a8e:	f041 0120 	orrmi.w	r1, r1, #32
 8003a92:	6021      	strmi	r1, [r4, #0]
 8003a94:	b91b      	cbnz	r3, 8003a9e <_printf_i+0x15e>
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	f022 0220 	bic.w	r2, r2, #32
 8003a9c:	6022      	str	r2, [r4, #0]
 8003a9e:	2210      	movs	r2, #16
 8003aa0:	e7b7      	b.n	8003a12 <_printf_i+0xd2>
 8003aa2:	064d      	lsls	r5, r1, #25
 8003aa4:	bf48      	it	mi
 8003aa6:	b29b      	uxthmi	r3, r3
 8003aa8:	e7ef      	b.n	8003a8a <_printf_i+0x14a>
 8003aaa:	4665      	mov	r5, ip
 8003aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ab0:	fb02 3311 	mls	r3, r2, r1, r3
 8003ab4:	5cc3      	ldrb	r3, [r0, r3]
 8003ab6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003aba:	460b      	mov	r3, r1
 8003abc:	2900      	cmp	r1, #0
 8003abe:	d1f5      	bne.n	8003aac <_printf_i+0x16c>
 8003ac0:	e7b9      	b.n	8003a36 <_printf_i+0xf6>
 8003ac2:	6813      	ldr	r3, [r2, #0]
 8003ac4:	6825      	ldr	r5, [r4, #0]
 8003ac6:	1d18      	adds	r0, r3, #4
 8003ac8:	6961      	ldr	r1, [r4, #20]
 8003aca:	6010      	str	r0, [r2, #0]
 8003acc:	0628      	lsls	r0, r5, #24
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	d501      	bpl.n	8003ad6 <_printf_i+0x196>
 8003ad2:	6019      	str	r1, [r3, #0]
 8003ad4:	e002      	b.n	8003adc <_printf_i+0x19c>
 8003ad6:	066a      	lsls	r2, r5, #25
 8003ad8:	d5fb      	bpl.n	8003ad2 <_printf_i+0x192>
 8003ada:	8019      	strh	r1, [r3, #0]
 8003adc:	2300      	movs	r3, #0
 8003ade:	4665      	mov	r5, ip
 8003ae0:	6123      	str	r3, [r4, #16]
 8003ae2:	e7b9      	b.n	8003a58 <_printf_i+0x118>
 8003ae4:	6813      	ldr	r3, [r2, #0]
 8003ae6:	1d19      	adds	r1, r3, #4
 8003ae8:	6011      	str	r1, [r2, #0]
 8003aea:	681d      	ldr	r5, [r3, #0]
 8003aec:	6862      	ldr	r2, [r4, #4]
 8003aee:	2100      	movs	r1, #0
 8003af0:	4628      	mov	r0, r5
 8003af2:	f000 f8e1 	bl	8003cb8 <memchr>
 8003af6:	b108      	cbz	r0, 8003afc <_printf_i+0x1bc>
 8003af8:	1b40      	subs	r0, r0, r5
 8003afa:	6060      	str	r0, [r4, #4]
 8003afc:	6863      	ldr	r3, [r4, #4]
 8003afe:	6123      	str	r3, [r4, #16]
 8003b00:	2300      	movs	r3, #0
 8003b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b06:	e7a7      	b.n	8003a58 <_printf_i+0x118>
 8003b08:	6923      	ldr	r3, [r4, #16]
 8003b0a:	462a      	mov	r2, r5
 8003b0c:	4639      	mov	r1, r7
 8003b0e:	4630      	mov	r0, r6
 8003b10:	47c0      	blx	r8
 8003b12:	3001      	adds	r0, #1
 8003b14:	d0aa      	beq.n	8003a6c <_printf_i+0x12c>
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	079b      	lsls	r3, r3, #30
 8003b1a:	d413      	bmi.n	8003b44 <_printf_i+0x204>
 8003b1c:	68e0      	ldr	r0, [r4, #12]
 8003b1e:	9b03      	ldr	r3, [sp, #12]
 8003b20:	4298      	cmp	r0, r3
 8003b22:	bfb8      	it	lt
 8003b24:	4618      	movlt	r0, r3
 8003b26:	e7a3      	b.n	8003a70 <_printf_i+0x130>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	464a      	mov	r2, r9
 8003b2c:	4639      	mov	r1, r7
 8003b2e:	4630      	mov	r0, r6
 8003b30:	47c0      	blx	r8
 8003b32:	3001      	adds	r0, #1
 8003b34:	d09a      	beq.n	8003a6c <_printf_i+0x12c>
 8003b36:	3501      	adds	r5, #1
 8003b38:	68e3      	ldr	r3, [r4, #12]
 8003b3a:	9a03      	ldr	r2, [sp, #12]
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	42ab      	cmp	r3, r5
 8003b40:	dcf2      	bgt.n	8003b28 <_printf_i+0x1e8>
 8003b42:	e7eb      	b.n	8003b1c <_printf_i+0x1dc>
 8003b44:	2500      	movs	r5, #0
 8003b46:	f104 0919 	add.w	r9, r4, #25
 8003b4a:	e7f5      	b.n	8003b38 <_printf_i+0x1f8>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ac      	bne.n	8003aaa <_printf_i+0x16a>
 8003b50:	7803      	ldrb	r3, [r0, #0]
 8003b52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b5a:	e76c      	b.n	8003a36 <_printf_i+0xf6>
 8003b5c:	08003ec5 	.word	0x08003ec5
 8003b60:	08003ed6 	.word	0x08003ed6

08003b64 <_sbrk_r>:
 8003b64:	b538      	push	{r3, r4, r5, lr}
 8003b66:	2300      	movs	r3, #0
 8003b68:	4c05      	ldr	r4, [pc, #20]	; (8003b80 <_sbrk_r+0x1c>)
 8003b6a:	4605      	mov	r5, r0
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	6023      	str	r3, [r4, #0]
 8003b70:	f7fd fbda 	bl	8001328 <_sbrk>
 8003b74:	1c43      	adds	r3, r0, #1
 8003b76:	d102      	bne.n	8003b7e <_sbrk_r+0x1a>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	b103      	cbz	r3, 8003b7e <_sbrk_r+0x1a>
 8003b7c:	602b      	str	r3, [r5, #0]
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
 8003b80:	20000280 	.word	0x20000280

08003b84 <__sread>:
 8003b84:	b510      	push	{r4, lr}
 8003b86:	460c      	mov	r4, r1
 8003b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b8c:	f000 f8a4 	bl	8003cd8 <_read_r>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	bfab      	itete	ge
 8003b94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b96:	89a3      	ldrhlt	r3, [r4, #12]
 8003b98:	181b      	addge	r3, r3, r0
 8003b9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b9e:	bfac      	ite	ge
 8003ba0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ba2:	81a3      	strhlt	r3, [r4, #12]
 8003ba4:	bd10      	pop	{r4, pc}

08003ba6 <__swrite>:
 8003ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003baa:	461f      	mov	r7, r3
 8003bac:	898b      	ldrh	r3, [r1, #12]
 8003bae:	4605      	mov	r5, r0
 8003bb0:	05db      	lsls	r3, r3, #23
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	4616      	mov	r6, r2
 8003bb6:	d505      	bpl.n	8003bc4 <__swrite+0x1e>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc0:	f000 f868 	bl	8003c94 <_lseek_r>
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	4632      	mov	r2, r6
 8003bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bcc:	81a3      	strh	r3, [r4, #12]
 8003bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bd2:	463b      	mov	r3, r7
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bda:	f000 b817 	b.w	8003c0c <_write_r>

08003bde <__sseek>:
 8003bde:	b510      	push	{r4, lr}
 8003be0:	460c      	mov	r4, r1
 8003be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003be6:	f000 f855 	bl	8003c94 <_lseek_r>
 8003bea:	1c43      	adds	r3, r0, #1
 8003bec:	89a3      	ldrh	r3, [r4, #12]
 8003bee:	bf15      	itete	ne
 8003bf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003bf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003bf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003bfa:	81a3      	strheq	r3, [r4, #12]
 8003bfc:	bf18      	it	ne
 8003bfe:	81a3      	strhne	r3, [r4, #12]
 8003c00:	bd10      	pop	{r4, pc}

08003c02 <__sclose>:
 8003c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c06:	f000 b813 	b.w	8003c30 <_close_r>
	...

08003c0c <_write_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	4605      	mov	r5, r0
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	2200      	movs	r2, #0
 8003c16:	4c05      	ldr	r4, [pc, #20]	; (8003c2c <_write_r+0x20>)
 8003c18:	6022      	str	r2, [r4, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f7fd fb37 	bl	800128e <_write>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d102      	bne.n	8003c2a <_write_r+0x1e>
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	b103      	cbz	r3, 8003c2a <_write_r+0x1e>
 8003c28:	602b      	str	r3, [r5, #0]
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	20000280 	.word	0x20000280

08003c30 <_close_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	2300      	movs	r3, #0
 8003c34:	4c05      	ldr	r4, [pc, #20]	; (8003c4c <_close_r+0x1c>)
 8003c36:	4605      	mov	r5, r0
 8003c38:	4608      	mov	r0, r1
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	f7fd fb43 	bl	80012c6 <_close>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d102      	bne.n	8003c4a <_close_r+0x1a>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	b103      	cbz	r3, 8003c4a <_close_r+0x1a>
 8003c48:	602b      	str	r3, [r5, #0]
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	20000280 	.word	0x20000280

08003c50 <_fstat_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	2300      	movs	r3, #0
 8003c54:	4c06      	ldr	r4, [pc, #24]	; (8003c70 <_fstat_r+0x20>)
 8003c56:	4605      	mov	r5, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	f7fd fb3d 	bl	80012dc <_fstat>
 8003c62:	1c43      	adds	r3, r0, #1
 8003c64:	d102      	bne.n	8003c6c <_fstat_r+0x1c>
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	b103      	cbz	r3, 8003c6c <_fstat_r+0x1c>
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	bd38      	pop	{r3, r4, r5, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000280 	.word	0x20000280

08003c74 <_isatty_r>:
 8003c74:	b538      	push	{r3, r4, r5, lr}
 8003c76:	2300      	movs	r3, #0
 8003c78:	4c05      	ldr	r4, [pc, #20]	; (8003c90 <_isatty_r+0x1c>)
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	6023      	str	r3, [r4, #0]
 8003c80:	f7fd fb3b 	bl	80012fa <_isatty>
 8003c84:	1c43      	adds	r3, r0, #1
 8003c86:	d102      	bne.n	8003c8e <_isatty_r+0x1a>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	b103      	cbz	r3, 8003c8e <_isatty_r+0x1a>
 8003c8c:	602b      	str	r3, [r5, #0]
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
 8003c90:	20000280 	.word	0x20000280

08003c94 <_lseek_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4605      	mov	r5, r0
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	4c05      	ldr	r4, [pc, #20]	; (8003cb4 <_lseek_r+0x20>)
 8003ca0:	6022      	str	r2, [r4, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f7fd fb33 	bl	800130e <_lseek>
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	d102      	bne.n	8003cb2 <_lseek_r+0x1e>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	b103      	cbz	r3, 8003cb2 <_lseek_r+0x1e>
 8003cb0:	602b      	str	r3, [r5, #0]
 8003cb2:	bd38      	pop	{r3, r4, r5, pc}
 8003cb4:	20000280 	.word	0x20000280

08003cb8 <memchr>:
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	b2c9      	uxtb	r1, r1
 8003cbc:	4402      	add	r2, r0
 8003cbe:	4290      	cmp	r0, r2
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	d101      	bne.n	8003cc8 <memchr+0x10>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e003      	b.n	8003cd0 <memchr+0x18>
 8003cc8:	781c      	ldrb	r4, [r3, #0]
 8003cca:	3001      	adds	r0, #1
 8003ccc:	428c      	cmp	r4, r1
 8003cce:	d1f6      	bne.n	8003cbe <memchr+0x6>
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd10      	pop	{r4, pc}

08003cd4 <__malloc_lock>:
 8003cd4:	4770      	bx	lr

08003cd6 <__malloc_unlock>:
 8003cd6:	4770      	bx	lr

08003cd8 <_read_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4605      	mov	r5, r0
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	4c05      	ldr	r4, [pc, #20]	; (8003cf8 <_read_r+0x20>)
 8003ce4:	6022      	str	r2, [r4, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f7fd fab4 	bl	8001254 <_read>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_read_r+0x1e>
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_read_r+0x1e>
 8003cf4:	602b      	str	r3, [r5, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	20000280 	.word	0x20000280

08003cfc <_init>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	bf00      	nop
 8003d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d02:	bc08      	pop	{r3}
 8003d04:	469e      	mov	lr, r3
 8003d06:	4770      	bx	lr

08003d08 <_fini>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	bf00      	nop
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr
