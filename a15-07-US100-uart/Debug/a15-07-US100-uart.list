
a15-07-US100-uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08003b90  08003b90  00013b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d04  08003d04  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d04  08003d04  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d04  08003d04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000070  08003d7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003d7c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bad7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a97  00000000  00000000  0002bb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002d608  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  0002e248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186f3  00000000  00000000  0002ede0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000091b3  00000000  00000000  000474d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b756  00000000  00000000  00050686  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbddc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a54  00000000  00000000  000dbe58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b78 	.word	0x08003b78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003b78 	.word	0x08003b78

0800014c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 fc1c 	bl	800299a <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000214 	.word	0x20000214

08000170 <Uart_Tx_Byte>:


void Uart_Tx_Byte(char TxData, char Parity)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	char chExit = 'n';
 8000180:	236e      	movs	r3, #110	; 0x6e
 8000182:	73fb      	strb	r3, [r7, #15]
	char chComp = 0x01;
 8000184:	2301      	movs	r3, #1
 8000186:	73bb      	strb	r3, [r7, #14]
	int ParityBit_cnt = 0;
 8000188:	2300      	movs	r3, #0
 800018a:	60bb      	str	r3, [r7, #8]

	tim2_cnt = 0;
 800018c:	4ba5      	ldr	r3, [pc, #660]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
	tim2_flag = 'y';
 8000192:	4ba5      	ldr	r3, [pc, #660]	; (8000428 <Uart_Tx_Byte+0x2b8>)
 8000194:	2279      	movs	r2, #121	; 0x79
 8000196:	701a      	strb	r2, [r3, #0]
	tim2_trigger = 'n';
 8000198:	4ba4      	ldr	r3, [pc, #656]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800019a:	226e      	movs	r2, #110	; 0x6e
 800019c:	701a      	strb	r2, [r3, #0]

	while(1){
		if(('y' == tim2_trigger) && (tim2_cnt == 1)){ // idle
 800019e:	4ba3      	ldr	r3, [pc, #652]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b79      	cmp	r3, #121	; 0x79
 80001a4:	d10c      	bne.n	80001c0 <Uart_Tx_Byte+0x50>
 80001a6:	4b9f      	ldr	r3, [pc, #636]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d108      	bne.n	80001c0 <Uart_Tx_Byte+0x50>
			tim2_trigger = 'n';
 80001ae:	4b9f      	ldr	r3, [pc, #636]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001b0:	226e      	movs	r2, #110	; 0x6e
 80001b2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2101      	movs	r1, #1
 80001b8:	489d      	ldr	r0, [pc, #628]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80001ba:	f001 fb44 	bl	8001846 <HAL_GPIO_WritePin>
 80001be:	e18b      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 2)){ // start
 80001c0:	4b9a      	ldr	r3, [pc, #616]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b79      	cmp	r3, #121	; 0x79
 80001c6:	d10c      	bne.n	80001e2 <Uart_Tx_Byte+0x72>
 80001c8:	4b96      	ldr	r3, [pc, #600]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b02      	cmp	r3, #2
 80001ce:	d108      	bne.n	80001e2 <Uart_Tx_Byte+0x72>
			tim2_trigger = 'n';
 80001d0:	4b96      	ldr	r3, [pc, #600]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001d2:	226e      	movs	r2, #110	; 0x6e
 80001d4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2101      	movs	r1, #1
 80001da:	4895      	ldr	r0, [pc, #596]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80001dc:	f001 fb33 	bl	8001846 <HAL_GPIO_WritePin>
 80001e0:	e17a      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 3)){ // bit 0
 80001e2:	4b92      	ldr	r3, [pc, #584]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b79      	cmp	r3, #121	; 0x79
 80001e8:	d11f      	bne.n	800022a <Uart_Tx_Byte+0xba>
 80001ea:	4b8e      	ldr	r3, [pc, #568]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2b03      	cmp	r3, #3
 80001f0:	d11b      	bne.n	800022a <Uart_Tx_Byte+0xba>
			tim2_trigger = 'n';
 80001f2:	4b8e      	ldr	r3, [pc, #568]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001f4:	226e      	movs	r2, #110	; 0x6e
 80001f6:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 80001f8:	79fa      	ldrb	r2, [r7, #7]
 80001fa:	7bbb      	ldrb	r3, [r7, #14]
 80001fc:	4013      	ands	r3, r2
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	7bba      	ldrb	r2, [r7, #14]
 8000202:	429a      	cmp	r2, r3
 8000204:	d108      	bne.n	8000218 <Uart_Tx_Byte+0xa8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2101      	movs	r1, #1
 800020a:	4889      	ldr	r0, [pc, #548]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800020c:	f001 fb1b 	bl	8001846 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	3301      	adds	r3, #1
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	e004      	b.n	8000222 <Uart_Tx_Byte+0xb2>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2101      	movs	r1, #1
 800021c:	4884      	ldr	r0, [pc, #528]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800021e:	f001 fb12 	bl	8001846 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000222:	7bbb      	ldrb	r3, [r7, #14]
 8000224:	005b      	lsls	r3, r3, #1
 8000226:	73bb      	strb	r3, [r7, #14]
 8000228:	e156      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 4)){ // bit 1
 800022a:	4b80      	ldr	r3, [pc, #512]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b79      	cmp	r3, #121	; 0x79
 8000230:	d11f      	bne.n	8000272 <Uart_Tx_Byte+0x102>
 8000232:	4b7c      	ldr	r3, [pc, #496]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b04      	cmp	r3, #4
 8000238:	d11b      	bne.n	8000272 <Uart_Tx_Byte+0x102>
			tim2_trigger = 'n';
 800023a:	4b7c      	ldr	r3, [pc, #496]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800023c:	226e      	movs	r2, #110	; 0x6e
 800023e:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000240:	79fa      	ldrb	r2, [r7, #7]
 8000242:	7bbb      	ldrb	r3, [r7, #14]
 8000244:	4013      	ands	r3, r2
 8000246:	b2db      	uxtb	r3, r3
 8000248:	7bba      	ldrb	r2, [r7, #14]
 800024a:	429a      	cmp	r2, r3
 800024c:	d108      	bne.n	8000260 <Uart_Tx_Byte+0xf0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2101      	movs	r1, #1
 8000252:	4877      	ldr	r0, [pc, #476]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000254:	f001 faf7 	bl	8001846 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	3301      	adds	r3, #1
 800025c:	60bb      	str	r3, [r7, #8]
 800025e:	e004      	b.n	800026a <Uart_Tx_Byte+0xfa>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	2101      	movs	r1, #1
 8000264:	4872      	ldr	r0, [pc, #456]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000266:	f001 faee 	bl	8001846 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 800026a:	7bbb      	ldrb	r3, [r7, #14]
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	73bb      	strb	r3, [r7, #14]
 8000270:	e132      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 5)){ // bit 2
 8000272:	4b6e      	ldr	r3, [pc, #440]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b79      	cmp	r3, #121	; 0x79
 8000278:	d11f      	bne.n	80002ba <Uart_Tx_Byte+0x14a>
 800027a:	4b6a      	ldr	r3, [pc, #424]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b05      	cmp	r3, #5
 8000280:	d11b      	bne.n	80002ba <Uart_Tx_Byte+0x14a>
			tim2_trigger = 'n';
 8000282:	4b6a      	ldr	r3, [pc, #424]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000284:	226e      	movs	r2, #110	; 0x6e
 8000286:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000288:	79fa      	ldrb	r2, [r7, #7]
 800028a:	7bbb      	ldrb	r3, [r7, #14]
 800028c:	4013      	ands	r3, r2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	7bba      	ldrb	r2, [r7, #14]
 8000292:	429a      	cmp	r2, r3
 8000294:	d108      	bne.n	80002a8 <Uart_Tx_Byte+0x138>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2101      	movs	r1, #1
 800029a:	4865      	ldr	r0, [pc, #404]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800029c:	f001 fad3 	bl	8001846 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	e004      	b.n	80002b2 <Uart_Tx_Byte+0x142>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2101      	movs	r1, #1
 80002ac:	4860      	ldr	r0, [pc, #384]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80002ae:	f001 faca 	bl	8001846 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 80002b2:	7bbb      	ldrb	r3, [r7, #14]
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	73bb      	strb	r3, [r7, #14]
 80002b8:	e10e      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 6)){ // bit 3
 80002ba:	4b5c      	ldr	r3, [pc, #368]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b79      	cmp	r3, #121	; 0x79
 80002c0:	d11f      	bne.n	8000302 <Uart_Tx_Byte+0x192>
 80002c2:	4b58      	ldr	r3, [pc, #352]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b06      	cmp	r3, #6
 80002c8:	d11b      	bne.n	8000302 <Uart_Tx_Byte+0x192>
			tim2_trigger = 'n';
 80002ca:	4b58      	ldr	r3, [pc, #352]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80002cc:	226e      	movs	r2, #110	; 0x6e
 80002ce:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 80002d0:	79fa      	ldrb	r2, [r7, #7]
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	4013      	ands	r3, r2
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	7bba      	ldrb	r2, [r7, #14]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d108      	bne.n	80002f0 <Uart_Tx_Byte+0x180>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80002de:	2201      	movs	r2, #1
 80002e0:	2101      	movs	r1, #1
 80002e2:	4853      	ldr	r0, [pc, #332]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80002e4:	f001 faaf 	bl	8001846 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	3301      	adds	r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	e004      	b.n	80002fa <Uart_Tx_Byte+0x18a>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2101      	movs	r1, #1
 80002f4:	484e      	ldr	r0, [pc, #312]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80002f6:	f001 faa6 	bl	8001846 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 80002fa:	7bbb      	ldrb	r3, [r7, #14]
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	73bb      	strb	r3, [r7, #14]
 8000300:	e0ea      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 7)){ // bit 4
 8000302:	4b4a      	ldr	r3, [pc, #296]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b79      	cmp	r3, #121	; 0x79
 8000308:	d11f      	bne.n	800034a <Uart_Tx_Byte+0x1da>
 800030a:	4b46      	ldr	r3, [pc, #280]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b07      	cmp	r3, #7
 8000310:	d11b      	bne.n	800034a <Uart_Tx_Byte+0x1da>
			tim2_trigger = 'n';
 8000312:	4b46      	ldr	r3, [pc, #280]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000314:	226e      	movs	r2, #110	; 0x6e
 8000316:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000318:	79fa      	ldrb	r2, [r7, #7]
 800031a:	7bbb      	ldrb	r3, [r7, #14]
 800031c:	4013      	ands	r3, r2
 800031e:	b2db      	uxtb	r3, r3
 8000320:	7bba      	ldrb	r2, [r7, #14]
 8000322:	429a      	cmp	r2, r3
 8000324:	d108      	bne.n	8000338 <Uart_Tx_Byte+0x1c8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000326:	2201      	movs	r2, #1
 8000328:	2101      	movs	r1, #1
 800032a:	4841      	ldr	r0, [pc, #260]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800032c:	f001 fa8b 	bl	8001846 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	3301      	adds	r3, #1
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	e004      	b.n	8000342 <Uart_Tx_Byte+0x1d2>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	483c      	ldr	r0, [pc, #240]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800033e:	f001 fa82 	bl	8001846 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000342:	7bbb      	ldrb	r3, [r7, #14]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	73bb      	strb	r3, [r7, #14]
 8000348:	e0c6      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 8)){ // bit 5
 800034a:	4b38      	ldr	r3, [pc, #224]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b79      	cmp	r3, #121	; 0x79
 8000350:	d11f      	bne.n	8000392 <Uart_Tx_Byte+0x222>
 8000352:	4b34      	ldr	r3, [pc, #208]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b08      	cmp	r3, #8
 8000358:	d11b      	bne.n	8000392 <Uart_Tx_Byte+0x222>
			tim2_trigger = 'n';
 800035a:	4b34      	ldr	r3, [pc, #208]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800035c:	226e      	movs	r2, #110	; 0x6e
 800035e:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000360:	79fa      	ldrb	r2, [r7, #7]
 8000362:	7bbb      	ldrb	r3, [r7, #14]
 8000364:	4013      	ands	r3, r2
 8000366:	b2db      	uxtb	r3, r3
 8000368:	7bba      	ldrb	r2, [r7, #14]
 800036a:	429a      	cmp	r2, r3
 800036c:	d108      	bne.n	8000380 <Uart_Tx_Byte+0x210>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2101      	movs	r1, #1
 8000372:	482f      	ldr	r0, [pc, #188]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000374:	f001 fa67 	bl	8001846 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	3301      	adds	r3, #1
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	e004      	b.n	800038a <Uart_Tx_Byte+0x21a>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	482a      	ldr	r0, [pc, #168]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000386:	f001 fa5e 	bl	8001846 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 800038a:	7bbb      	ldrb	r3, [r7, #14]
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	73bb      	strb	r3, [r7, #14]
 8000390:	e0a2      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 9)){ // bit 6
 8000392:	4b26      	ldr	r3, [pc, #152]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b79      	cmp	r3, #121	; 0x79
 8000398:	d11f      	bne.n	80003da <Uart_Tx_Byte+0x26a>
 800039a:	4b22      	ldr	r3, [pc, #136]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b09      	cmp	r3, #9
 80003a0:	d11b      	bne.n	80003da <Uart_Tx_Byte+0x26a>
			tim2_trigger = 'n';
 80003a2:	4b22      	ldr	r3, [pc, #136]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80003a4:	226e      	movs	r2, #110	; 0x6e
 80003a6:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 80003a8:	79fa      	ldrb	r2, [r7, #7]
 80003aa:	7bbb      	ldrb	r3, [r7, #14]
 80003ac:	4013      	ands	r3, r2
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	7bba      	ldrb	r2, [r7, #14]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d108      	bne.n	80003c8 <Uart_Tx_Byte+0x258>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2101      	movs	r1, #1
 80003ba:	481d      	ldr	r0, [pc, #116]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80003bc:	f001 fa43 	bl	8001846 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	3301      	adds	r3, #1
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	e004      	b.n	80003d2 <Uart_Tx_Byte+0x262>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2101      	movs	r1, #1
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80003ce:	f001 fa3a 	bl	8001846 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 80003d2:	7bbb      	ldrb	r3, [r7, #14]
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	73bb      	strb	r3, [r7, #14]
 80003d8:	e07e      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 10)){ // bit 7
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b79      	cmp	r3, #121	; 0x79
 80003e0:	d128      	bne.n	8000434 <Uart_Tx_Byte+0x2c4>
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2b0a      	cmp	r3, #10
 80003e8:	d124      	bne.n	8000434 <Uart_Tx_Byte+0x2c4>
			tim2_trigger = 'n';
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80003ec:	226e      	movs	r2, #110	; 0x6e
 80003ee:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	4013      	ands	r3, r2
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	7bba      	ldrb	r2, [r7, #14]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d108      	bne.n	8000410 <Uart_Tx_Byte+0x2a0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	2101      	movs	r1, #1
 8000402:	480b      	ldr	r0, [pc, #44]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000404:	f001 fa1f 	bl	8001846 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	3301      	adds	r3, #1
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	e004      	b.n	800041a <Uart_Tx_Byte+0x2aa>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	4806      	ldr	r0, [pc, #24]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000416:	f001 fa16 	bl	8001846 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 800041a:	7bbb      	ldrb	r3, [r7, #14]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	73bb      	strb	r3, [r7, #14]
 8000420:	e05a      	b.n	80004d8 <Uart_Tx_Byte+0x368>
 8000422:	bf00      	nop
 8000424:	20000168 	.word	0x20000168
 8000428:	20000210 	.word	0x20000210
 800042c:	2000013c 	.word	0x2000013c
 8000430:	40010800 	.word	0x40010800
		}
		else if(('y' == tim2_trigger) && (tim2_cnt == 11)){ // [parity : none/even/odd] or [stop]
 8000434:	4b32      	ldr	r3, [pc, #200]	; (8000500 <Uart_Tx_Byte+0x390>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b79      	cmp	r3, #121	; 0x79
 800043a:	d13c      	bne.n	80004b6 <Uart_Tx_Byte+0x346>
 800043c:	4b31      	ldr	r3, [pc, #196]	; (8000504 <Uart_Tx_Byte+0x394>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b0b      	cmp	r3, #11
 8000442:	d138      	bne.n	80004b6 <Uart_Tx_Byte+0x346>
			tim2_trigger = 'n';
 8000444:	4b2e      	ldr	r3, [pc, #184]	; (8000500 <Uart_Tx_Byte+0x390>)
 8000446:	226e      	movs	r2, #110	; 0x6e
 8000448:	701a      	strb	r2, [r3, #0]

			if(Parity == 'n'){
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	2b6e      	cmp	r3, #110	; 0x6e
 800044e:	d107      	bne.n	8000460 <Uart_Tx_Byte+0x2f0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	482c      	ldr	r0, [pc, #176]	; (8000508 <Uart_Tx_Byte+0x398>)
 8000456:	f001 f9f6 	bl	8001846 <HAL_GPIO_WritePin>
				chExit = 'y';
 800045a:	2379      	movs	r3, #121	; 0x79
 800045c:	73fb      	strb	r3, [r7, #15]
			if(Parity == 'n'){
 800045e:	e03a      	b.n	80004d6 <Uart_Tx_Byte+0x366>
			}else if(Parity == 'e'){
 8000460:	79bb      	ldrb	r3, [r7, #6]
 8000462:	2b65      	cmp	r3, #101	; 0x65
 8000464:	d110      	bne.n	8000488 <Uart_Tx_Byte+0x318>
				if((ParityBit_cnt % 2) == 0){
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	f003 0301 	and.w	r3, r3, #1
 800046c:	2b00      	cmp	r3, #0
 800046e:	d105      	bne.n	800047c <Uart_Tx_Byte+0x30c>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	2101      	movs	r1, #1
 8000474:	4824      	ldr	r0, [pc, #144]	; (8000508 <Uart_Tx_Byte+0x398>)
 8000476:	f001 f9e6 	bl	8001846 <HAL_GPIO_WritePin>
			if(Parity == 'n'){
 800047a:	e02c      	b.n	80004d6 <Uart_Tx_Byte+0x366>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2101      	movs	r1, #1
 8000480:	4821      	ldr	r0, [pc, #132]	; (8000508 <Uart_Tx_Byte+0x398>)
 8000482:	f001 f9e0 	bl	8001846 <HAL_GPIO_WritePin>
			if(Parity == 'n'){
 8000486:	e026      	b.n	80004d6 <Uart_Tx_Byte+0x366>
				}

			}else if(Parity == 'o'){
 8000488:	79bb      	ldrb	r3, [r7, #6]
 800048a:	2b6f      	cmp	r3, #111	; 0x6f
 800048c:	d123      	bne.n	80004d6 <Uart_Tx_Byte+0x366>
				if((ParityBit_cnt % 2) == 1){
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	2b00      	cmp	r3, #0
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	bfb8      	it	lt
 8000498:	425b      	neglt	r3, r3
 800049a:	2b01      	cmp	r3, #1
 800049c:	d105      	bne.n	80004aa <Uart_Tx_Byte+0x33a>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	4819      	ldr	r0, [pc, #100]	; (8000508 <Uart_Tx_Byte+0x398>)
 80004a4:	f001 f9cf 	bl	8001846 <HAL_GPIO_WritePin>
			if(Parity == 'n'){
 80004a8:	e015      	b.n	80004d6 <Uart_Tx_Byte+0x366>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2101      	movs	r1, #1
 80004ae:	4816      	ldr	r0, [pc, #88]	; (8000508 <Uart_Tx_Byte+0x398>)
 80004b0:	f001 f9c9 	bl	8001846 <HAL_GPIO_WritePin>
			if(Parity == 'n'){
 80004b4:	e00f      	b.n	80004d6 <Uart_Tx_Byte+0x366>
			//----- parity bit & stop bit 전송부분 추가 -------------------------------------




		}else if(('y' == tim2_trigger) && (tim2_cnt == 12)){ // stop
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <Uart_Tx_Byte+0x390>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b79      	cmp	r3, #121	; 0x79
 80004bc:	d10c      	bne.n	80004d8 <Uart_Tx_Byte+0x368>
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <Uart_Tx_Byte+0x394>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b0c      	cmp	r3, #12
 80004c4:	d108      	bne.n	80004d8 <Uart_Tx_Byte+0x368>

			//----- 이 부분부터 수정 및 추가 필요 ------------------------------------------
			//----- parity bit & stop bit 전송부분 추가 -------------------------------------

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2101      	movs	r1, #1
 80004ca:	480f      	ldr	r0, [pc, #60]	; (8000508 <Uart_Tx_Byte+0x398>)
 80004cc:	f001 f9bb 	bl	8001846 <HAL_GPIO_WritePin>
			chExit = 'y';
 80004d0:	2379      	movs	r3, #121	; 0x79
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e000      	b.n	80004d8 <Uart_Tx_Byte+0x368>
			if(Parity == 'n'){
 80004d6:	bf00      	nop

		}
		if(('y' == tim2_trigger) && ('y' == chExit)){
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <Uart_Tx_Byte+0x390>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b79      	cmp	r3, #121	; 0x79
 80004de:	f47f ae5e 	bne.w	800019e <Uart_Tx_Byte+0x2e>
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	2b79      	cmp	r3, #121	; 0x79
 80004e6:	f47f ae5a 	bne.w	800019e <Uart_Tx_Byte+0x2e>
			tim2_trigger = 'n';
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <Uart_Tx_Byte+0x390>)
 80004ec:	226e      	movs	r2, #110	; 0x6e
 80004ee:	701a      	strb	r2, [r3, #0]
			tim2_flag = 'n';
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <Uart_Tx_Byte+0x39c>)
 80004f2:	226e      	movs	r2, #110	; 0x6e
 80004f4:	701a      	strb	r2, [r3, #0]
			break;
 80004f6:	bf00      	nop
		}
	}
}//end of tx byte
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	2000013c 	.word	0x2000013c
 8000504:	20000168 	.word	0x20000168
 8000508:	40010800 	.word	0x40010800
 800050c:	20000210 	.word	0x20000210

08000510 <HAL_TIM_PeriodElapsedCallback>:
	return(0);
}//end of tx multi byte

//타이머 인터럽트 발생🎨🖼🎨🖼
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	//타이머 2 실행 확인


	if(htim->Instance == htim3.Instance){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4ba2      	ldr	r3, [pc, #648]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	429a      	cmp	r2, r3
 8000522:	f040 81ed 	bne.w	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>

		if('y' == tim2_flag){
 8000526:	4ba1      	ldr	r3, [pc, #644]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b79      	cmp	r3, #121	; 0x79
 800052c:	d117      	bne.n	800055e <HAL_TIM_PeriodElapsedCallback+0x4e>
			globalCounter = globalCounter + 1;
 800052e:	4ba0      	ldr	r3, [pc, #640]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	4a9e      	ldr	r2, [pc, #632]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000536:	6013      	str	r3, [r2, #0]
			if(globalCounter >= 4){
 8000538:	4b9d      	ldr	r3, [pc, #628]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b03      	cmp	r3, #3
 800053e:	dd0a      	ble.n	8000556 <HAL_TIM_PeriodElapsedCallback+0x46>
				//timer flag yes라면
				tim2_cnt += 1; //카운터 1 추가
 8000540:	4b9c      	ldr	r3, [pc, #624]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	4a9b      	ldr	r2, [pc, #620]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000548:	6013      	str	r3, [r2, #0]
				tim2_trigger = 'y'; //trigger yes로 변경
 800054a:	4b9b      	ldr	r3, [pc, #620]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800054c:	2279      	movs	r2, #121	; 0x79
 800054e:	701a      	strb	r2, [r3, #0]
				globalCounter = 0;
 8000550:	4b97      	ldr	r3, [pc, #604]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]

			}

			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000556:	2120      	movs	r1, #32
 8000558:	4898      	ldr	r0, [pc, #608]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800055a:	f001 f98c 	bl	8001876 <HAL_GPIO_TogglePin>


		}

		if('y' == Uart_Rx_flag){
 800055e:	4b98      	ldr	r3, [pc, #608]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b79      	cmp	r3, #121	; 0x79
 8000564:	f040 81cc 	bne.w	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
			if('n' == Uart_Rx_active){ //25
 8000568:	4b96      	ldr	r3, [pc, #600]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b6e      	cmp	r3, #110	; 0x6e
 800056e:	d161      	bne.n	8000634 <HAL_TIM_PeriodElapsedCallback+0x124>
				//Rx가 active하지 않을 떄는 Temp에 값을 받아옴.
				Uart_Rx_Temp <<= 1; // 값을 하나씩 밀어서 저장
 8000570:	4b95      	ldr	r3, [pc, #596]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b93      	ldr	r3, [pc, #588]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800057a:	701a      	strb	r2, [r3, #0]
				if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 800057c:	2101      	movs	r1, #1
 800057e:	4893      	ldr	r0, [pc, #588]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000580:	f001 f94a 	bl	8001818 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	d105      	bne.n	8000596 <HAL_TIM_PeriodElapsedCallback+0x86>
					Uart_Rx_Temp += 1; //값이 true면 오른쪽 비트에 1을 씀
 800058a:	4b8f      	ldr	r3, [pc, #572]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b8d      	ldr	r3, [pc, #564]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000594:	701a      	strb	r2, [r3, #0]
				}
				if((Uart_Rx_Temp & 0x0f) == 0x0c){
 8000596:	4b8c      	ldr	r3, [pc, #560]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	f003 030f 	and.w	r3, r3, #15
 800059e:	2b0c      	cmp	r3, #12
 80005a0:	f040 81ae 	bne.w	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
					//쭉 보다보니 Temp에 들어온 값이 1100일 때 스타트로 인식
					Uart_Rx_active = 'y'; //active yes로 만듬
 80005a4:	4b87      	ldr	r3, [pc, #540]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80005a6:	2279      	movs	r2, #121	; 0x79
 80005a8:	701a      	strb	r2, [r3, #0]
					Uart_Rx_Temp = 0x00; //temp 값을 비움
 80005aa:	4b87      	ldr	r3, [pc, #540]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
					rxByte_cnt += 1; //바이트 하나를 셈
 80005b0:	4b87      	ldr	r3, [pc, #540]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	4a86      	ldr	r2, [pc, #536]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005b8:	6013      	str	r3, [r2, #0]
					rxData[rxByte_cnt].start = 'y'; //start yes
 80005ba:	4b85      	ldr	r3, [pc, #532]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4985      	ldr	r1, [pc, #532]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	440b      	add	r3, r1
 80005c8:	2279      	movs	r2, #121	; 0x79
 80005ca:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].data = 0x00; //data 0x00
 80005cc:	4b80      	ldr	r3, [pc, #512]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4980      	ldr	r1, [pc, #512]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80005d2:	4613      	mov	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	440b      	add	r3, r1
 80005da:	3301      	adds	r3, #1
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].parity = 'n'; //parity n
 80005e0:	4b7b      	ldr	r3, [pc, #492]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	497b      	ldr	r1, [pc, #492]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	440b      	add	r3, r1
 80005ee:	3302      	adds	r3, #2
 80005f0:	226e      	movs	r2, #110	; 0x6e
 80005f2:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].stop = 'x'; //stop x
 80005f4:	4b76      	ldr	r3, [pc, #472]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4976      	ldr	r1, [pc, #472]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80005fa:	4613      	mov	r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	4413      	add	r3, r2
 8000600:	440b      	add	r3, r1
 8000602:	3303      	adds	r3, #3
 8000604:	2278      	movs	r2, #120	; 0x78
 8000606:	701a      	strb	r2, [r3, #0]
					rxBit_cnt = 0; //bit count 0
 8000608:	4b73      	ldr	r3, [pc, #460]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
					rxSamp_cnt = 0; // Sample count 0
 800060e:	4b73      	ldr	r3, [pc, #460]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
					rxParity_bit = 0; //parity 0
 8000614:	4b72      	ldr	r3, [pc, #456]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
					Uart_Rx_trigger = 'n'; //trigger no
 800061a:	4b72      	ldr	r3, [pc, #456]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800061c:	226e      	movs	r2, #110	; 0x6e
 800061e:	701a      	strb	r2, [r3, #0]
					Uart_Rx_data = 'n'; //data no
 8000620:	4b71      	ldr	r3, [pc, #452]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000622:	226e      	movs	r2, #110	; 0x6e
 8000624:	701a      	strb	r2, [r3, #0]
					Uart_Rx_parity = 'n'; //parity none
 8000626:	4b71      	ldr	r3, [pc, #452]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000628:	226e      	movs	r2, #110	; 0x6e
 800062a:	701a      	strb	r2, [r3, #0]
					Uart_Rx_stop = 'n'; //stop no
 800062c:	4b70      	ldr	r3, [pc, #448]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800062e:	226e      	movs	r2, #110	; 0x6e
 8000630:	701a      	strb	r2, [r3, #0]

				}
			}
		}
	}
}
 8000632:	e165      	b.n	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
				Uart_Rx_trigger = 'n'; //trigger no c125에서도 no로 만듬
 8000634:	4b6b      	ldr	r3, [pc, #428]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000636:	226e      	movs	r2, #110	; 0x6e
 8000638:	701a      	strb	r2, [r3, #0]
				rxSamp_cnt += 1;
 800063a:	4b68      	ldr	r3, [pc, #416]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	4a66      	ldr	r2, [pc, #408]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000642:	6013      	str	r3, [r2, #0]
				if((rxSamp_cnt % 4) == 0){
 8000644:	4b65      	ldr	r3, [pc, #404]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 0303 	and.w	r3, r3, #3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d14d      	bne.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
					Uart_Rx_trigger = 'y'; //그러면 trigger yes로 만듬
 8000650:	4b64      	ldr	r3, [pc, #400]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000652:	2279      	movs	r2, #121	; 0x79
 8000654:	701a      	strb	r2, [r3, #0]
					if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 8000656:	2101      	movs	r1, #1
 8000658:	485c      	ldr	r0, [pc, #368]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800065a:	f001 f8dd 	bl	8001818 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d103      	bne.n	800066c <HAL_TIM_PeriodElapsedCallback+0x15c>
						rxBit_value = 1;
 8000664:	4b63      	ldr	r3, [pc, #396]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	e002      	b.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x162>
						rxBit_value = 0;
 800066c:	4b61      	ldr	r3, [pc, #388]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
					rxBit_cnt += 1;
 8000672:	4b59      	ldr	r3, [pc, #356]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	4a57      	ldr	r2, [pc, #348]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800067a:	6013      	str	r3, [r2, #0]
					if((1 <= rxBit_cnt) && (rxBit_cnt <= 8)){
 800067c:	4b56      	ldr	r3, [pc, #344]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	dd07      	ble.n	8000694 <HAL_TIM_PeriodElapsedCallback+0x184>
 8000684:	4b54      	ldr	r3, [pc, #336]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b08      	cmp	r3, #8
 800068a:	dc03      	bgt.n	8000694 <HAL_TIM_PeriodElapsedCallback+0x184>
						Uart_Rx_data = 'y'; //data를 y로 만듬
 800068c:	4b56      	ldr	r3, [pc, #344]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800068e:	2279      	movs	r2, #121	; 0x79
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e02b      	b.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
					}else if(9 == rxBit_cnt){
 8000694:	4b50      	ldr	r3, [pc, #320]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b09      	cmp	r3, #9
 800069a:	d11d      	bne.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
						Uart_Rx_data = 'n'; //data 가 n이ㅣ됨
 800069c:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800069e:	226e      	movs	r2, #110	; 0x6e
 80006a0:	701a      	strb	r2, [r3, #0]
						if('n' == Uart_Rx_Parity_Mode){
 80006a2:	4b55      	ldr	r3, [pc, #340]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b6e      	cmp	r3, #110	; 0x6e
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
							Uart_Rx_parity = 'n'; //parity no
 80006aa:	4b50      	ldr	r3, [pc, #320]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006ac:	226e      	movs	r2, #110	; 0x6e
 80006ae:	701a      	strb	r2, [r3, #0]
							Uart_Rx_stop = 'y'; //stop yes
 80006b0:	4b4f      	ldr	r3, [pc, #316]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80006b2:	2279      	movs	r2, #121	; 0x79
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e019      	b.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
						}else if('e' == Uart_Rx_Parity_Mode){
 80006b8:	4b4f      	ldr	r3, [pc, #316]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b65      	cmp	r3, #101	; 0x65
 80006be:	d103      	bne.n	80006c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
							Uart_Rx_parity = 'y'; //parity yes
 80006c0:	4b4a      	ldr	r3, [pc, #296]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006c2:	2279      	movs	r2, #121	; 0x79
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e011      	b.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
						}else if('o' == Uart_Rx_Parity_Mode){
 80006c8:	4b4b      	ldr	r3, [pc, #300]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b6f      	cmp	r3, #111	; 0x6f
 80006ce:	d10d      	bne.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
							Uart_Rx_parity = 'y'; //parity yes
 80006d0:	4b46      	ldr	r3, [pc, #280]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006d2:	2279      	movs	r2, #121	; 0x79
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	e009      	b.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
					}else if(10 == rxBit_cnt){
 80006d8:	4b3f      	ldr	r3, [pc, #252]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b0a      	cmp	r3, #10
 80006de:	d105      	bne.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
						Uart_Rx_parity = 'n'; //parity no
 80006e0:	4b42      	ldr	r3, [pc, #264]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006e2:	226e      	movs	r2, #110	; 0x6e
 80006e4:	701a      	strb	r2, [r3, #0]
						Uart_Rx_stop = 'y'; //stop yes!
 80006e6:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80006e8:	2279      	movs	r2, #121	; 0x79
 80006ea:	701a      	strb	r2, [r3, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_data)){
 80006ec:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b79      	cmp	r3, #121	; 0x79
 80006f2:	d136      	bne.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x252>
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b79      	cmp	r3, #121	; 0x79
 80006fa:	d132      	bne.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x252>
					rxData[rxByte_cnt].data >>= 1; //해당 struct.data를 오른쪽으로 1만큼 밀음
 80006fc:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4934      	ldr	r1, [pc, #208]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	440b      	add	r3, r1
 800070a:	3301      	adds	r3, #1
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000710:	6812      	ldr	r2, [r2, #0]
 8000712:	085b      	lsrs	r3, r3, #1
 8000714:	b2d8      	uxtb	r0, r3
 8000716:	492f      	ldr	r1, [pc, #188]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	440b      	add	r3, r1
 8000720:	3301      	adds	r3, #1
 8000722:	4602      	mov	r2, r0
 8000724:	701a      	strb	r2, [r3, #0]
					if(1 == rxBit_value){
 8000726:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d119      	bne.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x252>
						rxData[rxByte_cnt].data += 0x80;
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4928      	ldr	r1, [pc, #160]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	440b      	add	r3, r1
 800073c:	3301      	adds	r3, #1
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	3b80      	subs	r3, #128	; 0x80
 8000746:	b2d8      	uxtb	r0, r3
 8000748:	4922      	ldr	r1, [pc, #136]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	440b      	add	r3, r1
 8000752:	3301      	adds	r3, #1
 8000754:	4602      	mov	r2, r0
 8000756:	701a      	strb	r2, [r3, #0]
						rxParity_bit += 1;
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000760:	6013      	str	r3, [r2, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_parity)){
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b79      	cmp	r3, #121	; 0x79
 8000768:	f040 80a6 	bne.w	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b79      	cmp	r3, #121	; 0x79
 8000772:	f040 80a1 	bne.w	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
					if('e' == Uart_Rx_Parity_Mode){
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b65      	cmp	r3, #101	; 0x65
 800077c:	d161      	bne.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x332>
						if(((rxParity_bit % 2) == 0) && (0 == rxBit_value)){
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	2b00      	cmp	r3, #0
 8000788:	d138      	bne.n	80007fc <HAL_TIM_PeriodElapsedCallback+0x2ec>
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d134      	bne.n	80007fc <HAL_TIM_PeriodElapsedCallback+0x2ec>
							rxData[rxByte_cnt].parity = 'e'; //패리티는 e다
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	490f      	ldr	r1, [pc, #60]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	440b      	add	r3, r1
 80007a0:	3302      	adds	r3, #2
 80007a2:	2265      	movs	r2, #101	; 0x65
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e087      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 80007a8:	20000178 	.word	0x20000178
 80007ac:	20000210 	.word	0x20000210
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	20000168 	.word	0x20000168
 80007b8:	2000013c 	.word	0x2000013c
 80007bc:	40010800 	.word	0x40010800
 80007c0:	20000165 	.word	0x20000165
 80007c4:	20000167 	.word	0x20000167
 80007c8:	20000258 	.word	0x20000258
 80007cc:	40011000 	.word	0x40011000
 80007d0:	200001c0 	.word	0x200001c0
 80007d4:	2000009c 	.word	0x2000009c
 80007d8:	20000170 	.word	0x20000170
 80007dc:	20000174 	.word	0x20000174
 80007e0:	20000160 	.word	0x20000160
 80007e4:	200001c4 	.word	0x200001c4
 80007e8:	2000016c 	.word	0x2000016c
 80007ec:	20000164 	.word	0x20000164
 80007f0:	2000013d 	.word	0x2000013d
 80007f4:	2000025c 	.word	0x2000025c
 80007f8:	20000166 	.word	0x20000166
						}else if(((rxParity_bit % 2) == 1) && (1 == rxBit_value)){
 80007fc:	4b42      	ldr	r3, [pc, #264]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	bfb8      	it	lt
 8000808:	425b      	neglt	r3, r3
 800080a:	2b01      	cmp	r3, #1
 800080c:	d10e      	bne.n	800082c <HAL_TIM_PeriodElapsedCallback+0x31c>
 800080e:	4b3f      	ldr	r3, [pc, #252]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d10a      	bne.n	800082c <HAL_TIM_PeriodElapsedCallback+0x31c>
							rxData[rxByte_cnt].parity = 'e';//e다
 8000816:	4b3e      	ldr	r3, [pc, #248]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	493e      	ldr	r1, [pc, #248]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	440b      	add	r3, r1
 8000824:	3302      	adds	r3, #2
 8000826:	2265      	movs	r2, #101	; 0x65
 8000828:	701a      	strb	r2, [r3, #0]
 800082a:	e045      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
							rxData[rxByte_cnt].parity = 'f'; //아니면 f
 800082c:	4b38      	ldr	r3, [pc, #224]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4938      	ldr	r1, [pc, #224]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	440b      	add	r3, r1
 800083a:	3302      	adds	r3, #2
 800083c:	2266      	movs	r2, #102	; 0x66
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e03a      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
					}else if('o' == Uart_Rx_Parity_Mode){
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b6f      	cmp	r3, #111	; 0x6f
 8000848:	d136      	bne.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
						if(((rxParity_bit % 2) == 0) && (1 == rxBit_value)){
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d10e      	bne.n	8000874 <HAL_TIM_PeriodElapsedCallback+0x364>
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d10a      	bne.n	8000874 <HAL_TIM_PeriodElapsedCallback+0x364>
							rxData[rxByte_cnt].parity = 'o'; //o다
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	492c      	ldr	r1, [pc, #176]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	440b      	add	r3, r1
 800086c:	3302      	adds	r3, #2
 800086e:	226f      	movs	r2, #111	; 0x6f
 8000870:	701a      	strb	r2, [r3, #0]
 8000872:	e021      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
						}else if(((rxParity_bit % 2) == 1) && (0 == rxBit_value)){
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	bfb8      	it	lt
 8000880:	425b      	neglt	r3, r3
 8000882:	2b01      	cmp	r3, #1
 8000884:	d10e      	bne.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x394>
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10a      	bne.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x394>
							rxData[rxByte_cnt].parity = 'o'; //o다
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4920      	ldr	r1, [pc, #128]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	440b      	add	r3, r1
 800089c:	3302      	adds	r3, #2
 800089e:	226f      	movs	r2, #111	; 0x6f
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	e009      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
							rxData[rxByte_cnt].parity = 'f'; //아니면 f다
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	491a      	ldr	r1, [pc, #104]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	3302      	adds	r3, #2
 80008b4:	2266      	movs	r2, #102	; 0x66
 80008b6:	701a      	strb	r2, [r3, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_stop)){
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b79      	cmp	r3, #121	; 0x79
 80008be:	d11f      	bne.n	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b79      	cmp	r3, #121	; 0x79
 80008c6:	d11b      	bne.n	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
					Uart_Rx_active = 'n';
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80008ca:	226e      	movs	r2, #110	; 0x6e
 80008cc:	701a      	strb	r2, [r3, #0]
					if(1 == rxBit_value){
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d10a      	bne.n	80008ec <HAL_TIM_PeriodElapsedCallback+0x3dc>
						rxData[rxByte_cnt].stop = 'y';
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	490e      	ldr	r1, [pc, #56]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	3303      	adds	r3, #3
 80008e6:	2279      	movs	r2, #121	; 0x79
 80008e8:	701a      	strb	r2, [r3, #0]
}
 80008ea:	e009      	b.n	8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>
						rxData[rxByte_cnt].stop = 'n';
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4908      	ldr	r1, [pc, #32]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x404>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	3303      	adds	r3, #3
 80008fc:	226e      	movs	r2, #110	; 0x6e
 80008fe:	701a      	strb	r2, [r3, #0]
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000160 	.word	0x20000160
 800090c:	2000025c 	.word	0x2000025c
 8000910:	200001c0 	.word	0x200001c0
 8000914:	2000009c 	.word	0x2000009c
 8000918:	20000166 	.word	0x20000166
 800091c:	200001c4 	.word	0x200001c4
 8000920:	2000013d 	.word	0x2000013d
 8000924:	20000167 	.word	0x20000167

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f000 fc87 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f92d 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 fa2f 	bl	8000d98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800093a:	f000 fa03 	bl	8000d44 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800093e:	f000 f969 	bl	8000c14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000942:	f000 f9b3 	bl	8000cac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


	//수신부 초기화 🎁🎁🎁
	Uart_Rx_Parity_Mode = 'n'; // 'n':none, 'e':even, 'o':odd
 8000946:	4b79      	ldr	r3, [pc, #484]	; (8000b2c <main+0x204>)
 8000948:	226e      	movs	r2, #110	; 0x6e
 800094a:	701a      	strb	r2, [r3, #0]
  rxByte_cnt = 0;
 800094c:	4b78      	ldr	r3, [pc, #480]	; (8000b30 <main+0x208>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
  rxBit_cnt = 0;
 8000952:	4b78      	ldr	r3, [pc, #480]	; (8000b34 <main+0x20c>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
  rxSamp_cnt = 0;
 8000958:	4b77      	ldr	r3, [pc, #476]	; (8000b38 <main+0x210>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
  Uart_Rx_flag = 'n';
 800095e:	4b77      	ldr	r3, [pc, #476]	; (8000b3c <main+0x214>)
 8000960:	226e      	movs	r2, #110	; 0x6e
 8000962:	701a      	strb	r2, [r3, #0]
  Uart_Rx_active = 'n';
 8000964:	4b76      	ldr	r3, [pc, #472]	; (8000b40 <main+0x218>)
 8000966:	226e      	movs	r2, #110	; 0x6e
 8000968:	701a      	strb	r2, [r3, #0]
  Uart_Rx_Temp = 0x00;
 800096a:	4b76      	ldr	r3, [pc, #472]	; (8000b44 <main+0x21c>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]

	//송신부 초기화 ✨✨✨✨
  Uart_Tx_Parity_Mode = 'n'; // 'n':none, 'e':even, 'o':odd
 8000970:	4b75      	ldr	r3, [pc, #468]	; (8000b48 <main+0x220>)
 8000972:	226e      	movs	r2, #110	; 0x6e
 8000974:	701a      	strb	r2, [r3, #0]
  tim2_cnt = 0;
 8000976:	4b75      	ldr	r3, [pc, #468]	; (8000b4c <main+0x224>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
  tim2_flag = 'n';
 800097c:	4b74      	ldr	r3, [pc, #464]	; (8000b50 <main+0x228>)
 800097e:	226e      	movs	r2, #110	; 0x6e
 8000980:	701a      	strb	r2, [r3, #0]
  tim2_trigger = 'n';
 8000982:	4b74      	ldr	r3, [pc, #464]	; (8000b54 <main+0x22c>)
 8000984:	226e      	movs	r2, #110	; 0x6e
 8000986:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //tx idle시 high이기 때문
 8000988:	2201      	movs	r2, #1
 800098a:	2101      	movs	r1, #1
 800098c:	4872      	ldr	r0, [pc, #456]	; (8000b58 <main+0x230>)
 800098e:	f000 ff5a 	bl	8001846 <HAL_GPIO_WritePin>

  tim3_it_start = HAL_TIM_Base_Start_IT(&htim3); //rx 타이머
 8000992:	4872      	ldr	r0, [pc, #456]	; (8000b5c <main+0x234>)
 8000994:	f001 fc16 	bl	80021c4 <HAL_TIM_Base_Start_IT>
 8000998:	4603      	mov	r3, r0
 800099a:	72fb      	strb	r3, [r7, #11]
  tim2_it_start = HAL_TIM_Base_Start_IT(&htim2); //tx 타이머
 800099c:	4870      	ldr	r0, [pc, #448]	; (8000b60 <main+0x238>)
 800099e:	f001 fc11 	bl	80021c4 <HAL_TIM_Base_Start_IT>
 80009a2:	4603      	mov	r3, r0
 80009a4:	72bb      	strb	r3, [r7, #10]
  if((HAL_OK == tim3_it_start) && (HAL_OK == tim2_it_start)){
 80009a6:	7afb      	ldrb	r3, [r7, #11]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d106      	bne.n	80009ba <main+0x92>
 80009ac:	7abb      	ldrb	r3, [r7, #10]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d103      	bne.n	80009ba <main+0x92>
	  printf("HAL_TIM_Base_Start_IT OK\r\n");
 80009b2:	486c      	ldr	r0, [pc, #432]	; (8000b64 <main+0x23c>)
 80009b4:	f002 fa02 	bl	8002dbc <puts>
 80009b8:	e002      	b.n	80009c0 <main+0x98>
  }else{
	  printf("HAL_TIM_Base_Start_IT error\r\n");
 80009ba:	486b      	ldr	r0, [pc, #428]	; (8000b68 <main+0x240>)
 80009bc:	f002 f9fe 	bl	8002dbc <puts>
  }


  chUartTxData[0] = 'a';
 80009c0:	4b6a      	ldr	r3, [pc, #424]	; (8000b6c <main+0x244>)
 80009c2:	2261      	movs	r2, #97	; 0x61
 80009c4:	701a      	strb	r2, [r3, #0]
  //tx data 0번 프리셋 a로 초기화


  //-----uart rx mode : start-----
  Uart_Rx_flag = 'y'; //flag는 yes다
 80009c6:	4b5d      	ldr	r3, [pc, #372]	; (8000b3c <main+0x214>)
 80009c8:	2279      	movs	r2, #121	; 0x79
 80009ca:	701a      	strb	r2, [r3, #0]
  Uart_Rx_active = 'n'; //active는 no 아직 시작안한듯 나중에 바이트 받은게 있는데 active no면 받은 값을 출력
 80009cc:	4b5c      	ldr	r3, [pc, #368]	; (8000b40 <main+0x218>)
 80009ce:	226e      	movs	r2, #110	; 0x6e
 80009d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //패리티 입력을 데이터로 전환! ✔✔🎈🎈🎈
	  pa8pin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8); //a8 핀 체크
 80009d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d6:	4860      	ldr	r0, [pc, #384]	; (8000b58 <main+0x230>)
 80009d8:	f000 ff1e 	bl	8001818 <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	727b      	strb	r3, [r7, #9]
	  pb8pin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8); //b8 핀 체크
 80009e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e4:	4862      	ldr	r0, [pc, #392]	; (8000b70 <main+0x248>)
 80009e6:	f000 ff17 	bl	8001818 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	723b      	strb	r3, [r7, #8]
	  if((GPIO_PIN_SET == pa8pin) && (GPIO_PIN_RESET == pb8pin)){
 80009ee:	7a7b      	ldrb	r3, [r7, #9]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d109      	bne.n	8000a08 <main+0xe0>
 80009f4:	7a3b      	ldrb	r3, [r7, #8]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d106      	bne.n	8000a08 <main+0xe0>
		  //a8 high b8 low면
		  Uart_Tx_Parity_Mode = 'e'; //Tx와 Rx Parity even으로
 80009fa:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <main+0x220>)
 80009fc:	2265      	movs	r2, #101	; 0x65
 80009fe:	701a      	strb	r2, [r3, #0]
		  Uart_Rx_Parity_Mode = 'e';
 8000a00:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <main+0x204>)
 8000a02:	2265      	movs	r2, #101	; 0x65
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e012      	b.n	8000a2e <main+0x106>
	  }else if((GPIO_PIN_RESET == pa8pin) && (GPIO_PIN_SET == pb8pin)){
 8000a08:	7a7b      	ldrb	r3, [r7, #9]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d109      	bne.n	8000a22 <main+0xfa>
 8000a0e:	7a3b      	ldrb	r3, [r7, #8]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d106      	bne.n	8000a22 <main+0xfa>
		  //a8 low b8 high면
		  Uart_Tx_Parity_Mode = 'o'; //Tx Rx Parity odd로 변경
 8000a14:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <main+0x220>)
 8000a16:	226f      	movs	r2, #111	; 0x6f
 8000a18:	701a      	strb	r2, [r3, #0]
		  Uart_Rx_Parity_Mode = 'o';
 8000a1a:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <main+0x204>)
 8000a1c:	226f      	movs	r2, #111	; 0x6f
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e005      	b.n	8000a2e <main+0x106>
	  }else{
		  Uart_Tx_Parity_Mode = 'n'; //둘다 아니면 n
 8000a22:	4b49      	ldr	r3, [pc, #292]	; (8000b48 <main+0x220>)
 8000a24:	226e      	movs	r2, #110	; 0x6e
 8000a26:	701a      	strb	r2, [r3, #0]
		  Uart_Rx_Parity_Mode = 'n';
 8000a28:	4b40      	ldr	r3, [pc, #256]	; (8000b2c <main+0x204>)
 8000a2a:	226e      	movs	r2, #110	; 0x6e
 8000a2c:	701a      	strb	r2, [r3, #0]
	  }

		pc13pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13); //파란 버튼 상태 읽기
 8000a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a32:	4850      	ldr	r0, [pc, #320]	; (8000b74 <main+0x24c>)
 8000a34:	f000 fef0 	bl	8001818 <HAL_GPIO_ReadPin>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	71fb      	strb	r3, [r7, #7]
	  if(GPIO_PIN_RESET == pc13pin){
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d120      	bne.n	8000a84 <main+0x15c>
		  //파란 버튼이 low라면 -> 하단 코드에서 데이터를 발송
		  Uart_Tx_Byte(chUartTxData[0], Uart_Tx_Parity_Mode);
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <main+0x244>)
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	4b40      	ldr	r3, [pc, #256]	; (8000b48 <main+0x220>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f7ff fb8f 	bl	8000170 <Uart_Tx_Byte>
		  //Data[0]과 parity 상태를 보냄
		  printf("-a15-sendByte-Uart_Tx_Byte=%c[0x%02x]---parity=%c---\r\n",chUartTxData[0],chUartTxData[0],Uart_Tx_Parity_Mode);
 8000a52:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <main+0x244>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <main+0x244>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <main+0x220>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4845      	ldr	r0, [pc, #276]	; (8000b78 <main+0x250>)
 8000a64:	f002 f936 	bl	8002cd4 <iprintf>
		  //데이터를 출력 (data[0], paritymode)
		  if('z' == chUartTxData[0]){
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <main+0x244>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b7a      	cmp	r3, #122	; 0x7a
 8000a6e:	d103      	bne.n	8000a78 <main+0x150>
			  //만약 data[0]이 'z'라면
			  chUartTxData[0] = 'a'; //data를 'a'로 바꿈
 8000a70:	4b3e      	ldr	r3, [pc, #248]	; (8000b6c <main+0x244>)
 8000a72:	2261      	movs	r2, #97	; 0x61
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e005      	b.n	8000a84 <main+0x15c>
		  }else{
			  chUartTxData[0] += 1;
 8000a78:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <main+0x244>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b3a      	ldr	r3, [pc, #232]	; (8000b6c <main+0x244>)
 8000a82:	701a      	strb	r2, [r3, #0]
			  //z가 아니면 1씩 올림
		  }
	  }

	  HAL_Delay(1000);
 8000a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a88:	f000 fc3c 	bl	8001304 <HAL_Delay>


	  Uart_Tx_Byte(0x55, 'n');
 8000a8c:	216e      	movs	r1, #110	; 0x6e
 8000a8e:	2055      	movs	r0, #85	; 0x55
 8000a90:	f7ff fb6e 	bl	8000170 <Uart_Tx_Byte>
	  printf("check distance\r\n");
 8000a94:	4839      	ldr	r0, [pc, #228]	; (8000b7c <main+0x254>)
 8000a96:	f002 f991 	bl	8002dbc <puts>

	  HAL_Delay(200);
 8000a9a:	20c8      	movs	r0, #200	; 0xc8
 8000a9c:	f000 fc32 	bl	8001304 <HAL_Delay>


	  //입력받는 코드
	  if(('n' == Uart_Rx_active) && (1 <= rxByte_cnt)){
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <main+0x218>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b6e      	cmp	r3, #110	; 0x6e
 8000aa6:	d111      	bne.n	8000acc <main+0x1a4>
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <main+0x208>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dd0d      	ble.n	8000acc <main+0x1a4>
		  //Rx-active가 no일 때, 받은 Byte 갯수가 1개보다 많거나 같다면

		  int resultDistance = (rxData[1].data << 8) + rxData[2].data;
 8000ab0:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <main+0x258>)
 8000ab2:	799b      	ldrb	r3, [r3, #6]
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	4a32      	ldr	r2, [pc, #200]	; (8000b80 <main+0x258>)
 8000ab8:	7ad2      	ldrb	r2, [r2, #11]
 8000aba:	4413      	add	r3, r2
 8000abc:	603b      	str	r3, [r7, #0]
			  if(m == 2){
				  resultDistance += rxData[m].data;
			  }
		  }
*/
		  printf("distance : %d mm\r\n", resultDistance);
 8000abe:	6839      	ldr	r1, [r7, #0]
 8000ac0:	4830      	ldr	r0, [pc, #192]	; (8000b84 <main+0x25c>)
 8000ac2:	f002 f907 	bl	8002cd4 <iprintf>
		  rxByte_cnt = 0;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <main+0x208>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
		  //byte 카운터를 0으로 만듬
	  }


	  Uart_Tx_Byte(0x50, 'n');
 8000acc:	216e      	movs	r1, #110	; 0x6e
 8000ace:	2050      	movs	r0, #80	; 0x50
 8000ad0:	f7ff fb4e 	bl	8000170 <Uart_Tx_Byte>
	  printf("check temp\r\n");
 8000ad4:	482c      	ldr	r0, [pc, #176]	; (8000b88 <main+0x260>)
 8000ad6:	f002 f971 	bl	8002dbc <puts>

	  HAL_Delay(200);
 8000ada:	20c8      	movs	r0, #200	; 0xc8
 8000adc:	f000 fc12 	bl	8001304 <HAL_Delay>

	  if(('n' == Uart_Rx_active) && (1 <= rxByte_cnt)){
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <main+0x218>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b6e      	cmp	r3, #110	; 0x6e
 8000ae6:	f47f af74 	bne.w	80009d2 <main+0xaa>
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <main+0x208>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f77f af6f 	ble.w	80009d2 <main+0xaa>
		  //Rx-active가 no일 때, 받은 Byte 갯수가 1개보다 많거나 같다면
		  for(m = 1; m <= rxByte_cnt; m++){
 8000af4:	2301      	movs	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	e00f      	b.n	8000b1a <main+0x1f2>
			  //객체 1번부터, byte 카운터까지 반복 1~9면 9번
			  //printf("a15----rx:%c---data[%d]=0x%02x,parity=%c,stop=%c\r\n",Uart_Rx_Parity_Mode,m,rxData[m].data,rxData[m].parity,rxData[m].stop);
			  //rx parity 상태, rx data[m]의 data, rxdata[m]의 parity, rxdata[m]의 stop 여부

			  printf("temp : %d\r\n", rxData[m].data - 45);
 8000afa:	4921      	ldr	r1, [pc, #132]	; (8000b80 <main+0x258>)
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	4613      	mov	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	3301      	adds	r3, #1
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3b2d      	subs	r3, #45	; 0x2d
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481f      	ldr	r0, [pc, #124]	; (8000b8c <main+0x264>)
 8000b10:	f002 f8e0 	bl	8002cd4 <iprintf>
		  for(m = 1; m <= rxByte_cnt; m++){
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <main+0x208>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	ddea      	ble.n	8000afa <main+0x1d2>
		  }
		  rxByte_cnt = 0;
 8000b24:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <main+0x208>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
	  pa8pin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8); //a8 핀 체크
 8000b2a:	e752      	b.n	80009d2 <main+0xaa>
 8000b2c:	20000166 	.word	0x20000166
 8000b30:	200001c0 	.word	0x200001c0
 8000b34:	20000170 	.word	0x20000170
 8000b38:	20000174 	.word	0x20000174
 8000b3c:	20000165 	.word	0x20000165
 8000b40:	20000167 	.word	0x20000167
 8000b44:	20000258 	.word	0x20000258
 8000b48:	2000013e 	.word	0x2000013e
 8000b4c:	20000168 	.word	0x20000168
 8000b50:	20000210 	.word	0x20000210
 8000b54:	2000013c 	.word	0x2000013c
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	20000178 	.word	0x20000178
 8000b60:	200001c8 	.word	0x200001c8
 8000b64:	08003b90 	.word	0x08003b90
 8000b68:	08003bac 	.word	0x08003bac
 8000b6c:	20000140 	.word	0x20000140
 8000b70:	40010c00 	.word	0x40010c00
 8000b74:	40011000 	.word	0x40011000
 8000b78:	08003bcc 	.word	0x08003bcc
 8000b7c:	08003c04 	.word	0x08003c04
 8000b80:	2000009c 	.word	0x2000009c
 8000b84:	08003c14 	.word	0x08003c14
 8000b88:	08003c28 	.word	0x08003c28
 8000b8c:	08003c34 	.word	0x08003c34

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b090      	sub	sp, #64	; 0x40
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2228      	movs	r2, #40	; 0x28
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 f890 	bl	8002cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000bc6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0318 	add.w	r3, r7, #24
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fe8b 	bl	80018ec <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bdc:	f000 f972 	bl	8000ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	2302      	movs	r3, #2
 8000be6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 f8f6 	bl	8001dec <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c06:	f000 f95d 	bl	8000ec4 <Error_Handler>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3740      	adds	r7, #64	; 0x40
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c3a:	223f      	movs	r2, #63	; 0x3f
 8000c3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 103;
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c46:	2267      	movs	r2, #103	; 0x67
 8000c48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c58:	f001 fa64 	bl	8002124 <HAL_TIM_Base_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000c62:	f000 f92f 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c74:	f001 fc00 	bl	8002478 <HAL_TIM_ConfigClockSource>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000c7e:	f000 f921 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c90:	f001 fdc6 	bl	8002820 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c9a:	f000 f913 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001c8 	.word	0x200001c8

08000cac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_TIM3_Init+0x90>)
 8000cca:	4a1d      	ldr	r2, [pc, #116]	; (8000d40 <MX_TIM3_Init+0x94>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_TIM3_Init+0x90>)
 8000cd0:	223f      	movs	r2, #63	; 0x3f
 8000cd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_TIM3_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25;
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_TIM3_Init+0x90>)
 8000cdc:	2219      	movs	r2, #25
 8000cde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_TIM3_Init+0x90>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_TIM3_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <MX_TIM3_Init+0x90>)
 8000cee:	f001 fa19 	bl	8002124 <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000cf8:	f000 f8e4 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	4619      	mov	r1, r3
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <MX_TIM3_Init+0x90>)
 8000d0a:	f001 fbb5 	bl	8002478 <HAL_TIM_ConfigClockSource>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000d14:	f000 f8d6 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_TIM3_Init+0x90>)
 8000d26:	f001 fd7b 	bl	8002820 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000d30:	f000 f8c8 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000178 	.word	0x20000178
 8000d40:	40000400 	.word	0x40000400

08000d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <MX_USART2_UART_Init+0x50>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	f001 fdc0 	bl	8002900 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d86:	f000 f89d 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000214 	.word	0x20000214
 8000d94:	40004400 	.word	0x40004400

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a3f      	ldr	r2, [pc, #252]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a39      	ldr	r2, [pc, #228]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0320 	and.w	r3, r3, #32
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a33      	ldr	r2, [pc, #204]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a2d      	ldr	r2, [pc, #180]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000dfa:	f043 0308 	orr.w	r3, r3, #8
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MX_GPIO_Init+0x118>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2121      	movs	r1, #33	; 0x21
 8000e10:	4828      	ldr	r0, [pc, #160]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000e12:	f000 fd18 	bl	8001846 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <MX_GPIO_Init+0x120>)
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4824      	ldr	r0, [pc, #144]	; (8000ebc <MX_GPIO_Init+0x124>)
 8000e2c:	f000 fb9a 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e30:	2301      	movs	r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	481e      	ldr	r0, [pc, #120]	; (8000ebc <MX_GPIO_Init+0x124>)
 8000e44:	f000 fb8e 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000e48:	2321      	movs	r3, #33	; 0x21
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000e60:	f000 fb80 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <MX_GPIO_Init+0x11c>)
 8000e7a:	f000 fb73 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <MX_GPIO_Init+0x128>)
 8000e94:	f000 fb66 	bl	8001564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2028      	movs	r0, #40	; 0x28
 8000e9e:	f000 fb2a 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ea2:	2028      	movs	r0, #40	; 0x28
 8000ea4:	f000 fb43 	bl	800152e <HAL_NVIC_EnableIRQ>

}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	10110000 	.word	0x10110000
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40010c00 	.word	0x40010c00

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <HAL_MspInit+0x5c>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6193      	str	r3, [r2, #24]
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_MspInit+0x5c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_MspInit+0x60>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_MspInit+0x60>)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000

08000f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f44:	d114      	bne.n	8000f70 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_TIM_Base_MspInit+0x78>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a18      	ldr	r2, [pc, #96]	; (8000fac <HAL_TIM_Base_MspInit+0x78>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_TIM_Base_MspInit+0x78>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	201c      	movs	r0, #28
 8000f64:	f000 fac7 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f68:	201c      	movs	r0, #28
 8000f6a:	f000 fae0 	bl	800152e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f6e:	e018      	b.n	8000fa2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_TIM_Base_MspInit+0x7c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d113      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_TIM_Base_MspInit+0x78>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <HAL_TIM_Base_MspInit+0x78>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_TIM_Base_MspInit+0x78>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	201d      	movs	r0, #29
 8000f98:	f000 faad 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f9c:	201d      	movs	r0, #29
 8000f9e:	f000 fac6 	bl	800152e <HAL_NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40000400 	.word	0x40000400

08000fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <HAL_UART_MspInit+0x70>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d123      	bne.n	800101c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_UART_MspInit+0x74>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	4a13      	ldr	r2, [pc, #76]	; (8001028 <HAL_UART_MspInit+0x74>)
 8000fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fde:	61d3      	str	r3, [r2, #28]
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_UART_MspInit+0x74>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_UART_MspInit+0x74>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_UART_MspInit+0x74>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_UART_MspInit+0x74>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001004:	230c      	movs	r3, #12
 8001006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2302      	movs	r3, #2
 800100e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	4619      	mov	r1, r3
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <HAL_UART_MspInit+0x78>)
 8001018:	f000 faa4 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800101c:	bf00      	nop
 800101e:	3720      	adds	r7, #32
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40004400 	.word	0x40004400
 8001028:	40021000 	.word	0x40021000
 800102c:	40010800 	.word	0x40010800

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <HardFault_Handler+0x4>

08001042 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <MemManage_Handler+0x4>

08001048 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <BusFault_Handler+0x4>

0800104e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <UsageFault_Handler+0x4>

08001054 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107c:	f000 f926 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <TIM2_IRQHandler+0x10>)
 800108a:	f001 f8ed 	bl	8002268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001c8 	.word	0x200001c8

08001098 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM3_IRQHandler+0x10>)
 800109e:	f001 f8e3 	bl	8002268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000178 	.word	0x20000178

080010ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010b4:	f000 fbf8 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	e00a      	b.n	80010e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ce:	f3af 8000 	nop.w
 80010d2:	4601      	mov	r1, r0
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	b2ca      	uxtb	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbf0      	blt.n	80010ce <_read+0x12>
	}

return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	e009      	b.n	800111c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f81b 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbf1      	blt.n	8001108 <_write+0x12>
	}
	return len;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_close>:

int _close(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001154:	605a      	str	r2, [r3, #4]
	return 0;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <_isatty>:

int _isatty(int file)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	return 1;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001176:	b480      	push	{r7}
 8001178:	b085      	sub	sp, #20
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
	return 0;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
	...

08001190 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x50>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x16>
		heap_end = &end;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <_sbrk+0x50>)
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <_sbrk+0x54>)
 80011a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <_sbrk+0x50>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <_sbrk+0x50>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	466a      	mov	r2, sp
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d907      	bls.n	80011ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ba:	f001 fd59 	bl	8002c70 <__errno>
 80011be:	4602      	mov	r2, r0
 80011c0:	230c      	movs	r3, #12
 80011c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	e006      	b.n	80011d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <_sbrk+0x50>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <_sbrk+0x50>)
 80011d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000090 	.word	0x20000090
 80011e4:	20000268 	.word	0x20000268

080011e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	; (800122c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	; (8001238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800121a:	f7ff ffe5 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121e:	f001 fd2d 	bl	8002c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001222:	f7ff fb81 	bl	8000928 <main>
  bx lr
 8001226:	4770      	bx	lr
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001230:	08003d0c 	.word	0x08003d0c
  ldr r2, =_sbss
 8001234:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001238:	20000268 	.word	0x20000268

0800123c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_2_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x28>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x28>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f945 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fe38 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40022000 	.word	0x40022000

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f95d 	bl	800154a <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f925 	bl	80014f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_IncTick+0x1c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_IncTick+0x20>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a03      	ldr	r2, [pc, #12]	; (80012ec <HAL_IncTick+0x20>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000260 	.word	0x20000260

080012f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <HAL_GetTick+0x10>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	20000260 	.word	0x20000260

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff fff0 	bl	80012f0 <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_Delay+0x40>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffe0 	bl	80012f0 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000008 	.word	0x20000008

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4906      	ldr	r1, [pc, #24]	; (80013e0 <__NVIC_EnableIRQ+0x34>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7ff ff90 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff2d 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff42 	bl	8001390 <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff90 	bl	8001438 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5f 	bl	80013e4 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff35 	bl	80013ac <__NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffa2 	bl	800149c <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b08b      	sub	sp, #44	; 0x2c
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001576:	e127      	b.n	80017c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001578:	2201      	movs	r2, #1
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	429a      	cmp	r2, r3
 8001592:	f040 8116 	bne.w	80017c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b12      	cmp	r3, #18
 800159c:	d034      	beq.n	8001608 <HAL_GPIO_Init+0xa4>
 800159e:	2b12      	cmp	r3, #18
 80015a0:	d80d      	bhi.n	80015be <HAL_GPIO_Init+0x5a>
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d02b      	beq.n	80015fe <HAL_GPIO_Init+0x9a>
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d804      	bhi.n	80015b4 <HAL_GPIO_Init+0x50>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d031      	beq.n	8001612 <HAL_GPIO_Init+0xae>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d01c      	beq.n	80015ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015b2:	e048      	b.n	8001646 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d043      	beq.n	8001640 <HAL_GPIO_Init+0xdc>
 80015b8:	2b11      	cmp	r3, #17
 80015ba:	d01b      	beq.n	80015f4 <HAL_GPIO_Init+0x90>
          break;
 80015bc:	e043      	b.n	8001646 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015be:	4a89      	ldr	r2, [pc, #548]	; (80017e4 <HAL_GPIO_Init+0x280>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d026      	beq.n	8001612 <HAL_GPIO_Init+0xae>
 80015c4:	4a87      	ldr	r2, [pc, #540]	; (80017e4 <HAL_GPIO_Init+0x280>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d806      	bhi.n	80015d8 <HAL_GPIO_Init+0x74>
 80015ca:	4a87      	ldr	r2, [pc, #540]	; (80017e8 <HAL_GPIO_Init+0x284>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d020      	beq.n	8001612 <HAL_GPIO_Init+0xae>
 80015d0:	4a86      	ldr	r2, [pc, #536]	; (80017ec <HAL_GPIO_Init+0x288>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d01d      	beq.n	8001612 <HAL_GPIO_Init+0xae>
          break;
 80015d6:	e036      	b.n	8001646 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015d8:	4a85      	ldr	r2, [pc, #532]	; (80017f0 <HAL_GPIO_Init+0x28c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0xae>
 80015de:	4a85      	ldr	r2, [pc, #532]	; (80017f4 <HAL_GPIO_Init+0x290>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d016      	beq.n	8001612 <HAL_GPIO_Init+0xae>
 80015e4:	4a84      	ldr	r2, [pc, #528]	; (80017f8 <HAL_GPIO_Init+0x294>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0xae>
          break;
 80015ea:	e02c      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	623b      	str	r3, [r7, #32]
          break;
 80015f2:	e028      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	3304      	adds	r3, #4
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e023      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	3308      	adds	r3, #8
 8001604:	623b      	str	r3, [r7, #32]
          break;
 8001606:	e01e      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	330c      	adds	r3, #12
 800160e:	623b      	str	r3, [r7, #32]
          break;
 8001610:	e019      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800161a:	2304      	movs	r3, #4
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e012      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d105      	bne.n	8001634 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001628:	2308      	movs	r3, #8
 800162a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	611a      	str	r2, [r3, #16]
          break;
 8001632:	e008      	b.n	8001646 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001634:	2308      	movs	r3, #8
 8001636:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	615a      	str	r2, [r3, #20]
          break;
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
          break;
 8001644:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2bff      	cmp	r3, #255	; 0xff
 800164a:	d801      	bhi.n	8001650 <HAL_GPIO_Init+0xec>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	e001      	b.n	8001654 <HAL_GPIO_Init+0xf0>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3304      	adds	r3, #4
 8001654:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2bff      	cmp	r3, #255	; 0xff
 800165a:	d802      	bhi.n	8001662 <HAL_GPIO_Init+0xfe>
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	e002      	b.n	8001668 <HAL_GPIO_Init+0x104>
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	3b08      	subs	r3, #8
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	210f      	movs	r1, #15
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	401a      	ands	r2, r3
 800167a:	6a39      	ldr	r1, [r7, #32]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	431a      	orrs	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8096 	beq.w	80017c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001696:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_GPIO_Init+0x298>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_GPIO_Init+0x298>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6193      	str	r3, [r2, #24]
 80016a2:	4b56      	ldr	r3, [pc, #344]	; (80017fc <HAL_GPIO_Init+0x298>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016ae:	4a54      	ldr	r2, [pc, #336]	; (8001800 <HAL_GPIO_Init+0x29c>)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4b      	ldr	r2, [pc, #300]	; (8001804 <HAL_GPIO_Init+0x2a0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x19e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4a      	ldr	r2, [pc, #296]	; (8001808 <HAL_GPIO_Init+0x2a4>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x19a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a49      	ldr	r2, [pc, #292]	; (800180c <HAL_GPIO_Init+0x2a8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x196>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a48      	ldr	r2, [pc, #288]	; (8001810 <HAL_GPIO_Init+0x2ac>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x192>
 80016f2:	2303      	movs	r3, #3
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x1a0>
 80016f6:	2304      	movs	r3, #4
 80016f8:	e004      	b.n	8001704 <HAL_GPIO_Init+0x1a0>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x1a0>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_GPIO_Init+0x1a0>
 8001702:	2300      	movs	r3, #0
 8001704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001706:	f002 0203 	and.w	r2, r2, #3
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	4093      	lsls	r3, r2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001714:	493a      	ldr	r1, [pc, #232]	; (8001800 <HAL_GPIO_Init+0x29c>)
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800172e:	4b39      	ldr	r3, [pc, #228]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4938      	ldr	r1, [pc, #224]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
 800173a:	e006      	b.n	800174a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800173c:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	43db      	mvns	r3, r3
 8001744:	4933      	ldr	r1, [pc, #204]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001746:	4013      	ands	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001756:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	492e      	ldr	r1, [pc, #184]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
 8001762:	e006      	b.n	8001772 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	43db      	mvns	r3, r3
 800176c:	4929      	ldr	r1, [pc, #164]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 800176e:	4013      	ands	r3, r2
 8001770:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	4924      	ldr	r1, [pc, #144]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
 800178a:	e006      	b.n	800179a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	43db      	mvns	r3, r3
 8001794:	491f      	ldr	r1, [pc, #124]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001796:	4013      	ands	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	491a      	ldr	r1, [pc, #104]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60cb      	str	r3, [r1, #12]
 80017b2:	e006      	b.n	80017c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4915      	ldr	r1, [pc, #84]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 80017be:	4013      	ands	r3, r2
 80017c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	3301      	adds	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f aed0 	bne.w	8001578 <HAL_GPIO_Init+0x14>
  }
}
 80017d8:	bf00      	nop
 80017da:	372c      	adds	r7, #44	; 0x2c
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	10210000 	.word	0x10210000
 80017e8:	10110000 	.word	0x10110000
 80017ec:	10120000 	.word	0x10120000
 80017f0:	10310000 	.word	0x10310000
 80017f4:	10320000 	.word	0x10320000
 80017f8:	10220000 	.word	0x10220000
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000
 8001804:	40010800 	.word	0x40010800
 8001808:	40010c00 	.word	0x40010c00
 800180c:	40011000 	.word	0x40011000
 8001810:	40011400 	.word	0x40011400
 8001814:	40010400 	.word	0x40010400

08001818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	887b      	ldrh	r3, [r7, #2]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e001      	b.n	800183a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	807b      	strh	r3, [r7, #2]
 8001852:	4613      	mov	r3, r2
 8001854:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001856:	787b      	ldrb	r3, [r7, #1]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185c:	887a      	ldrh	r2, [r7, #2]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001862:	e003      	b.n	800186c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	041a      	lsls	r2, r3, #16
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	611a      	str	r2, [r3, #16]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001888:	887a      	ldrh	r2, [r7, #2]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	041a      	lsls	r2, r3, #16
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43d9      	mvns	r1, r3
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	400b      	ands	r3, r1
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f806 	bl	80018d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40010400 	.word	0x40010400

080018d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e26c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8087 	beq.w	8001a1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800190c:	4b92      	ldr	r3, [pc, #584]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b04      	cmp	r3, #4
 8001916:	d00c      	beq.n	8001932 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001918:	4b8f      	ldr	r3, [pc, #572]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d112      	bne.n	800194a <HAL_RCC_OscConfig+0x5e>
 8001924:	4b8c      	ldr	r3, [pc, #560]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d10b      	bne.n	800194a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001932:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d06c      	beq.n	8001a18 <HAL_RCC_OscConfig+0x12c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d168      	bne.n	8001a18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e246      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x76>
 8001954:	4b80      	ldr	r3, [pc, #512]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a7f      	ldr	r2, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800195a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e02e      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x98>
 800196a:	4b7b      	ldr	r3, [pc, #492]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7a      	ldr	r2, [pc, #488]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b78      	ldr	r3, [pc, #480]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a77      	ldr	r2, [pc, #476]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0xbc>
 800198e:	4b72      	ldr	r3, [pc, #456]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a71      	ldr	r2, [pc, #452]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b6f      	ldr	r3, [pc, #444]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6e      	ldr	r2, [pc, #440]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 80019a8:	4b6b      	ldr	r3, [pc, #428]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6a      	ldr	r2, [pc, #424]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a67      	ldr	r2, [pc, #412]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fc92 	bl	80012f0 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff fc8e 	bl	80012f0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1fa      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b5d      	ldr	r3, [pc, #372]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xe4>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fc7e 	bl	80012f0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fc7a 	bl	80012f0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1e6      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x10c>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d063      	beq.n	8001aee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a26:	4b4c      	ldr	r3, [pc, #304]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a32:	4b49      	ldr	r3, [pc, #292]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d11c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x18c>
 8001a3e:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d116      	bne.n	8001a78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x176>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e1ba      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4939      	ldr	r1, [pc, #228]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	e03a      	b.n	8001aee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a80:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fc33 	bl	80012f0 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fc2f 	bl	80012f0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e19b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4927      	ldr	r1, [pc, #156]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fc12 	bl	80012f0 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fc0e 	bl	80012f0 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e17a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03a      	beq.n	8001b70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d019      	beq.n	8001b36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff fbf2 	bl	80012f0 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff fbee 	bl	80012f0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e15a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f000 fada 	bl	80020e8 <RCC_Delay>
 8001b34:	e01c      	b.n	8001b70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fbd8 	bl	80012f0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b42:	e00f      	b.n	8001b64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff fbd4 	bl	80012f0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d908      	bls.n	8001b64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e140      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	42420000 	.word	0x42420000
 8001b60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	4b9e      	ldr	r3, [pc, #632]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1e9      	bne.n	8001b44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80a6 	beq.w	8001cca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b82:	4b97      	ldr	r3, [pc, #604]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10d      	bne.n	8001baa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b94      	ldr	r3, [pc, #592]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a93      	ldr	r2, [pc, #588]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	61d3      	str	r3, [r2, #28]
 8001b9a:	4b91      	ldr	r3, [pc, #580]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001baa:	4b8e      	ldr	r3, [pc, #568]	; (8001de4 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb6:	4b8b      	ldr	r3, [pc, #556]	; (8001de4 <HAL_RCC_OscConfig+0x4f8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a8a      	ldr	r2, [pc, #552]	; (8001de4 <HAL_RCC_OscConfig+0x4f8>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fb95 	bl	80012f0 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7ff fb91 	bl	80012f0 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	; 0x64
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0fd      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	4b81      	ldr	r3, [pc, #516]	; (8001de4 <HAL_RCC_OscConfig+0x4f8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x312>
 8001bf0:	4b7b      	ldr	r3, [pc, #492]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a7a      	ldr	r2, [pc, #488]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	e02d      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x334>
 8001c06:	4b76      	ldr	r3, [pc, #472]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a75      	ldr	r2, [pc, #468]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	4b73      	ldr	r3, [pc, #460]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a72      	ldr	r2, [pc, #456]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	e01c      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d10c      	bne.n	8001c42 <HAL_RCC_OscConfig+0x356>
 8001c28:	4b6d      	ldr	r3, [pc, #436]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4a6c      	ldr	r2, [pc, #432]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	6213      	str	r3, [r2, #32]
 8001c34:	4b6a      	ldr	r3, [pc, #424]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a69      	ldr	r2, [pc, #420]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	e00b      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001c42:	4b67      	ldr	r3, [pc, #412]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a66      	ldr	r2, [pc, #408]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6213      	str	r3, [r2, #32]
 8001c4e:	4b64      	ldr	r3, [pc, #400]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a63      	ldr	r2, [pc, #396]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d015      	beq.n	8001c8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fb45 	bl	80012f0 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7ff fb41 	bl	80012f0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e0ab      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	4b57      	ldr	r3, [pc, #348]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ee      	beq.n	8001c6a <HAL_RCC_OscConfig+0x37e>
 8001c8c:	e014      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fb2f 	bl	80012f0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff fb2b 	bl	80012f0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e095      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1ee      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d105      	bne.n	8001cca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbe:	4b48      	ldr	r3, [pc, #288]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a47      	ldr	r2, [pc, #284]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8081 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd4:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d061      	beq.n	8001da4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d146      	bne.n	8001d76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce8:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <HAL_RCC_OscConfig+0x4fc>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7ff faff 	bl	80012f0 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff fafb 	bl	80012f0 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e067      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d108      	bne.n	8001d30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d1e:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	492d      	ldr	r1, [pc, #180]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d30:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a19      	ldr	r1, [r3, #32]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	430b      	orrs	r3, r1
 8001d42:	4927      	ldr	r1, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <HAL_RCC_OscConfig+0x4fc>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff facf 	bl	80012f0 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d56:	f7ff facb 	bl	80012f0 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e037      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x46a>
 8001d74:	e02f      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_RCC_OscConfig+0x4fc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fab8 	bl	80012f0 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff fab4 	bl	80012f0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e020      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x498>
 8001da2:	e018      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e013      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40007000 	.word	0x40007000
 8001de8:	42420060 	.word	0x42420060

08001dec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0d0      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4965      	ldr	r1, [pc, #404]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0b8      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a58      	ldr	r2, [pc, #352]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	494d      	ldr	r1, [pc, #308]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d040      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d115      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e07f      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e073      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e06b      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eca:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f023 0203 	bic.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4936      	ldr	r1, [pc, #216]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001edc:	f7ff fa08 	bl	80012f0 <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f7ff fa04 	bl	80012f0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e053      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 020c 	and.w	r2, r3, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1eb      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d210      	bcs.n	8001f3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4922      	ldr	r1, [pc, #136]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e032      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4916      	ldr	r1, [pc, #88]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f7a:	f000 f821 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f7e:	4601      	mov	r1, r0
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1d0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f966 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08003c54 	.word	0x08003c54
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b490      	push	{r4, r7}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fc8:	1d3c      	adds	r4, r7, #4
 8001fca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fd0:	4b28      	ldr	r3, [pc, #160]	; (8002074 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d002      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0x40>
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d003      	beq.n	8002006 <HAL_RCC_GetSysClockFreq+0x46>
 8001ffe:	e02d      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002002:	623b      	str	r3, [r7, #32]
      break;
 8002004:	e02d      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	0c9b      	lsrs	r3, r3, #18
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002012:	4413      	add	r3, r2
 8002014:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002018:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	0c5b      	lsrs	r3, r3, #17
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002032:	4413      	add	r3, r2
 8002034:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002038:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	4a0f      	ldr	r2, [pc, #60]	; (800207c <HAL_RCC_GetSysClockFreq+0xbc>)
 800203e:	fb02 f203 	mul.w	r2, r2, r3
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	e004      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	623b      	str	r3, [r7, #32]
      break;
 800205a:	e002      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_RCC_GetSysClockFreq+0xbc>)
 800205e:	623b      	str	r3, [r7, #32]
      break;
 8002060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002062:	6a3b      	ldr	r3, [r7, #32]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bc90      	pop	{r4, r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	08003c40 	.word	0x08003c40
 8002074:	08003c50 	.word	0x08003c50
 8002078:	40021000 	.word	0x40021000
 800207c:	007a1200 	.word	0x007a1200
 8002080:	003d0900 	.word	0x003d0900

08002084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002088:	4b02      	ldr	r3, [pc, #8]	; (8002094 <HAL_RCC_GetHCLKFreq+0x10>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	20000000 	.word	0x20000000

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800209c:	f7ff fff2 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020a0:	4601      	mov	r1, r0
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ae:	5cd3      	ldrb	r3, [r2, r3]
 80020b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	08003c64 	.word	0x08003c64

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020c4:	f7ff ffde 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020c8:	4601      	mov	r1, r0
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	0adb      	lsrs	r3, r3, #11
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4a03      	ldr	r2, [pc, #12]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08003c64 	.word	0x08003c64

080020e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <RCC_Delay+0x34>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <RCC_Delay+0x38>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	0a5b      	lsrs	r3, r3, #9
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002104:	bf00      	nop
  }
  while (Delay --);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1e5a      	subs	r2, r3, #1
 800210a:	60fa      	str	r2, [r7, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f9      	bne.n	8002104 <RCC_Delay+0x1c>
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000000 	.word	0x20000000
 8002120:	10624dd3 	.word	0x10624dd3

08002124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e041      	b.n	80021ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fef2 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3304      	adds	r3, #4
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f000 fa64 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d001      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e03a      	b.n	8002252 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_TIM_Base_Start_IT+0x98>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00e      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x58>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002206:	d009      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x58>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <HAL_TIM_Base_Start_IT+0x9c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x58>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_TIM_Base_Start_IT+0xa0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d111      	bne.n	8002240 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b06      	cmp	r3, #6
 800222c:	d010      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223e:	e007      	b.n	8002250 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40012c00 	.word	0x40012c00
 8002260:	40000400 	.word	0x40000400
 8002264:	40000800 	.word	0x40000800

08002268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b02      	cmp	r3, #2
 800227c:	d122      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b02      	cmp	r3, #2
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0202 	mvn.w	r2, #2
 8002294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f9a4 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f997 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f9a6 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d122      	bne.n	8002318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11b      	bne.n	8002318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0204 	mvn.w	r2, #4
 80022e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f97a 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 8002304:	e005      	b.n	8002312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f96d 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f97c 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b08      	cmp	r3, #8
 8002324:	d122      	bne.n	800236c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b08      	cmp	r3, #8
 8002332:	d11b      	bne.n	800236c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0208 	mvn.w	r2, #8
 800233c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2204      	movs	r2, #4
 8002342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f950 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 8002358:	e005      	b.n	8002366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f943 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f952 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b10      	cmp	r3, #16
 8002378:	d122      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b10      	cmp	r3, #16
 8002386:	d11b      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0210 	mvn.w	r2, #16
 8002390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2208      	movs	r2, #8
 8002396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f926 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 80023ac:	e005      	b.n	80023ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f919 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f928 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10e      	bne.n	80023ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d107      	bne.n	80023ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0201 	mvn.w	r2, #1
 80023e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe f892 	bl	8000510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f6:	2b80      	cmp	r3, #128	; 0x80
 80023f8:	d10e      	bne.n	8002418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002404:	2b80      	cmp	r3, #128	; 0x80
 8002406:	d107      	bne.n	8002418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fa6b 	bl	80028ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d10e      	bne.n	8002444 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d107      	bne.n	8002444 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800243c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f8ec 	bl	800261c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b20      	cmp	r3, #32
 8002450:	d10e      	bne.n	8002470 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b20      	cmp	r3, #32
 800245e:	d107      	bne.n	8002470 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0220 	mvn.w	r2, #32
 8002468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fa36 	bl	80028dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_TIM_ConfigClockSource+0x18>
 800248c:	2302      	movs	r3, #2
 800248e:	e0a6      	b.n	80025de <HAL_TIM_ConfigClockSource+0x166>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d067      	beq.n	8002598 <HAL_TIM_ConfigClockSource+0x120>
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d80b      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x6c>
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d073      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0x140>
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d802      	bhi.n	80024da <HAL_TIM_ConfigClockSource+0x62>
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d06f      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024d8:	e078      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d06c      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0x140>
 80024de:	2b30      	cmp	r3, #48	; 0x30
 80024e0:	d06a      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80024e2:	e073      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024e4:	2b70      	cmp	r3, #112	; 0x70
 80024e6:	d00d      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0x8c>
 80024e8:	2b70      	cmp	r3, #112	; 0x70
 80024ea:	d804      	bhi.n	80024f6 <HAL_TIM_ConfigClockSource+0x7e>
 80024ec:	2b50      	cmp	r3, #80	; 0x50
 80024ee:	d033      	beq.n	8002558 <HAL_TIM_ConfigClockSource+0xe0>
 80024f0:	2b60      	cmp	r3, #96	; 0x60
 80024f2:	d041      	beq.n	8002578 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80024f4:	e06a      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fa:	d066      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x152>
 80024fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002500:	d017      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002502:	e063      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f000 f965 	bl	80027e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002526:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	609a      	str	r2, [r3, #8]
      break;
 8002530:	e04c      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6899      	ldr	r1, [r3, #8]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f000 f94e 	bl	80027e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002554:	609a      	str	r2, [r3, #8]
      break;
 8002556:	e039      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	461a      	mov	r2, r3
 8002566:	f000 f8c5 	bl	80026f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2150      	movs	r1, #80	; 0x50
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f91c 	bl	80027ae <TIM_ITRx_SetConfig>
      break;
 8002576:	e029      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	461a      	mov	r2, r3
 8002586:	f000 f8e3 	bl	8002750 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2160      	movs	r1, #96	; 0x60
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f90c 	bl	80027ae <TIM_ITRx_SetConfig>
      break;
 8002596:	e019      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	461a      	mov	r2, r3
 80025a6:	f000 f8a5 	bl	80026f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2140      	movs	r1, #64	; 0x40
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 f8fc 	bl	80027ae <TIM_ITRx_SetConfig>
      break;
 80025b6:	e009      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f000 f8f3 	bl	80027ae <TIM_ITRx_SetConfig>
        break;
 80025c8:	e000      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
	...

08002630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a29      	ldr	r2, [pc, #164]	; (80026e8 <TIM_Base_SetConfig+0xb8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00b      	beq.n	8002660 <TIM_Base_SetConfig+0x30>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264e:	d007      	beq.n	8002660 <TIM_Base_SetConfig+0x30>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a26      	ldr	r2, [pc, #152]	; (80026ec <TIM_Base_SetConfig+0xbc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d003      	beq.n	8002660 <TIM_Base_SetConfig+0x30>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <TIM_Base_SetConfig+0xc0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d108      	bne.n	8002672 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <TIM_Base_SetConfig+0xb8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00b      	beq.n	8002692 <TIM_Base_SetConfig+0x62>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002680:	d007      	beq.n	8002692 <TIM_Base_SetConfig+0x62>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a19      	ldr	r2, [pc, #100]	; (80026ec <TIM_Base_SetConfig+0xbc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d003      	beq.n	8002692 <TIM_Base_SetConfig+0x62>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <TIM_Base_SetConfig+0xc0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d108      	bne.n	80026a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <TIM_Base_SetConfig+0xb8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d103      	bne.n	80026d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	615a      	str	r2, [r3, #20]
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40000800 	.word	0x40000800

080026f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	f023 0201 	bic.w	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800271e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f023 030a 	bic.w	r3, r3, #10
 8002730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	621a      	str	r2, [r3, #32]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f023 0210 	bic.w	r2, r3, #16
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800277a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	031b      	lsls	r3, r3, #12
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800278c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	621a      	str	r2, [r3, #32]
}
 80027a4:	bf00      	nop
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f043 0307 	orr.w	r3, r3, #7
 80027d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	609a      	str	r2, [r3, #8]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b087      	sub	sp, #28
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	021a      	lsls	r2, r3, #8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	431a      	orrs	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4313      	orrs	r3, r2
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	609a      	str	r2, [r3, #8]
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002834:	2302      	movs	r3, #2
 8002836:	e046      	b.n	80028c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00e      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002884:	d009      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d004      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10c      	bne.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800

080028dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e03f      	b.n	8002992 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fb44 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f905 	bl	8002b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b08a      	sub	sp, #40	; 0x28
 800299e:	af02      	add	r7, sp, #8
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d17c      	bne.n	8002ab4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_UART_Transmit+0x2c>
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e075      	b.n	8002ab6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_UART_Transmit+0x3e>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e06e      	b.n	8002ab6 <HAL_UART_Transmit+0x11c>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2221      	movs	r2, #33	; 0x21
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ee:	f7fe fc7f 	bl	80012f0 <HAL_GetTick>
 80029f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	88fa      	ldrh	r2, [r7, #6]
 80029f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a08:	d108      	bne.n	8002a1c <HAL_UART_Transmit+0x82>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d104      	bne.n	8002a1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e003      	b.n	8002a24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a2c:	e02a      	b.n	8002a84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2200      	movs	r2, #0
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f840 	bl	8002abe <UART_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e036      	b.n	8002ab6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10b      	bne.n	8002a66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3302      	adds	r3, #2
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	e007      	b.n	8002a76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	3301      	adds	r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1cf      	bne.n	8002a2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2200      	movs	r2, #0
 8002a96:	2140      	movs	r1, #64	; 0x40
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f810 	bl	8002abe <UART_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e006      	b.n	8002ab6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e000      	b.n	8002ab6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ab4:	2302      	movs	r3, #2
  }
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ace:	e02c      	b.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d028      	beq.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <UART_WaitOnFlagUntilTimeout+0x30>
 8002ade:	f7fe fc07 	bl	80012f0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d21d      	bcs.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002afc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e00f      	b.n	8002b4a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	bf0c      	ite	eq
 8002b3a:	2301      	moveq	r3, #1
 8002b3c:	2300      	movne	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d0c3      	beq.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b8e:	f023 030c 	bic.w	r3, r3, #12
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2c      	ldr	r2, [pc, #176]	; (8002c68 <UART_SetConfig+0x114>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bbc:	f7ff fa80 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	e002      	b.n	8002bca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bc4:	f7ff fa68 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8002bc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009a      	lsls	r2, r3, #2
 8002bd4:	441a      	add	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <UART_SetConfig+0x118>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	0119      	lsls	r1, r3, #4
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009a      	lsls	r2, r3, #2
 8002bf4:	441a      	add	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <UART_SetConfig+0x118>)
 8002c02:	fba3 0302 	umull	r0, r3, r3, r2
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2064      	movs	r0, #100	; 0x64
 8002c0a:	fb00 f303 	mul.w	r3, r0, r3
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	3332      	adds	r3, #50	; 0x32
 8002c14:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <UART_SetConfig+0x118>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c20:	4419      	add	r1, r3
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009a      	lsls	r2, r3, #2
 8002c2c:	441a      	add	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <UART_SetConfig+0x118>)
 8002c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2064      	movs	r0, #100	; 0x64
 8002c42:	fb00 f303 	mul.w	r3, r0, r3
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	3332      	adds	r3, #50	; 0x32
 8002c4c:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <UART_SetConfig+0x118>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	440a      	add	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	51eb851f 	.word	0x51eb851f

08002c70 <__errno>:
 8002c70:	4b01      	ldr	r3, [pc, #4]	; (8002c78 <__errno+0x8>)
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	2000000c 	.word	0x2000000c

08002c7c <__libc_init_array>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	2500      	movs	r5, #0
 8002c80:	4e0c      	ldr	r6, [pc, #48]	; (8002cb4 <__libc_init_array+0x38>)
 8002c82:	4c0d      	ldr	r4, [pc, #52]	; (8002cb8 <__libc_init_array+0x3c>)
 8002c84:	1ba4      	subs	r4, r4, r6
 8002c86:	10a4      	asrs	r4, r4, #2
 8002c88:	42a5      	cmp	r5, r4
 8002c8a:	d109      	bne.n	8002ca0 <__libc_init_array+0x24>
 8002c8c:	f000 ff74 	bl	8003b78 <_init>
 8002c90:	2500      	movs	r5, #0
 8002c92:	4e0a      	ldr	r6, [pc, #40]	; (8002cbc <__libc_init_array+0x40>)
 8002c94:	4c0a      	ldr	r4, [pc, #40]	; (8002cc0 <__libc_init_array+0x44>)
 8002c96:	1ba4      	subs	r4, r4, r6
 8002c98:	10a4      	asrs	r4, r4, #2
 8002c9a:	42a5      	cmp	r5, r4
 8002c9c:	d105      	bne.n	8002caa <__libc_init_array+0x2e>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ca4:	4798      	blx	r3
 8002ca6:	3501      	adds	r5, #1
 8002ca8:	e7ee      	b.n	8002c88 <__libc_init_array+0xc>
 8002caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cae:	4798      	blx	r3
 8002cb0:	3501      	adds	r5, #1
 8002cb2:	e7f2      	b.n	8002c9a <__libc_init_array+0x1e>
 8002cb4:	08003d04 	.word	0x08003d04
 8002cb8:	08003d04 	.word	0x08003d04
 8002cbc:	08003d04 	.word	0x08003d04
 8002cc0:	08003d08 	.word	0x08003d08

08002cc4 <memset>:
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4402      	add	r2, r0
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <iprintf>:
 8002cd4:	b40f      	push	{r0, r1, r2, r3}
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <iprintf+0x2c>)
 8002cd8:	b513      	push	{r0, r1, r4, lr}
 8002cda:	681c      	ldr	r4, [r3, #0]
 8002cdc:	b124      	cbz	r4, 8002ce8 <iprintf+0x14>
 8002cde:	69a3      	ldr	r3, [r4, #24]
 8002ce0:	b913      	cbnz	r3, 8002ce8 <iprintf+0x14>
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f000 fa22 	bl	800312c <__sinit>
 8002ce8:	ab05      	add	r3, sp, #20
 8002cea:	9a04      	ldr	r2, [sp, #16]
 8002cec:	68a1      	ldr	r1, [r4, #8]
 8002cee:	4620      	mov	r0, r4
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	f000 fbd7 	bl	80034a4 <_vfiprintf_r>
 8002cf6:	b002      	add	sp, #8
 8002cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cfc:	b004      	add	sp, #16
 8002cfe:	4770      	bx	lr
 8002d00:	2000000c 	.word	0x2000000c

08002d04 <_puts_r>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	460e      	mov	r6, r1
 8002d08:	4605      	mov	r5, r0
 8002d0a:	b118      	cbz	r0, 8002d14 <_puts_r+0x10>
 8002d0c:	6983      	ldr	r3, [r0, #24]
 8002d0e:	b90b      	cbnz	r3, 8002d14 <_puts_r+0x10>
 8002d10:	f000 fa0c 	bl	800312c <__sinit>
 8002d14:	69ab      	ldr	r3, [r5, #24]
 8002d16:	68ac      	ldr	r4, [r5, #8]
 8002d18:	b913      	cbnz	r3, 8002d20 <_puts_r+0x1c>
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f000 fa06 	bl	800312c <__sinit>
 8002d20:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <_puts_r+0xac>)
 8002d22:	429c      	cmp	r4, r3
 8002d24:	d117      	bne.n	8002d56 <_puts_r+0x52>
 8002d26:	686c      	ldr	r4, [r5, #4]
 8002d28:	89a3      	ldrh	r3, [r4, #12]
 8002d2a:	071b      	lsls	r3, r3, #28
 8002d2c:	d51d      	bpl.n	8002d6a <_puts_r+0x66>
 8002d2e:	6923      	ldr	r3, [r4, #16]
 8002d30:	b1db      	cbz	r3, 8002d6a <_puts_r+0x66>
 8002d32:	3e01      	subs	r6, #1
 8002d34:	68a3      	ldr	r3, [r4, #8]
 8002d36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	60a3      	str	r3, [r4, #8]
 8002d3e:	b9e9      	cbnz	r1, 8002d7c <_puts_r+0x78>
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	da2e      	bge.n	8002da2 <_puts_r+0x9e>
 8002d44:	4622      	mov	r2, r4
 8002d46:	210a      	movs	r1, #10
 8002d48:	4628      	mov	r0, r5
 8002d4a:	f000 f83f 	bl	8002dcc <__swbuf_r>
 8002d4e:	3001      	adds	r0, #1
 8002d50:	d011      	beq.n	8002d76 <_puts_r+0x72>
 8002d52:	200a      	movs	r0, #10
 8002d54:	e011      	b.n	8002d7a <_puts_r+0x76>
 8002d56:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <_puts_r+0xb0>)
 8002d58:	429c      	cmp	r4, r3
 8002d5a:	d101      	bne.n	8002d60 <_puts_r+0x5c>
 8002d5c:	68ac      	ldr	r4, [r5, #8]
 8002d5e:	e7e3      	b.n	8002d28 <_puts_r+0x24>
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <_puts_r+0xb4>)
 8002d62:	429c      	cmp	r4, r3
 8002d64:	bf08      	it	eq
 8002d66:	68ec      	ldreq	r4, [r5, #12]
 8002d68:	e7de      	b.n	8002d28 <_puts_r+0x24>
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f000 f87f 	bl	8002e70 <__swsetup_r>
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d0dd      	beq.n	8002d32 <_puts_r+0x2e>
 8002d76:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	da04      	bge.n	8002d8a <_puts_r+0x86>
 8002d80:	69a2      	ldr	r2, [r4, #24]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	dc06      	bgt.n	8002d94 <_puts_r+0x90>
 8002d86:	290a      	cmp	r1, #10
 8002d88:	d004      	beq.n	8002d94 <_puts_r+0x90>
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	6022      	str	r2, [r4, #0]
 8002d90:	7019      	strb	r1, [r3, #0]
 8002d92:	e7cf      	b.n	8002d34 <_puts_r+0x30>
 8002d94:	4622      	mov	r2, r4
 8002d96:	4628      	mov	r0, r5
 8002d98:	f000 f818 	bl	8002dcc <__swbuf_r>
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	d1c9      	bne.n	8002d34 <_puts_r+0x30>
 8002da0:	e7e9      	b.n	8002d76 <_puts_r+0x72>
 8002da2:	200a      	movs	r0, #10
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	6022      	str	r2, [r4, #0]
 8002daa:	7018      	strb	r0, [r3, #0]
 8002dac:	e7e5      	b.n	8002d7a <_puts_r+0x76>
 8002dae:	bf00      	nop
 8002db0:	08003c90 	.word	0x08003c90
 8002db4:	08003cb0 	.word	0x08003cb0
 8002db8:	08003c70 	.word	0x08003c70

08002dbc <puts>:
 8002dbc:	4b02      	ldr	r3, [pc, #8]	; (8002dc8 <puts+0xc>)
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	f7ff bf9f 	b.w	8002d04 <_puts_r>
 8002dc6:	bf00      	nop
 8002dc8:	2000000c 	.word	0x2000000c

08002dcc <__swbuf_r>:
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	460e      	mov	r6, r1
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	b118      	cbz	r0, 8002dde <__swbuf_r+0x12>
 8002dd6:	6983      	ldr	r3, [r0, #24]
 8002dd8:	b90b      	cbnz	r3, 8002dde <__swbuf_r+0x12>
 8002dda:	f000 f9a7 	bl	800312c <__sinit>
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <__swbuf_r+0x98>)
 8002de0:	429c      	cmp	r4, r3
 8002de2:	d12a      	bne.n	8002e3a <__swbuf_r+0x6e>
 8002de4:	686c      	ldr	r4, [r5, #4]
 8002de6:	69a3      	ldr	r3, [r4, #24]
 8002de8:	60a3      	str	r3, [r4, #8]
 8002dea:	89a3      	ldrh	r3, [r4, #12]
 8002dec:	071a      	lsls	r2, r3, #28
 8002dee:	d52e      	bpl.n	8002e4e <__swbuf_r+0x82>
 8002df0:	6923      	ldr	r3, [r4, #16]
 8002df2:	b363      	cbz	r3, 8002e4e <__swbuf_r+0x82>
 8002df4:	6923      	ldr	r3, [r4, #16]
 8002df6:	6820      	ldr	r0, [r4, #0]
 8002df8:	b2f6      	uxtb	r6, r6
 8002dfa:	1ac0      	subs	r0, r0, r3
 8002dfc:	6963      	ldr	r3, [r4, #20]
 8002dfe:	4637      	mov	r7, r6
 8002e00:	4283      	cmp	r3, r0
 8002e02:	dc04      	bgt.n	8002e0e <__swbuf_r+0x42>
 8002e04:	4621      	mov	r1, r4
 8002e06:	4628      	mov	r0, r5
 8002e08:	f000 f926 	bl	8003058 <_fflush_r>
 8002e0c:	bb28      	cbnz	r0, 8002e5a <__swbuf_r+0x8e>
 8002e0e:	68a3      	ldr	r3, [r4, #8]
 8002e10:	3001      	adds	r0, #1
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60a3      	str	r3, [r4, #8]
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	6022      	str	r2, [r4, #0]
 8002e1c:	701e      	strb	r6, [r3, #0]
 8002e1e:	6963      	ldr	r3, [r4, #20]
 8002e20:	4283      	cmp	r3, r0
 8002e22:	d004      	beq.n	8002e2e <__swbuf_r+0x62>
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	07db      	lsls	r3, r3, #31
 8002e28:	d519      	bpl.n	8002e5e <__swbuf_r+0x92>
 8002e2a:	2e0a      	cmp	r6, #10
 8002e2c:	d117      	bne.n	8002e5e <__swbuf_r+0x92>
 8002e2e:	4621      	mov	r1, r4
 8002e30:	4628      	mov	r0, r5
 8002e32:	f000 f911 	bl	8003058 <_fflush_r>
 8002e36:	b190      	cbz	r0, 8002e5e <__swbuf_r+0x92>
 8002e38:	e00f      	b.n	8002e5a <__swbuf_r+0x8e>
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <__swbuf_r+0x9c>)
 8002e3c:	429c      	cmp	r4, r3
 8002e3e:	d101      	bne.n	8002e44 <__swbuf_r+0x78>
 8002e40:	68ac      	ldr	r4, [r5, #8]
 8002e42:	e7d0      	b.n	8002de6 <__swbuf_r+0x1a>
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <__swbuf_r+0xa0>)
 8002e46:	429c      	cmp	r4, r3
 8002e48:	bf08      	it	eq
 8002e4a:	68ec      	ldreq	r4, [r5, #12]
 8002e4c:	e7cb      	b.n	8002de6 <__swbuf_r+0x1a>
 8002e4e:	4621      	mov	r1, r4
 8002e50:	4628      	mov	r0, r5
 8002e52:	f000 f80d 	bl	8002e70 <__swsetup_r>
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d0cc      	beq.n	8002df4 <__swbuf_r+0x28>
 8002e5a:	f04f 37ff 	mov.w	r7, #4294967295
 8002e5e:	4638      	mov	r0, r7
 8002e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	08003c90 	.word	0x08003c90
 8002e68:	08003cb0 	.word	0x08003cb0
 8002e6c:	08003c70 	.word	0x08003c70

08002e70 <__swsetup_r>:
 8002e70:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <__swsetup_r+0xcc>)
 8002e72:	b570      	push	{r4, r5, r6, lr}
 8002e74:	681d      	ldr	r5, [r3, #0]
 8002e76:	4606      	mov	r6, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	b125      	cbz	r5, 8002e86 <__swsetup_r+0x16>
 8002e7c:	69ab      	ldr	r3, [r5, #24]
 8002e7e:	b913      	cbnz	r3, 8002e86 <__swsetup_r+0x16>
 8002e80:	4628      	mov	r0, r5
 8002e82:	f000 f953 	bl	800312c <__sinit>
 8002e86:	4b2e      	ldr	r3, [pc, #184]	; (8002f40 <__swsetup_r+0xd0>)
 8002e88:	429c      	cmp	r4, r3
 8002e8a:	d10f      	bne.n	8002eac <__swsetup_r+0x3c>
 8002e8c:	686c      	ldr	r4, [r5, #4]
 8002e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	0715      	lsls	r5, r2, #28
 8002e96:	d42c      	bmi.n	8002ef2 <__swsetup_r+0x82>
 8002e98:	06d0      	lsls	r0, r2, #27
 8002e9a:	d411      	bmi.n	8002ec0 <__swsetup_r+0x50>
 8002e9c:	2209      	movs	r2, #9
 8002e9e:	6032      	str	r2, [r6, #0]
 8002ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea4:	81a3      	strh	r3, [r4, #12]
 8002ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eaa:	e03e      	b.n	8002f2a <__swsetup_r+0xba>
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <__swsetup_r+0xd4>)
 8002eae:	429c      	cmp	r4, r3
 8002eb0:	d101      	bne.n	8002eb6 <__swsetup_r+0x46>
 8002eb2:	68ac      	ldr	r4, [r5, #8]
 8002eb4:	e7eb      	b.n	8002e8e <__swsetup_r+0x1e>
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <__swsetup_r+0xd8>)
 8002eb8:	429c      	cmp	r4, r3
 8002eba:	bf08      	it	eq
 8002ebc:	68ec      	ldreq	r4, [r5, #12]
 8002ebe:	e7e6      	b.n	8002e8e <__swsetup_r+0x1e>
 8002ec0:	0751      	lsls	r1, r2, #29
 8002ec2:	d512      	bpl.n	8002eea <__swsetup_r+0x7a>
 8002ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ec6:	b141      	cbz	r1, 8002eda <__swsetup_r+0x6a>
 8002ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ecc:	4299      	cmp	r1, r3
 8002ece:	d002      	beq.n	8002ed6 <__swsetup_r+0x66>
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	f000 fa19 	bl	8003308 <_free_r>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8002eda:	89a3      	ldrh	r3, [r4, #12]
 8002edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ee0:	81a3      	strh	r3, [r4, #12]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	6063      	str	r3, [r4, #4]
 8002ee6:	6923      	ldr	r3, [r4, #16]
 8002ee8:	6023      	str	r3, [r4, #0]
 8002eea:	89a3      	ldrh	r3, [r4, #12]
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	6923      	ldr	r3, [r4, #16]
 8002ef4:	b94b      	cbnz	r3, 8002f0a <__swsetup_r+0x9a>
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f00:	d003      	beq.n	8002f0a <__swsetup_r+0x9a>
 8002f02:	4621      	mov	r1, r4
 8002f04:	4630      	mov	r0, r6
 8002f06:	f000 f9bf 	bl	8003288 <__smakebuf_r>
 8002f0a:	89a2      	ldrh	r2, [r4, #12]
 8002f0c:	f012 0301 	ands.w	r3, r2, #1
 8002f10:	d00c      	beq.n	8002f2c <__swsetup_r+0xbc>
 8002f12:	2300      	movs	r3, #0
 8002f14:	60a3      	str	r3, [r4, #8]
 8002f16:	6963      	ldr	r3, [r4, #20]
 8002f18:	425b      	negs	r3, r3
 8002f1a:	61a3      	str	r3, [r4, #24]
 8002f1c:	6923      	ldr	r3, [r4, #16]
 8002f1e:	b953      	cbnz	r3, 8002f36 <__swsetup_r+0xc6>
 8002f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002f28:	d1ba      	bne.n	8002ea0 <__swsetup_r+0x30>
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	0792      	lsls	r2, r2, #30
 8002f2e:	bf58      	it	pl
 8002f30:	6963      	ldrpl	r3, [r4, #20]
 8002f32:	60a3      	str	r3, [r4, #8]
 8002f34:	e7f2      	b.n	8002f1c <__swsetup_r+0xac>
 8002f36:	2000      	movs	r0, #0
 8002f38:	e7f7      	b.n	8002f2a <__swsetup_r+0xba>
 8002f3a:	bf00      	nop
 8002f3c:	2000000c 	.word	0x2000000c
 8002f40:	08003c90 	.word	0x08003c90
 8002f44:	08003cb0 	.word	0x08003cb0
 8002f48:	08003c70 	.word	0x08003c70

08002f4c <__sflush_r>:
 8002f4c:	898a      	ldrh	r2, [r1, #12]
 8002f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f52:	4605      	mov	r5, r0
 8002f54:	0710      	lsls	r0, r2, #28
 8002f56:	460c      	mov	r4, r1
 8002f58:	d458      	bmi.n	800300c <__sflush_r+0xc0>
 8002f5a:	684b      	ldr	r3, [r1, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	dc05      	bgt.n	8002f6c <__sflush_r+0x20>
 8002f60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	dc02      	bgt.n	8002f6c <__sflush_r+0x20>
 8002f66:	2000      	movs	r0, #0
 8002f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f6e:	2e00      	cmp	r6, #0
 8002f70:	d0f9      	beq.n	8002f66 <__sflush_r+0x1a>
 8002f72:	2300      	movs	r3, #0
 8002f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f78:	682f      	ldr	r7, [r5, #0]
 8002f7a:	6a21      	ldr	r1, [r4, #32]
 8002f7c:	602b      	str	r3, [r5, #0]
 8002f7e:	d032      	beq.n	8002fe6 <__sflush_r+0x9a>
 8002f80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f82:	89a3      	ldrh	r3, [r4, #12]
 8002f84:	075a      	lsls	r2, r3, #29
 8002f86:	d505      	bpl.n	8002f94 <__sflush_r+0x48>
 8002f88:	6863      	ldr	r3, [r4, #4]
 8002f8a:	1ac0      	subs	r0, r0, r3
 8002f8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f8e:	b10b      	cbz	r3, 8002f94 <__sflush_r+0x48>
 8002f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f92:	1ac0      	subs	r0, r0, r3
 8002f94:	2300      	movs	r3, #0
 8002f96:	4602      	mov	r2, r0
 8002f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f9a:	6a21      	ldr	r1, [r4, #32]
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	47b0      	blx	r6
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	89a3      	ldrh	r3, [r4, #12]
 8002fa4:	d106      	bne.n	8002fb4 <__sflush_r+0x68>
 8002fa6:	6829      	ldr	r1, [r5, #0]
 8002fa8:	291d      	cmp	r1, #29
 8002faa:	d848      	bhi.n	800303e <__sflush_r+0xf2>
 8002fac:	4a29      	ldr	r2, [pc, #164]	; (8003054 <__sflush_r+0x108>)
 8002fae:	40ca      	lsrs	r2, r1
 8002fb0:	07d6      	lsls	r6, r2, #31
 8002fb2:	d544      	bpl.n	800303e <__sflush_r+0xf2>
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	6062      	str	r2, [r4, #4]
 8002fb8:	6922      	ldr	r2, [r4, #16]
 8002fba:	04d9      	lsls	r1, r3, #19
 8002fbc:	6022      	str	r2, [r4, #0]
 8002fbe:	d504      	bpl.n	8002fca <__sflush_r+0x7e>
 8002fc0:	1c42      	adds	r2, r0, #1
 8002fc2:	d101      	bne.n	8002fc8 <__sflush_r+0x7c>
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	b903      	cbnz	r3, 8002fca <__sflush_r+0x7e>
 8002fc8:	6560      	str	r0, [r4, #84]	; 0x54
 8002fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fcc:	602f      	str	r7, [r5, #0]
 8002fce:	2900      	cmp	r1, #0
 8002fd0:	d0c9      	beq.n	8002f66 <__sflush_r+0x1a>
 8002fd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fd6:	4299      	cmp	r1, r3
 8002fd8:	d002      	beq.n	8002fe0 <__sflush_r+0x94>
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f000 f994 	bl	8003308 <_free_r>
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	6360      	str	r0, [r4, #52]	; 0x34
 8002fe4:	e7c0      	b.n	8002f68 <__sflush_r+0x1c>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	4628      	mov	r0, r5
 8002fea:	47b0      	blx	r6
 8002fec:	1c41      	adds	r1, r0, #1
 8002fee:	d1c8      	bne.n	8002f82 <__sflush_r+0x36>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0c5      	beq.n	8002f82 <__sflush_r+0x36>
 8002ff6:	2b1d      	cmp	r3, #29
 8002ff8:	d001      	beq.n	8002ffe <__sflush_r+0xb2>
 8002ffa:	2b16      	cmp	r3, #22
 8002ffc:	d101      	bne.n	8003002 <__sflush_r+0xb6>
 8002ffe:	602f      	str	r7, [r5, #0]
 8003000:	e7b1      	b.n	8002f66 <__sflush_r+0x1a>
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003008:	81a3      	strh	r3, [r4, #12]
 800300a:	e7ad      	b.n	8002f68 <__sflush_r+0x1c>
 800300c:	690f      	ldr	r7, [r1, #16]
 800300e:	2f00      	cmp	r7, #0
 8003010:	d0a9      	beq.n	8002f66 <__sflush_r+0x1a>
 8003012:	0793      	lsls	r3, r2, #30
 8003014:	bf18      	it	ne
 8003016:	2300      	movne	r3, #0
 8003018:	680e      	ldr	r6, [r1, #0]
 800301a:	bf08      	it	eq
 800301c:	694b      	ldreq	r3, [r1, #20]
 800301e:	eba6 0807 	sub.w	r8, r6, r7
 8003022:	600f      	str	r7, [r1, #0]
 8003024:	608b      	str	r3, [r1, #8]
 8003026:	f1b8 0f00 	cmp.w	r8, #0
 800302a:	dd9c      	ble.n	8002f66 <__sflush_r+0x1a>
 800302c:	4643      	mov	r3, r8
 800302e:	463a      	mov	r2, r7
 8003030:	6a21      	ldr	r1, [r4, #32]
 8003032:	4628      	mov	r0, r5
 8003034:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003036:	47b0      	blx	r6
 8003038:	2800      	cmp	r0, #0
 800303a:	dc06      	bgt.n	800304a <__sflush_r+0xfe>
 800303c:	89a3      	ldrh	r3, [r4, #12]
 800303e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003042:	81a3      	strh	r3, [r4, #12]
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	e78e      	b.n	8002f68 <__sflush_r+0x1c>
 800304a:	4407      	add	r7, r0
 800304c:	eba8 0800 	sub.w	r8, r8, r0
 8003050:	e7e9      	b.n	8003026 <__sflush_r+0xda>
 8003052:	bf00      	nop
 8003054:	20400001 	.word	0x20400001

08003058 <_fflush_r>:
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	690b      	ldr	r3, [r1, #16]
 800305c:	4605      	mov	r5, r0
 800305e:	460c      	mov	r4, r1
 8003060:	b1db      	cbz	r3, 800309a <_fflush_r+0x42>
 8003062:	b118      	cbz	r0, 800306c <_fflush_r+0x14>
 8003064:	6983      	ldr	r3, [r0, #24]
 8003066:	b90b      	cbnz	r3, 800306c <_fflush_r+0x14>
 8003068:	f000 f860 	bl	800312c <__sinit>
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <_fflush_r+0x48>)
 800306e:	429c      	cmp	r4, r3
 8003070:	d109      	bne.n	8003086 <_fflush_r+0x2e>
 8003072:	686c      	ldr	r4, [r5, #4]
 8003074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003078:	b17b      	cbz	r3, 800309a <_fflush_r+0x42>
 800307a:	4621      	mov	r1, r4
 800307c:	4628      	mov	r0, r5
 800307e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003082:	f7ff bf63 	b.w	8002f4c <__sflush_r>
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <_fflush_r+0x4c>)
 8003088:	429c      	cmp	r4, r3
 800308a:	d101      	bne.n	8003090 <_fflush_r+0x38>
 800308c:	68ac      	ldr	r4, [r5, #8]
 800308e:	e7f1      	b.n	8003074 <_fflush_r+0x1c>
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <_fflush_r+0x50>)
 8003092:	429c      	cmp	r4, r3
 8003094:	bf08      	it	eq
 8003096:	68ec      	ldreq	r4, [r5, #12]
 8003098:	e7ec      	b.n	8003074 <_fflush_r+0x1c>
 800309a:	2000      	movs	r0, #0
 800309c:	bd38      	pop	{r3, r4, r5, pc}
 800309e:	bf00      	nop
 80030a0:	08003c90 	.word	0x08003c90
 80030a4:	08003cb0 	.word	0x08003cb0
 80030a8:	08003c70 	.word	0x08003c70

080030ac <std>:
 80030ac:	2300      	movs	r3, #0
 80030ae:	b510      	push	{r4, lr}
 80030b0:	4604      	mov	r4, r0
 80030b2:	e9c0 3300 	strd	r3, r3, [r0]
 80030b6:	6083      	str	r3, [r0, #8]
 80030b8:	8181      	strh	r1, [r0, #12]
 80030ba:	6643      	str	r3, [r0, #100]	; 0x64
 80030bc:	81c2      	strh	r2, [r0, #14]
 80030be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030c2:	6183      	str	r3, [r0, #24]
 80030c4:	4619      	mov	r1, r3
 80030c6:	2208      	movs	r2, #8
 80030c8:	305c      	adds	r0, #92	; 0x5c
 80030ca:	f7ff fdfb 	bl	8002cc4 <memset>
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <std+0x38>)
 80030d0:	6224      	str	r4, [r4, #32]
 80030d2:	6263      	str	r3, [r4, #36]	; 0x24
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <std+0x3c>)
 80030d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <std+0x40>)
 80030da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <std+0x44>)
 80030de:	6323      	str	r3, [r4, #48]	; 0x30
 80030e0:	bd10      	pop	{r4, pc}
 80030e2:	bf00      	nop
 80030e4:	08003a01 	.word	0x08003a01
 80030e8:	08003a23 	.word	0x08003a23
 80030ec:	08003a5b 	.word	0x08003a5b
 80030f0:	08003a7f 	.word	0x08003a7f

080030f4 <_cleanup_r>:
 80030f4:	4901      	ldr	r1, [pc, #4]	; (80030fc <_cleanup_r+0x8>)
 80030f6:	f000 b885 	b.w	8003204 <_fwalk_reent>
 80030fa:	bf00      	nop
 80030fc:	08003059 	.word	0x08003059

08003100 <__sfmoreglue>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	2568      	movs	r5, #104	; 0x68
 8003104:	1e4a      	subs	r2, r1, #1
 8003106:	4355      	muls	r5, r2
 8003108:	460e      	mov	r6, r1
 800310a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800310e:	f000 f947 	bl	80033a0 <_malloc_r>
 8003112:	4604      	mov	r4, r0
 8003114:	b140      	cbz	r0, 8003128 <__sfmoreglue+0x28>
 8003116:	2100      	movs	r1, #0
 8003118:	e9c0 1600 	strd	r1, r6, [r0]
 800311c:	300c      	adds	r0, #12
 800311e:	60a0      	str	r0, [r4, #8]
 8003120:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003124:	f7ff fdce 	bl	8002cc4 <memset>
 8003128:	4620      	mov	r0, r4
 800312a:	bd70      	pop	{r4, r5, r6, pc}

0800312c <__sinit>:
 800312c:	6983      	ldr	r3, [r0, #24]
 800312e:	b510      	push	{r4, lr}
 8003130:	4604      	mov	r4, r0
 8003132:	bb33      	cbnz	r3, 8003182 <__sinit+0x56>
 8003134:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003138:	6503      	str	r3, [r0, #80]	; 0x50
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <__sinit+0x58>)
 800313c:	4a12      	ldr	r2, [pc, #72]	; (8003188 <__sinit+0x5c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6282      	str	r2, [r0, #40]	; 0x28
 8003142:	4298      	cmp	r0, r3
 8003144:	bf04      	itt	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	6183      	streq	r3, [r0, #24]
 800314a:	f000 f81f 	bl	800318c <__sfp>
 800314e:	6060      	str	r0, [r4, #4]
 8003150:	4620      	mov	r0, r4
 8003152:	f000 f81b 	bl	800318c <__sfp>
 8003156:	60a0      	str	r0, [r4, #8]
 8003158:	4620      	mov	r0, r4
 800315a:	f000 f817 	bl	800318c <__sfp>
 800315e:	2200      	movs	r2, #0
 8003160:	60e0      	str	r0, [r4, #12]
 8003162:	2104      	movs	r1, #4
 8003164:	6860      	ldr	r0, [r4, #4]
 8003166:	f7ff ffa1 	bl	80030ac <std>
 800316a:	2201      	movs	r2, #1
 800316c:	2109      	movs	r1, #9
 800316e:	68a0      	ldr	r0, [r4, #8]
 8003170:	f7ff ff9c 	bl	80030ac <std>
 8003174:	2202      	movs	r2, #2
 8003176:	2112      	movs	r1, #18
 8003178:	68e0      	ldr	r0, [r4, #12]
 800317a:	f7ff ff97 	bl	80030ac <std>
 800317e:	2301      	movs	r3, #1
 8003180:	61a3      	str	r3, [r4, #24]
 8003182:	bd10      	pop	{r4, pc}
 8003184:	08003c6c 	.word	0x08003c6c
 8003188:	080030f5 	.word	0x080030f5

0800318c <__sfp>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <__sfp+0x70>)
 8003190:	4607      	mov	r7, r0
 8003192:	681e      	ldr	r6, [r3, #0]
 8003194:	69b3      	ldr	r3, [r6, #24]
 8003196:	b913      	cbnz	r3, 800319e <__sfp+0x12>
 8003198:	4630      	mov	r0, r6
 800319a:	f7ff ffc7 	bl	800312c <__sinit>
 800319e:	3648      	adds	r6, #72	; 0x48
 80031a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	d503      	bpl.n	80031b0 <__sfp+0x24>
 80031a8:	6833      	ldr	r3, [r6, #0]
 80031aa:	b133      	cbz	r3, 80031ba <__sfp+0x2e>
 80031ac:	6836      	ldr	r6, [r6, #0]
 80031ae:	e7f7      	b.n	80031a0 <__sfp+0x14>
 80031b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031b4:	b16d      	cbz	r5, 80031d2 <__sfp+0x46>
 80031b6:	3468      	adds	r4, #104	; 0x68
 80031b8:	e7f4      	b.n	80031a4 <__sfp+0x18>
 80031ba:	2104      	movs	r1, #4
 80031bc:	4638      	mov	r0, r7
 80031be:	f7ff ff9f 	bl	8003100 <__sfmoreglue>
 80031c2:	6030      	str	r0, [r6, #0]
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d1f1      	bne.n	80031ac <__sfp+0x20>
 80031c8:	230c      	movs	r3, #12
 80031ca:	4604      	mov	r4, r0
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4620      	mov	r0, r4
 80031d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <__sfp+0x74>)
 80031d4:	6665      	str	r5, [r4, #100]	; 0x64
 80031d6:	e9c4 5500 	strd	r5, r5, [r4]
 80031da:	60a5      	str	r5, [r4, #8]
 80031dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80031e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80031e4:	2208      	movs	r2, #8
 80031e6:	4629      	mov	r1, r5
 80031e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031ec:	f7ff fd6a 	bl	8002cc4 <memset>
 80031f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031f8:	e7e9      	b.n	80031ce <__sfp+0x42>
 80031fa:	bf00      	nop
 80031fc:	08003c6c 	.word	0x08003c6c
 8003200:	ffff0001 	.word	0xffff0001

08003204 <_fwalk_reent>:
 8003204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003208:	4680      	mov	r8, r0
 800320a:	4689      	mov	r9, r1
 800320c:	2600      	movs	r6, #0
 800320e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003212:	b914      	cbnz	r4, 800321a <_fwalk_reent+0x16>
 8003214:	4630      	mov	r0, r6
 8003216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800321a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800321e:	3f01      	subs	r7, #1
 8003220:	d501      	bpl.n	8003226 <_fwalk_reent+0x22>
 8003222:	6824      	ldr	r4, [r4, #0]
 8003224:	e7f5      	b.n	8003212 <_fwalk_reent+0xe>
 8003226:	89ab      	ldrh	r3, [r5, #12]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d907      	bls.n	800323c <_fwalk_reent+0x38>
 800322c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003230:	3301      	adds	r3, #1
 8003232:	d003      	beq.n	800323c <_fwalk_reent+0x38>
 8003234:	4629      	mov	r1, r5
 8003236:	4640      	mov	r0, r8
 8003238:	47c8      	blx	r9
 800323a:	4306      	orrs	r6, r0
 800323c:	3568      	adds	r5, #104	; 0x68
 800323e:	e7ee      	b.n	800321e <_fwalk_reent+0x1a>

08003240 <__swhatbuf_r>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	460e      	mov	r6, r1
 8003244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003248:	b096      	sub	sp, #88	; 0x58
 800324a:	2900      	cmp	r1, #0
 800324c:	4614      	mov	r4, r2
 800324e:	461d      	mov	r5, r3
 8003250:	da07      	bge.n	8003262 <__swhatbuf_r+0x22>
 8003252:	2300      	movs	r3, #0
 8003254:	602b      	str	r3, [r5, #0]
 8003256:	89b3      	ldrh	r3, [r6, #12]
 8003258:	061a      	lsls	r2, r3, #24
 800325a:	d410      	bmi.n	800327e <__swhatbuf_r+0x3e>
 800325c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003260:	e00e      	b.n	8003280 <__swhatbuf_r+0x40>
 8003262:	466a      	mov	r2, sp
 8003264:	f000 fc32 	bl	8003acc <_fstat_r>
 8003268:	2800      	cmp	r0, #0
 800326a:	dbf2      	blt.n	8003252 <__swhatbuf_r+0x12>
 800326c:	9a01      	ldr	r2, [sp, #4]
 800326e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003272:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003276:	425a      	negs	r2, r3
 8003278:	415a      	adcs	r2, r3
 800327a:	602a      	str	r2, [r5, #0]
 800327c:	e7ee      	b.n	800325c <__swhatbuf_r+0x1c>
 800327e:	2340      	movs	r3, #64	; 0x40
 8003280:	2000      	movs	r0, #0
 8003282:	6023      	str	r3, [r4, #0]
 8003284:	b016      	add	sp, #88	; 0x58
 8003286:	bd70      	pop	{r4, r5, r6, pc}

08003288 <__smakebuf_r>:
 8003288:	898b      	ldrh	r3, [r1, #12]
 800328a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800328c:	079d      	lsls	r5, r3, #30
 800328e:	4606      	mov	r6, r0
 8003290:	460c      	mov	r4, r1
 8003292:	d507      	bpl.n	80032a4 <__smakebuf_r+0x1c>
 8003294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	6123      	str	r3, [r4, #16]
 800329c:	2301      	movs	r3, #1
 800329e:	6163      	str	r3, [r4, #20]
 80032a0:	b002      	add	sp, #8
 80032a2:	bd70      	pop	{r4, r5, r6, pc}
 80032a4:	ab01      	add	r3, sp, #4
 80032a6:	466a      	mov	r2, sp
 80032a8:	f7ff ffca 	bl	8003240 <__swhatbuf_r>
 80032ac:	9900      	ldr	r1, [sp, #0]
 80032ae:	4605      	mov	r5, r0
 80032b0:	4630      	mov	r0, r6
 80032b2:	f000 f875 	bl	80033a0 <_malloc_r>
 80032b6:	b948      	cbnz	r0, 80032cc <__smakebuf_r+0x44>
 80032b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032bc:	059a      	lsls	r2, r3, #22
 80032be:	d4ef      	bmi.n	80032a0 <__smakebuf_r+0x18>
 80032c0:	f023 0303 	bic.w	r3, r3, #3
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	81a3      	strh	r3, [r4, #12]
 80032ca:	e7e3      	b.n	8003294 <__smakebuf_r+0xc>
 80032cc:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <__smakebuf_r+0x7c>)
 80032ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	6020      	str	r0, [r4, #0]
 80032d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d8:	81a3      	strh	r3, [r4, #12]
 80032da:	9b00      	ldr	r3, [sp, #0]
 80032dc:	6120      	str	r0, [r4, #16]
 80032de:	6163      	str	r3, [r4, #20]
 80032e0:	9b01      	ldr	r3, [sp, #4]
 80032e2:	b15b      	cbz	r3, 80032fc <__smakebuf_r+0x74>
 80032e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032e8:	4630      	mov	r0, r6
 80032ea:	f000 fc01 	bl	8003af0 <_isatty_r>
 80032ee:	b128      	cbz	r0, 80032fc <__smakebuf_r+0x74>
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	81a3      	strh	r3, [r4, #12]
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	431d      	orrs	r5, r3
 8003300:	81a5      	strh	r5, [r4, #12]
 8003302:	e7cd      	b.n	80032a0 <__smakebuf_r+0x18>
 8003304:	080030f5 	.word	0x080030f5

08003308 <_free_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	4605      	mov	r5, r0
 800330c:	2900      	cmp	r1, #0
 800330e:	d043      	beq.n	8003398 <_free_r+0x90>
 8003310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003314:	1f0c      	subs	r4, r1, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	bfb8      	it	lt
 800331a:	18e4      	addlt	r4, r4, r3
 800331c:	f000 fc18 	bl	8003b50 <__malloc_lock>
 8003320:	4a1e      	ldr	r2, [pc, #120]	; (800339c <_free_r+0x94>)
 8003322:	6813      	ldr	r3, [r2, #0]
 8003324:	4610      	mov	r0, r2
 8003326:	b933      	cbnz	r3, 8003336 <_free_r+0x2e>
 8003328:	6063      	str	r3, [r4, #4]
 800332a:	6014      	str	r4, [r2, #0]
 800332c:	4628      	mov	r0, r5
 800332e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003332:	f000 bc0e 	b.w	8003b52 <__malloc_unlock>
 8003336:	42a3      	cmp	r3, r4
 8003338:	d90b      	bls.n	8003352 <_free_r+0x4a>
 800333a:	6821      	ldr	r1, [r4, #0]
 800333c:	1862      	adds	r2, r4, r1
 800333e:	4293      	cmp	r3, r2
 8003340:	bf01      	itttt	eq
 8003342:	681a      	ldreq	r2, [r3, #0]
 8003344:	685b      	ldreq	r3, [r3, #4]
 8003346:	1852      	addeq	r2, r2, r1
 8003348:	6022      	streq	r2, [r4, #0]
 800334a:	6063      	str	r3, [r4, #4]
 800334c:	6004      	str	r4, [r0, #0]
 800334e:	e7ed      	b.n	800332c <_free_r+0x24>
 8003350:	4613      	mov	r3, r2
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	b10a      	cbz	r2, 800335a <_free_r+0x52>
 8003356:	42a2      	cmp	r2, r4
 8003358:	d9fa      	bls.n	8003350 <_free_r+0x48>
 800335a:	6819      	ldr	r1, [r3, #0]
 800335c:	1858      	adds	r0, r3, r1
 800335e:	42a0      	cmp	r0, r4
 8003360:	d10b      	bne.n	800337a <_free_r+0x72>
 8003362:	6820      	ldr	r0, [r4, #0]
 8003364:	4401      	add	r1, r0
 8003366:	1858      	adds	r0, r3, r1
 8003368:	4282      	cmp	r2, r0
 800336a:	6019      	str	r1, [r3, #0]
 800336c:	d1de      	bne.n	800332c <_free_r+0x24>
 800336e:	6810      	ldr	r0, [r2, #0]
 8003370:	6852      	ldr	r2, [r2, #4]
 8003372:	4401      	add	r1, r0
 8003374:	6019      	str	r1, [r3, #0]
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	e7d8      	b.n	800332c <_free_r+0x24>
 800337a:	d902      	bls.n	8003382 <_free_r+0x7a>
 800337c:	230c      	movs	r3, #12
 800337e:	602b      	str	r3, [r5, #0]
 8003380:	e7d4      	b.n	800332c <_free_r+0x24>
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	1821      	adds	r1, r4, r0
 8003386:	428a      	cmp	r2, r1
 8003388:	bf01      	itttt	eq
 800338a:	6811      	ldreq	r1, [r2, #0]
 800338c:	6852      	ldreq	r2, [r2, #4]
 800338e:	1809      	addeq	r1, r1, r0
 8003390:	6021      	streq	r1, [r4, #0]
 8003392:	6062      	str	r2, [r4, #4]
 8003394:	605c      	str	r4, [r3, #4]
 8003396:	e7c9      	b.n	800332c <_free_r+0x24>
 8003398:	bd38      	pop	{r3, r4, r5, pc}
 800339a:	bf00      	nop
 800339c:	20000094 	.word	0x20000094

080033a0 <_malloc_r>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	1ccd      	adds	r5, r1, #3
 80033a4:	f025 0503 	bic.w	r5, r5, #3
 80033a8:	3508      	adds	r5, #8
 80033aa:	2d0c      	cmp	r5, #12
 80033ac:	bf38      	it	cc
 80033ae:	250c      	movcc	r5, #12
 80033b0:	2d00      	cmp	r5, #0
 80033b2:	4606      	mov	r6, r0
 80033b4:	db01      	blt.n	80033ba <_malloc_r+0x1a>
 80033b6:	42a9      	cmp	r1, r5
 80033b8:	d903      	bls.n	80033c2 <_malloc_r+0x22>
 80033ba:	230c      	movs	r3, #12
 80033bc:	6033      	str	r3, [r6, #0]
 80033be:	2000      	movs	r0, #0
 80033c0:	bd70      	pop	{r4, r5, r6, pc}
 80033c2:	f000 fbc5 	bl	8003b50 <__malloc_lock>
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <_malloc_r+0xac>)
 80033c8:	6814      	ldr	r4, [r2, #0]
 80033ca:	4621      	mov	r1, r4
 80033cc:	b991      	cbnz	r1, 80033f4 <_malloc_r+0x54>
 80033ce:	4c20      	ldr	r4, [pc, #128]	; (8003450 <_malloc_r+0xb0>)
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	b91b      	cbnz	r3, 80033dc <_malloc_r+0x3c>
 80033d4:	4630      	mov	r0, r6
 80033d6:	f000 fb03 	bl	80039e0 <_sbrk_r>
 80033da:	6020      	str	r0, [r4, #0]
 80033dc:	4629      	mov	r1, r5
 80033de:	4630      	mov	r0, r6
 80033e0:	f000 fafe 	bl	80039e0 <_sbrk_r>
 80033e4:	1c43      	adds	r3, r0, #1
 80033e6:	d124      	bne.n	8003432 <_malloc_r+0x92>
 80033e8:	230c      	movs	r3, #12
 80033ea:	4630      	mov	r0, r6
 80033ec:	6033      	str	r3, [r6, #0]
 80033ee:	f000 fbb0 	bl	8003b52 <__malloc_unlock>
 80033f2:	e7e4      	b.n	80033be <_malloc_r+0x1e>
 80033f4:	680b      	ldr	r3, [r1, #0]
 80033f6:	1b5b      	subs	r3, r3, r5
 80033f8:	d418      	bmi.n	800342c <_malloc_r+0x8c>
 80033fa:	2b0b      	cmp	r3, #11
 80033fc:	d90f      	bls.n	800341e <_malloc_r+0x7e>
 80033fe:	600b      	str	r3, [r1, #0]
 8003400:	18cc      	adds	r4, r1, r3
 8003402:	50cd      	str	r5, [r1, r3]
 8003404:	4630      	mov	r0, r6
 8003406:	f000 fba4 	bl	8003b52 <__malloc_unlock>
 800340a:	f104 000b 	add.w	r0, r4, #11
 800340e:	1d23      	adds	r3, r4, #4
 8003410:	f020 0007 	bic.w	r0, r0, #7
 8003414:	1ac3      	subs	r3, r0, r3
 8003416:	d0d3      	beq.n	80033c0 <_malloc_r+0x20>
 8003418:	425a      	negs	r2, r3
 800341a:	50e2      	str	r2, [r4, r3]
 800341c:	e7d0      	b.n	80033c0 <_malloc_r+0x20>
 800341e:	684b      	ldr	r3, [r1, #4]
 8003420:	428c      	cmp	r4, r1
 8003422:	bf16      	itet	ne
 8003424:	6063      	strne	r3, [r4, #4]
 8003426:	6013      	streq	r3, [r2, #0]
 8003428:	460c      	movne	r4, r1
 800342a:	e7eb      	b.n	8003404 <_malloc_r+0x64>
 800342c:	460c      	mov	r4, r1
 800342e:	6849      	ldr	r1, [r1, #4]
 8003430:	e7cc      	b.n	80033cc <_malloc_r+0x2c>
 8003432:	1cc4      	adds	r4, r0, #3
 8003434:	f024 0403 	bic.w	r4, r4, #3
 8003438:	42a0      	cmp	r0, r4
 800343a:	d005      	beq.n	8003448 <_malloc_r+0xa8>
 800343c:	1a21      	subs	r1, r4, r0
 800343e:	4630      	mov	r0, r6
 8003440:	f000 face 	bl	80039e0 <_sbrk_r>
 8003444:	3001      	adds	r0, #1
 8003446:	d0cf      	beq.n	80033e8 <_malloc_r+0x48>
 8003448:	6025      	str	r5, [r4, #0]
 800344a:	e7db      	b.n	8003404 <_malloc_r+0x64>
 800344c:	20000094 	.word	0x20000094
 8003450:	20000098 	.word	0x20000098

08003454 <__sfputc_r>:
 8003454:	6893      	ldr	r3, [r2, #8]
 8003456:	b410      	push	{r4}
 8003458:	3b01      	subs	r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	6093      	str	r3, [r2, #8]
 800345e:	da07      	bge.n	8003470 <__sfputc_r+0x1c>
 8003460:	6994      	ldr	r4, [r2, #24]
 8003462:	42a3      	cmp	r3, r4
 8003464:	db01      	blt.n	800346a <__sfputc_r+0x16>
 8003466:	290a      	cmp	r1, #10
 8003468:	d102      	bne.n	8003470 <__sfputc_r+0x1c>
 800346a:	bc10      	pop	{r4}
 800346c:	f7ff bcae 	b.w	8002dcc <__swbuf_r>
 8003470:	6813      	ldr	r3, [r2, #0]
 8003472:	1c58      	adds	r0, r3, #1
 8003474:	6010      	str	r0, [r2, #0]
 8003476:	7019      	strb	r1, [r3, #0]
 8003478:	4608      	mov	r0, r1
 800347a:	bc10      	pop	{r4}
 800347c:	4770      	bx	lr

0800347e <__sfputs_r>:
 800347e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003480:	4606      	mov	r6, r0
 8003482:	460f      	mov	r7, r1
 8003484:	4614      	mov	r4, r2
 8003486:	18d5      	adds	r5, r2, r3
 8003488:	42ac      	cmp	r4, r5
 800348a:	d101      	bne.n	8003490 <__sfputs_r+0x12>
 800348c:	2000      	movs	r0, #0
 800348e:	e007      	b.n	80034a0 <__sfputs_r+0x22>
 8003490:	463a      	mov	r2, r7
 8003492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003496:	4630      	mov	r0, r6
 8003498:	f7ff ffdc 	bl	8003454 <__sfputc_r>
 800349c:	1c43      	adds	r3, r0, #1
 800349e:	d1f3      	bne.n	8003488 <__sfputs_r+0xa>
 80034a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034a4 <_vfiprintf_r>:
 80034a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a8:	460c      	mov	r4, r1
 80034aa:	b09d      	sub	sp, #116	; 0x74
 80034ac:	4617      	mov	r7, r2
 80034ae:	461d      	mov	r5, r3
 80034b0:	4606      	mov	r6, r0
 80034b2:	b118      	cbz	r0, 80034bc <_vfiprintf_r+0x18>
 80034b4:	6983      	ldr	r3, [r0, #24]
 80034b6:	b90b      	cbnz	r3, 80034bc <_vfiprintf_r+0x18>
 80034b8:	f7ff fe38 	bl	800312c <__sinit>
 80034bc:	4b7c      	ldr	r3, [pc, #496]	; (80036b0 <_vfiprintf_r+0x20c>)
 80034be:	429c      	cmp	r4, r3
 80034c0:	d158      	bne.n	8003574 <_vfiprintf_r+0xd0>
 80034c2:	6874      	ldr	r4, [r6, #4]
 80034c4:	89a3      	ldrh	r3, [r4, #12]
 80034c6:	0718      	lsls	r0, r3, #28
 80034c8:	d55e      	bpl.n	8003588 <_vfiprintf_r+0xe4>
 80034ca:	6923      	ldr	r3, [r4, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d05b      	beq.n	8003588 <_vfiprintf_r+0xe4>
 80034d0:	2300      	movs	r3, #0
 80034d2:	9309      	str	r3, [sp, #36]	; 0x24
 80034d4:	2320      	movs	r3, #32
 80034d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034da:	2330      	movs	r3, #48	; 0x30
 80034dc:	f04f 0b01 	mov.w	fp, #1
 80034e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034e4:	9503      	str	r5, [sp, #12]
 80034e6:	46b8      	mov	r8, r7
 80034e8:	4645      	mov	r5, r8
 80034ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034ee:	b10b      	cbz	r3, 80034f4 <_vfiprintf_r+0x50>
 80034f0:	2b25      	cmp	r3, #37	; 0x25
 80034f2:	d154      	bne.n	800359e <_vfiprintf_r+0xfa>
 80034f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80034f8:	d00b      	beq.n	8003512 <_vfiprintf_r+0x6e>
 80034fa:	4653      	mov	r3, sl
 80034fc:	463a      	mov	r2, r7
 80034fe:	4621      	mov	r1, r4
 8003500:	4630      	mov	r0, r6
 8003502:	f7ff ffbc 	bl	800347e <__sfputs_r>
 8003506:	3001      	adds	r0, #1
 8003508:	f000 80c2 	beq.w	8003690 <_vfiprintf_r+0x1ec>
 800350c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800350e:	4453      	add	r3, sl
 8003510:	9309      	str	r3, [sp, #36]	; 0x24
 8003512:	f898 3000 	ldrb.w	r3, [r8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80ba 	beq.w	8003690 <_vfiprintf_r+0x1ec>
 800351c:	2300      	movs	r3, #0
 800351e:	f04f 32ff 	mov.w	r2, #4294967295
 8003522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003526:	9304      	str	r3, [sp, #16]
 8003528:	9307      	str	r3, [sp, #28]
 800352a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800352e:	931a      	str	r3, [sp, #104]	; 0x68
 8003530:	46a8      	mov	r8, r5
 8003532:	2205      	movs	r2, #5
 8003534:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003538:	485e      	ldr	r0, [pc, #376]	; (80036b4 <_vfiprintf_r+0x210>)
 800353a:	f000 fafb 	bl	8003b34 <memchr>
 800353e:	9b04      	ldr	r3, [sp, #16]
 8003540:	bb78      	cbnz	r0, 80035a2 <_vfiprintf_r+0xfe>
 8003542:	06d9      	lsls	r1, r3, #27
 8003544:	bf44      	itt	mi
 8003546:	2220      	movmi	r2, #32
 8003548:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800354c:	071a      	lsls	r2, r3, #28
 800354e:	bf44      	itt	mi
 8003550:	222b      	movmi	r2, #43	; 0x2b
 8003552:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003556:	782a      	ldrb	r2, [r5, #0]
 8003558:	2a2a      	cmp	r2, #42	; 0x2a
 800355a:	d02a      	beq.n	80035b2 <_vfiprintf_r+0x10e>
 800355c:	46a8      	mov	r8, r5
 800355e:	2000      	movs	r0, #0
 8003560:	250a      	movs	r5, #10
 8003562:	9a07      	ldr	r2, [sp, #28]
 8003564:	4641      	mov	r1, r8
 8003566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800356a:	3b30      	subs	r3, #48	; 0x30
 800356c:	2b09      	cmp	r3, #9
 800356e:	d969      	bls.n	8003644 <_vfiprintf_r+0x1a0>
 8003570:	b360      	cbz	r0, 80035cc <_vfiprintf_r+0x128>
 8003572:	e024      	b.n	80035be <_vfiprintf_r+0x11a>
 8003574:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <_vfiprintf_r+0x214>)
 8003576:	429c      	cmp	r4, r3
 8003578:	d101      	bne.n	800357e <_vfiprintf_r+0xda>
 800357a:	68b4      	ldr	r4, [r6, #8]
 800357c:	e7a2      	b.n	80034c4 <_vfiprintf_r+0x20>
 800357e:	4b4f      	ldr	r3, [pc, #316]	; (80036bc <_vfiprintf_r+0x218>)
 8003580:	429c      	cmp	r4, r3
 8003582:	bf08      	it	eq
 8003584:	68f4      	ldreq	r4, [r6, #12]
 8003586:	e79d      	b.n	80034c4 <_vfiprintf_r+0x20>
 8003588:	4621      	mov	r1, r4
 800358a:	4630      	mov	r0, r6
 800358c:	f7ff fc70 	bl	8002e70 <__swsetup_r>
 8003590:	2800      	cmp	r0, #0
 8003592:	d09d      	beq.n	80034d0 <_vfiprintf_r+0x2c>
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	b01d      	add	sp, #116	; 0x74
 800359a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800359e:	46a8      	mov	r8, r5
 80035a0:	e7a2      	b.n	80034e8 <_vfiprintf_r+0x44>
 80035a2:	4a44      	ldr	r2, [pc, #272]	; (80036b4 <_vfiprintf_r+0x210>)
 80035a4:	4645      	mov	r5, r8
 80035a6:	1a80      	subs	r0, r0, r2
 80035a8:	fa0b f000 	lsl.w	r0, fp, r0
 80035ac:	4318      	orrs	r0, r3
 80035ae:	9004      	str	r0, [sp, #16]
 80035b0:	e7be      	b.n	8003530 <_vfiprintf_r+0x8c>
 80035b2:	9a03      	ldr	r2, [sp, #12]
 80035b4:	1d11      	adds	r1, r2, #4
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	9103      	str	r1, [sp, #12]
 80035ba:	2a00      	cmp	r2, #0
 80035bc:	db01      	blt.n	80035c2 <_vfiprintf_r+0x11e>
 80035be:	9207      	str	r2, [sp, #28]
 80035c0:	e004      	b.n	80035cc <_vfiprintf_r+0x128>
 80035c2:	4252      	negs	r2, r2
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	9207      	str	r2, [sp, #28]
 80035ca:	9304      	str	r3, [sp, #16]
 80035cc:	f898 3000 	ldrb.w	r3, [r8]
 80035d0:	2b2e      	cmp	r3, #46	; 0x2e
 80035d2:	d10e      	bne.n	80035f2 <_vfiprintf_r+0x14e>
 80035d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80035d8:	2b2a      	cmp	r3, #42	; 0x2a
 80035da:	d138      	bne.n	800364e <_vfiprintf_r+0x1aa>
 80035dc:	9b03      	ldr	r3, [sp, #12]
 80035de:	f108 0802 	add.w	r8, r8, #2
 80035e2:	1d1a      	adds	r2, r3, #4
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	9203      	str	r2, [sp, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bfb8      	it	lt
 80035ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80035f0:	9305      	str	r3, [sp, #20]
 80035f2:	4d33      	ldr	r5, [pc, #204]	; (80036c0 <_vfiprintf_r+0x21c>)
 80035f4:	2203      	movs	r2, #3
 80035f6:	f898 1000 	ldrb.w	r1, [r8]
 80035fa:	4628      	mov	r0, r5
 80035fc:	f000 fa9a 	bl	8003b34 <memchr>
 8003600:	b140      	cbz	r0, 8003614 <_vfiprintf_r+0x170>
 8003602:	2340      	movs	r3, #64	; 0x40
 8003604:	1b40      	subs	r0, r0, r5
 8003606:	fa03 f000 	lsl.w	r0, r3, r0
 800360a:	9b04      	ldr	r3, [sp, #16]
 800360c:	f108 0801 	add.w	r8, r8, #1
 8003610:	4303      	orrs	r3, r0
 8003612:	9304      	str	r3, [sp, #16]
 8003614:	f898 1000 	ldrb.w	r1, [r8]
 8003618:	2206      	movs	r2, #6
 800361a:	482a      	ldr	r0, [pc, #168]	; (80036c4 <_vfiprintf_r+0x220>)
 800361c:	f108 0701 	add.w	r7, r8, #1
 8003620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003624:	f000 fa86 	bl	8003b34 <memchr>
 8003628:	2800      	cmp	r0, #0
 800362a:	d037      	beq.n	800369c <_vfiprintf_r+0x1f8>
 800362c:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <_vfiprintf_r+0x224>)
 800362e:	bb1b      	cbnz	r3, 8003678 <_vfiprintf_r+0x1d4>
 8003630:	9b03      	ldr	r3, [sp, #12]
 8003632:	3307      	adds	r3, #7
 8003634:	f023 0307 	bic.w	r3, r3, #7
 8003638:	3308      	adds	r3, #8
 800363a:	9303      	str	r3, [sp, #12]
 800363c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800363e:	444b      	add	r3, r9
 8003640:	9309      	str	r3, [sp, #36]	; 0x24
 8003642:	e750      	b.n	80034e6 <_vfiprintf_r+0x42>
 8003644:	fb05 3202 	mla	r2, r5, r2, r3
 8003648:	2001      	movs	r0, #1
 800364a:	4688      	mov	r8, r1
 800364c:	e78a      	b.n	8003564 <_vfiprintf_r+0xc0>
 800364e:	2300      	movs	r3, #0
 8003650:	250a      	movs	r5, #10
 8003652:	4619      	mov	r1, r3
 8003654:	f108 0801 	add.w	r8, r8, #1
 8003658:	9305      	str	r3, [sp, #20]
 800365a:	4640      	mov	r0, r8
 800365c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003660:	3a30      	subs	r2, #48	; 0x30
 8003662:	2a09      	cmp	r2, #9
 8003664:	d903      	bls.n	800366e <_vfiprintf_r+0x1ca>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0c3      	beq.n	80035f2 <_vfiprintf_r+0x14e>
 800366a:	9105      	str	r1, [sp, #20]
 800366c:	e7c1      	b.n	80035f2 <_vfiprintf_r+0x14e>
 800366e:	fb05 2101 	mla	r1, r5, r1, r2
 8003672:	2301      	movs	r3, #1
 8003674:	4680      	mov	r8, r0
 8003676:	e7f0      	b.n	800365a <_vfiprintf_r+0x1b6>
 8003678:	ab03      	add	r3, sp, #12
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	4622      	mov	r2, r4
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <_vfiprintf_r+0x228>)
 8003680:	a904      	add	r1, sp, #16
 8003682:	4630      	mov	r0, r6
 8003684:	f3af 8000 	nop.w
 8003688:	f1b0 3fff 	cmp.w	r0, #4294967295
 800368c:	4681      	mov	r9, r0
 800368e:	d1d5      	bne.n	800363c <_vfiprintf_r+0x198>
 8003690:	89a3      	ldrh	r3, [r4, #12]
 8003692:	065b      	lsls	r3, r3, #25
 8003694:	f53f af7e 	bmi.w	8003594 <_vfiprintf_r+0xf0>
 8003698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800369a:	e77d      	b.n	8003598 <_vfiprintf_r+0xf4>
 800369c:	ab03      	add	r3, sp, #12
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	4622      	mov	r2, r4
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <_vfiprintf_r+0x228>)
 80036a4:	a904      	add	r1, sp, #16
 80036a6:	4630      	mov	r0, r6
 80036a8:	f000 f888 	bl	80037bc <_printf_i>
 80036ac:	e7ec      	b.n	8003688 <_vfiprintf_r+0x1e4>
 80036ae:	bf00      	nop
 80036b0:	08003c90 	.word	0x08003c90
 80036b4:	08003cd0 	.word	0x08003cd0
 80036b8:	08003cb0 	.word	0x08003cb0
 80036bc:	08003c70 	.word	0x08003c70
 80036c0:	08003cd6 	.word	0x08003cd6
 80036c4:	08003cda 	.word	0x08003cda
 80036c8:	00000000 	.word	0x00000000
 80036cc:	0800347f 	.word	0x0800347f

080036d0 <_printf_common>:
 80036d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	4691      	mov	r9, r2
 80036d6:	461f      	mov	r7, r3
 80036d8:	688a      	ldr	r2, [r1, #8]
 80036da:	690b      	ldr	r3, [r1, #16]
 80036dc:	4606      	mov	r6, r0
 80036de:	4293      	cmp	r3, r2
 80036e0:	bfb8      	it	lt
 80036e2:	4613      	movlt	r3, r2
 80036e4:	f8c9 3000 	str.w	r3, [r9]
 80036e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036ec:	460c      	mov	r4, r1
 80036ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036f2:	b112      	cbz	r2, 80036fa <_printf_common+0x2a>
 80036f4:	3301      	adds	r3, #1
 80036f6:	f8c9 3000 	str.w	r3, [r9]
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	0699      	lsls	r1, r3, #26
 80036fe:	bf42      	ittt	mi
 8003700:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003704:	3302      	addmi	r3, #2
 8003706:	f8c9 3000 	strmi.w	r3, [r9]
 800370a:	6825      	ldr	r5, [r4, #0]
 800370c:	f015 0506 	ands.w	r5, r5, #6
 8003710:	d107      	bne.n	8003722 <_printf_common+0x52>
 8003712:	f104 0a19 	add.w	sl, r4, #25
 8003716:	68e3      	ldr	r3, [r4, #12]
 8003718:	f8d9 2000 	ldr.w	r2, [r9]
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	42ab      	cmp	r3, r5
 8003720:	dc29      	bgt.n	8003776 <_printf_common+0xa6>
 8003722:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003726:	6822      	ldr	r2, [r4, #0]
 8003728:	3300      	adds	r3, #0
 800372a:	bf18      	it	ne
 800372c:	2301      	movne	r3, #1
 800372e:	0692      	lsls	r2, r2, #26
 8003730:	d42e      	bmi.n	8003790 <_printf_common+0xc0>
 8003732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003736:	4639      	mov	r1, r7
 8003738:	4630      	mov	r0, r6
 800373a:	47c0      	blx	r8
 800373c:	3001      	adds	r0, #1
 800373e:	d021      	beq.n	8003784 <_printf_common+0xb4>
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	68e5      	ldr	r5, [r4, #12]
 8003744:	f003 0306 	and.w	r3, r3, #6
 8003748:	2b04      	cmp	r3, #4
 800374a:	bf18      	it	ne
 800374c:	2500      	movne	r5, #0
 800374e:	f8d9 2000 	ldr.w	r2, [r9]
 8003752:	f04f 0900 	mov.w	r9, #0
 8003756:	bf08      	it	eq
 8003758:	1aad      	subeq	r5, r5, r2
 800375a:	68a3      	ldr	r3, [r4, #8]
 800375c:	6922      	ldr	r2, [r4, #16]
 800375e:	bf08      	it	eq
 8003760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003764:	4293      	cmp	r3, r2
 8003766:	bfc4      	itt	gt
 8003768:	1a9b      	subgt	r3, r3, r2
 800376a:	18ed      	addgt	r5, r5, r3
 800376c:	341a      	adds	r4, #26
 800376e:	454d      	cmp	r5, r9
 8003770:	d11a      	bne.n	80037a8 <_printf_common+0xd8>
 8003772:	2000      	movs	r0, #0
 8003774:	e008      	b.n	8003788 <_printf_common+0xb8>
 8003776:	2301      	movs	r3, #1
 8003778:	4652      	mov	r2, sl
 800377a:	4639      	mov	r1, r7
 800377c:	4630      	mov	r0, r6
 800377e:	47c0      	blx	r8
 8003780:	3001      	adds	r0, #1
 8003782:	d103      	bne.n	800378c <_printf_common+0xbc>
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800378c:	3501      	adds	r5, #1
 800378e:	e7c2      	b.n	8003716 <_printf_common+0x46>
 8003790:	2030      	movs	r0, #48	; 0x30
 8003792:	18e1      	adds	r1, r4, r3
 8003794:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800379e:	4422      	add	r2, r4
 80037a0:	3302      	adds	r3, #2
 80037a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037a6:	e7c4      	b.n	8003732 <_printf_common+0x62>
 80037a8:	2301      	movs	r3, #1
 80037aa:	4622      	mov	r2, r4
 80037ac:	4639      	mov	r1, r7
 80037ae:	4630      	mov	r0, r6
 80037b0:	47c0      	blx	r8
 80037b2:	3001      	adds	r0, #1
 80037b4:	d0e6      	beq.n	8003784 <_printf_common+0xb4>
 80037b6:	f109 0901 	add.w	r9, r9, #1
 80037ba:	e7d8      	b.n	800376e <_printf_common+0x9e>

080037bc <_printf_i>:
 80037bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037c4:	460c      	mov	r4, r1
 80037c6:	7e09      	ldrb	r1, [r1, #24]
 80037c8:	b085      	sub	sp, #20
 80037ca:	296e      	cmp	r1, #110	; 0x6e
 80037cc:	4617      	mov	r7, r2
 80037ce:	4606      	mov	r6, r0
 80037d0:	4698      	mov	r8, r3
 80037d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037d4:	f000 80b3 	beq.w	800393e <_printf_i+0x182>
 80037d8:	d822      	bhi.n	8003820 <_printf_i+0x64>
 80037da:	2963      	cmp	r1, #99	; 0x63
 80037dc:	d036      	beq.n	800384c <_printf_i+0x90>
 80037de:	d80a      	bhi.n	80037f6 <_printf_i+0x3a>
 80037e0:	2900      	cmp	r1, #0
 80037e2:	f000 80b9 	beq.w	8003958 <_printf_i+0x19c>
 80037e6:	2958      	cmp	r1, #88	; 0x58
 80037e8:	f000 8083 	beq.w	80038f2 <_printf_i+0x136>
 80037ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037f4:	e032      	b.n	800385c <_printf_i+0xa0>
 80037f6:	2964      	cmp	r1, #100	; 0x64
 80037f8:	d001      	beq.n	80037fe <_printf_i+0x42>
 80037fa:	2969      	cmp	r1, #105	; 0x69
 80037fc:	d1f6      	bne.n	80037ec <_printf_i+0x30>
 80037fe:	6820      	ldr	r0, [r4, #0]
 8003800:	6813      	ldr	r3, [r2, #0]
 8003802:	0605      	lsls	r5, r0, #24
 8003804:	f103 0104 	add.w	r1, r3, #4
 8003808:	d52a      	bpl.n	8003860 <_printf_i+0xa4>
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6011      	str	r1, [r2, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	da03      	bge.n	800381a <_printf_i+0x5e>
 8003812:	222d      	movs	r2, #45	; 0x2d
 8003814:	425b      	negs	r3, r3
 8003816:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800381a:	486f      	ldr	r0, [pc, #444]	; (80039d8 <_printf_i+0x21c>)
 800381c:	220a      	movs	r2, #10
 800381e:	e039      	b.n	8003894 <_printf_i+0xd8>
 8003820:	2973      	cmp	r1, #115	; 0x73
 8003822:	f000 809d 	beq.w	8003960 <_printf_i+0x1a4>
 8003826:	d808      	bhi.n	800383a <_printf_i+0x7e>
 8003828:	296f      	cmp	r1, #111	; 0x6f
 800382a:	d020      	beq.n	800386e <_printf_i+0xb2>
 800382c:	2970      	cmp	r1, #112	; 0x70
 800382e:	d1dd      	bne.n	80037ec <_printf_i+0x30>
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	f043 0320 	orr.w	r3, r3, #32
 8003836:	6023      	str	r3, [r4, #0]
 8003838:	e003      	b.n	8003842 <_printf_i+0x86>
 800383a:	2975      	cmp	r1, #117	; 0x75
 800383c:	d017      	beq.n	800386e <_printf_i+0xb2>
 800383e:	2978      	cmp	r1, #120	; 0x78
 8003840:	d1d4      	bne.n	80037ec <_printf_i+0x30>
 8003842:	2378      	movs	r3, #120	; 0x78
 8003844:	4865      	ldr	r0, [pc, #404]	; (80039dc <_printf_i+0x220>)
 8003846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800384a:	e055      	b.n	80038f8 <_printf_i+0x13c>
 800384c:	6813      	ldr	r3, [r2, #0]
 800384e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003852:	1d19      	adds	r1, r3, #4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6011      	str	r1, [r2, #0]
 8003858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800385c:	2301      	movs	r3, #1
 800385e:	e08c      	b.n	800397a <_printf_i+0x1be>
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003866:	6011      	str	r1, [r2, #0]
 8003868:	bf18      	it	ne
 800386a:	b21b      	sxthne	r3, r3
 800386c:	e7cf      	b.n	800380e <_printf_i+0x52>
 800386e:	6813      	ldr	r3, [r2, #0]
 8003870:	6825      	ldr	r5, [r4, #0]
 8003872:	1d18      	adds	r0, r3, #4
 8003874:	6010      	str	r0, [r2, #0]
 8003876:	0628      	lsls	r0, r5, #24
 8003878:	d501      	bpl.n	800387e <_printf_i+0xc2>
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	e002      	b.n	8003884 <_printf_i+0xc8>
 800387e:	0668      	lsls	r0, r5, #25
 8003880:	d5fb      	bpl.n	800387a <_printf_i+0xbe>
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	296f      	cmp	r1, #111	; 0x6f
 8003886:	bf14      	ite	ne
 8003888:	220a      	movne	r2, #10
 800388a:	2208      	moveq	r2, #8
 800388c:	4852      	ldr	r0, [pc, #328]	; (80039d8 <_printf_i+0x21c>)
 800388e:	2100      	movs	r1, #0
 8003890:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003894:	6865      	ldr	r5, [r4, #4]
 8003896:	2d00      	cmp	r5, #0
 8003898:	60a5      	str	r5, [r4, #8]
 800389a:	f2c0 8095 	blt.w	80039c8 <_printf_i+0x20c>
 800389e:	6821      	ldr	r1, [r4, #0]
 80038a0:	f021 0104 	bic.w	r1, r1, #4
 80038a4:	6021      	str	r1, [r4, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d13d      	bne.n	8003926 <_printf_i+0x16a>
 80038aa:	2d00      	cmp	r5, #0
 80038ac:	f040 808e 	bne.w	80039cc <_printf_i+0x210>
 80038b0:	4665      	mov	r5, ip
 80038b2:	2a08      	cmp	r2, #8
 80038b4:	d10b      	bne.n	80038ce <_printf_i+0x112>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	07db      	lsls	r3, r3, #31
 80038ba:	d508      	bpl.n	80038ce <_printf_i+0x112>
 80038bc:	6923      	ldr	r3, [r4, #16]
 80038be:	6862      	ldr	r2, [r4, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	bfde      	ittt	le
 80038c4:	2330      	movle	r3, #48	; 0x30
 80038c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038ce:	ebac 0305 	sub.w	r3, ip, r5
 80038d2:	6123      	str	r3, [r4, #16]
 80038d4:	f8cd 8000 	str.w	r8, [sp]
 80038d8:	463b      	mov	r3, r7
 80038da:	aa03      	add	r2, sp, #12
 80038dc:	4621      	mov	r1, r4
 80038de:	4630      	mov	r0, r6
 80038e0:	f7ff fef6 	bl	80036d0 <_printf_common>
 80038e4:	3001      	adds	r0, #1
 80038e6:	d14d      	bne.n	8003984 <_printf_i+0x1c8>
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	b005      	add	sp, #20
 80038ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038f2:	4839      	ldr	r0, [pc, #228]	; (80039d8 <_printf_i+0x21c>)
 80038f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038f8:	6813      	ldr	r3, [r2, #0]
 80038fa:	6821      	ldr	r1, [r4, #0]
 80038fc:	1d1d      	adds	r5, r3, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6015      	str	r5, [r2, #0]
 8003902:	060a      	lsls	r2, r1, #24
 8003904:	d50b      	bpl.n	800391e <_printf_i+0x162>
 8003906:	07ca      	lsls	r2, r1, #31
 8003908:	bf44      	itt	mi
 800390a:	f041 0120 	orrmi.w	r1, r1, #32
 800390e:	6021      	strmi	r1, [r4, #0]
 8003910:	b91b      	cbnz	r3, 800391a <_printf_i+0x15e>
 8003912:	6822      	ldr	r2, [r4, #0]
 8003914:	f022 0220 	bic.w	r2, r2, #32
 8003918:	6022      	str	r2, [r4, #0]
 800391a:	2210      	movs	r2, #16
 800391c:	e7b7      	b.n	800388e <_printf_i+0xd2>
 800391e:	064d      	lsls	r5, r1, #25
 8003920:	bf48      	it	mi
 8003922:	b29b      	uxthmi	r3, r3
 8003924:	e7ef      	b.n	8003906 <_printf_i+0x14a>
 8003926:	4665      	mov	r5, ip
 8003928:	fbb3 f1f2 	udiv	r1, r3, r2
 800392c:	fb02 3311 	mls	r3, r2, r1, r3
 8003930:	5cc3      	ldrb	r3, [r0, r3]
 8003932:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003936:	460b      	mov	r3, r1
 8003938:	2900      	cmp	r1, #0
 800393a:	d1f5      	bne.n	8003928 <_printf_i+0x16c>
 800393c:	e7b9      	b.n	80038b2 <_printf_i+0xf6>
 800393e:	6813      	ldr	r3, [r2, #0]
 8003940:	6825      	ldr	r5, [r4, #0]
 8003942:	1d18      	adds	r0, r3, #4
 8003944:	6961      	ldr	r1, [r4, #20]
 8003946:	6010      	str	r0, [r2, #0]
 8003948:	0628      	lsls	r0, r5, #24
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	d501      	bpl.n	8003952 <_printf_i+0x196>
 800394e:	6019      	str	r1, [r3, #0]
 8003950:	e002      	b.n	8003958 <_printf_i+0x19c>
 8003952:	066a      	lsls	r2, r5, #25
 8003954:	d5fb      	bpl.n	800394e <_printf_i+0x192>
 8003956:	8019      	strh	r1, [r3, #0]
 8003958:	2300      	movs	r3, #0
 800395a:	4665      	mov	r5, ip
 800395c:	6123      	str	r3, [r4, #16]
 800395e:	e7b9      	b.n	80038d4 <_printf_i+0x118>
 8003960:	6813      	ldr	r3, [r2, #0]
 8003962:	1d19      	adds	r1, r3, #4
 8003964:	6011      	str	r1, [r2, #0]
 8003966:	681d      	ldr	r5, [r3, #0]
 8003968:	6862      	ldr	r2, [r4, #4]
 800396a:	2100      	movs	r1, #0
 800396c:	4628      	mov	r0, r5
 800396e:	f000 f8e1 	bl	8003b34 <memchr>
 8003972:	b108      	cbz	r0, 8003978 <_printf_i+0x1bc>
 8003974:	1b40      	subs	r0, r0, r5
 8003976:	6060      	str	r0, [r4, #4]
 8003978:	6863      	ldr	r3, [r4, #4]
 800397a:	6123      	str	r3, [r4, #16]
 800397c:	2300      	movs	r3, #0
 800397e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003982:	e7a7      	b.n	80038d4 <_printf_i+0x118>
 8003984:	6923      	ldr	r3, [r4, #16]
 8003986:	462a      	mov	r2, r5
 8003988:	4639      	mov	r1, r7
 800398a:	4630      	mov	r0, r6
 800398c:	47c0      	blx	r8
 800398e:	3001      	adds	r0, #1
 8003990:	d0aa      	beq.n	80038e8 <_printf_i+0x12c>
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	079b      	lsls	r3, r3, #30
 8003996:	d413      	bmi.n	80039c0 <_printf_i+0x204>
 8003998:	68e0      	ldr	r0, [r4, #12]
 800399a:	9b03      	ldr	r3, [sp, #12]
 800399c:	4298      	cmp	r0, r3
 800399e:	bfb8      	it	lt
 80039a0:	4618      	movlt	r0, r3
 80039a2:	e7a3      	b.n	80038ec <_printf_i+0x130>
 80039a4:	2301      	movs	r3, #1
 80039a6:	464a      	mov	r2, r9
 80039a8:	4639      	mov	r1, r7
 80039aa:	4630      	mov	r0, r6
 80039ac:	47c0      	blx	r8
 80039ae:	3001      	adds	r0, #1
 80039b0:	d09a      	beq.n	80038e8 <_printf_i+0x12c>
 80039b2:	3501      	adds	r5, #1
 80039b4:	68e3      	ldr	r3, [r4, #12]
 80039b6:	9a03      	ldr	r2, [sp, #12]
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	42ab      	cmp	r3, r5
 80039bc:	dcf2      	bgt.n	80039a4 <_printf_i+0x1e8>
 80039be:	e7eb      	b.n	8003998 <_printf_i+0x1dc>
 80039c0:	2500      	movs	r5, #0
 80039c2:	f104 0919 	add.w	r9, r4, #25
 80039c6:	e7f5      	b.n	80039b4 <_printf_i+0x1f8>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ac      	bne.n	8003926 <_printf_i+0x16a>
 80039cc:	7803      	ldrb	r3, [r0, #0]
 80039ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039d6:	e76c      	b.n	80038b2 <_printf_i+0xf6>
 80039d8:	08003ce1 	.word	0x08003ce1
 80039dc:	08003cf2 	.word	0x08003cf2

080039e0 <_sbrk_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	2300      	movs	r3, #0
 80039e4:	4c05      	ldr	r4, [pc, #20]	; (80039fc <_sbrk_r+0x1c>)
 80039e6:	4605      	mov	r5, r0
 80039e8:	4608      	mov	r0, r1
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	f7fd fbd0 	bl	8001190 <_sbrk>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	d102      	bne.n	80039fa <_sbrk_r+0x1a>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	b103      	cbz	r3, 80039fa <_sbrk_r+0x1a>
 80039f8:	602b      	str	r3, [r5, #0]
 80039fa:	bd38      	pop	{r3, r4, r5, pc}
 80039fc:	20000264 	.word	0x20000264

08003a00 <__sread>:
 8003a00:	b510      	push	{r4, lr}
 8003a02:	460c      	mov	r4, r1
 8003a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a08:	f000 f8a4 	bl	8003b54 <_read_r>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	bfab      	itete	ge
 8003a10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a12:	89a3      	ldrhlt	r3, [r4, #12]
 8003a14:	181b      	addge	r3, r3, r0
 8003a16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a1a:	bfac      	ite	ge
 8003a1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a1e:	81a3      	strhlt	r3, [r4, #12]
 8003a20:	bd10      	pop	{r4, pc}

08003a22 <__swrite>:
 8003a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a26:	461f      	mov	r7, r3
 8003a28:	898b      	ldrh	r3, [r1, #12]
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	05db      	lsls	r3, r3, #23
 8003a2e:	460c      	mov	r4, r1
 8003a30:	4616      	mov	r6, r2
 8003a32:	d505      	bpl.n	8003a40 <__swrite+0x1e>
 8003a34:	2302      	movs	r3, #2
 8003a36:	2200      	movs	r2, #0
 8003a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3c:	f000 f868 	bl	8003b10 <_lseek_r>
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	4632      	mov	r2, r6
 8003a44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a48:	81a3      	strh	r3, [r4, #12]
 8003a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a4e:	463b      	mov	r3, r7
 8003a50:	4628      	mov	r0, r5
 8003a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a56:	f000 b817 	b.w	8003a88 <_write_r>

08003a5a <__sseek>:
 8003a5a:	b510      	push	{r4, lr}
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a62:	f000 f855 	bl	8003b10 <_lseek_r>
 8003a66:	1c43      	adds	r3, r0, #1
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	bf15      	itete	ne
 8003a6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a76:	81a3      	strheq	r3, [r4, #12]
 8003a78:	bf18      	it	ne
 8003a7a:	81a3      	strhne	r3, [r4, #12]
 8003a7c:	bd10      	pop	{r4, pc}

08003a7e <__sclose>:
 8003a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a82:	f000 b813 	b.w	8003aac <_close_r>
	...

08003a88 <_write_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	2200      	movs	r2, #0
 8003a92:	4c05      	ldr	r4, [pc, #20]	; (8003aa8 <_write_r+0x20>)
 8003a94:	6022      	str	r2, [r4, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f7fd fb2d 	bl	80010f6 <_write>
 8003a9c:	1c43      	adds	r3, r0, #1
 8003a9e:	d102      	bne.n	8003aa6 <_write_r+0x1e>
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	b103      	cbz	r3, 8003aa6 <_write_r+0x1e>
 8003aa4:	602b      	str	r3, [r5, #0]
 8003aa6:	bd38      	pop	{r3, r4, r5, pc}
 8003aa8:	20000264 	.word	0x20000264

08003aac <_close_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	2300      	movs	r3, #0
 8003ab0:	4c05      	ldr	r4, [pc, #20]	; (8003ac8 <_close_r+0x1c>)
 8003ab2:	4605      	mov	r5, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	6023      	str	r3, [r4, #0]
 8003ab8:	f7fd fb39 	bl	800112e <_close>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_close_r+0x1a>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_close_r+0x1a>
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	20000264 	.word	0x20000264

08003acc <_fstat_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4c06      	ldr	r4, [pc, #24]	; (8003aec <_fstat_r+0x20>)
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	f7fd fb33 	bl	8001144 <_fstat>
 8003ade:	1c43      	adds	r3, r0, #1
 8003ae0:	d102      	bne.n	8003ae8 <_fstat_r+0x1c>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	b103      	cbz	r3, 8003ae8 <_fstat_r+0x1c>
 8003ae6:	602b      	str	r3, [r5, #0]
 8003ae8:	bd38      	pop	{r3, r4, r5, pc}
 8003aea:	bf00      	nop
 8003aec:	20000264 	.word	0x20000264

08003af0 <_isatty_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	2300      	movs	r3, #0
 8003af4:	4c05      	ldr	r4, [pc, #20]	; (8003b0c <_isatty_r+0x1c>)
 8003af6:	4605      	mov	r5, r0
 8003af8:	4608      	mov	r0, r1
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	f7fd fb31 	bl	8001162 <_isatty>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_isatty_r+0x1a>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_isatty_r+0x1a>
 8003b08:	602b      	str	r3, [r5, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	20000264 	.word	0x20000264

08003b10 <_lseek_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4605      	mov	r5, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	2200      	movs	r2, #0
 8003b1a:	4c05      	ldr	r4, [pc, #20]	; (8003b30 <_lseek_r+0x20>)
 8003b1c:	6022      	str	r2, [r4, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f7fd fb29 	bl	8001176 <_lseek>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_lseek_r+0x1e>
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_lseek_r+0x1e>
 8003b2c:	602b      	str	r3, [r5, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	20000264 	.word	0x20000264

08003b34 <memchr>:
 8003b34:	b510      	push	{r4, lr}
 8003b36:	b2c9      	uxtb	r1, r1
 8003b38:	4402      	add	r2, r0
 8003b3a:	4290      	cmp	r0, r2
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	d101      	bne.n	8003b44 <memchr+0x10>
 8003b40:	2300      	movs	r3, #0
 8003b42:	e003      	b.n	8003b4c <memchr+0x18>
 8003b44:	781c      	ldrb	r4, [r3, #0]
 8003b46:	3001      	adds	r0, #1
 8003b48:	428c      	cmp	r4, r1
 8003b4a:	d1f6      	bne.n	8003b3a <memchr+0x6>
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd10      	pop	{r4, pc}

08003b50 <__malloc_lock>:
 8003b50:	4770      	bx	lr

08003b52 <__malloc_unlock>:
 8003b52:	4770      	bx	lr

08003b54 <_read_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4605      	mov	r5, r0
 8003b58:	4608      	mov	r0, r1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4c05      	ldr	r4, [pc, #20]	; (8003b74 <_read_r+0x20>)
 8003b60:	6022      	str	r2, [r4, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7fd faaa 	bl	80010bc <_read>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_read_r+0x1e>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_read_r+0x1e>
 8003b70:	602b      	str	r3, [r5, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	20000264 	.word	0x20000264

08003b78 <_init>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	bf00      	nop
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr

08003b84 <_fini>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	bf00      	nop
 8003b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8a:	bc08      	pop	{r3}
 8003b8c:	469e      	mov	lr, r3
 8003b8e:	4770      	bx	lr
